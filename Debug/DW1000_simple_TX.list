
DW1000_simple_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003494  08003494  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003494  08003494  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003494  08003494  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800349c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000074  08003510  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003510  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df0d  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002232  00000000  00000000  0002dfaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc0  00000000  00000000  000301e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  00030ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d52  00000000  00000000  00031a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000097fe  00000000  00000000  000487c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073f79  00000000  00000000  00051fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5f39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035dc  00000000  00000000  000c5fb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003394 	.word	0x08003394

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003394 	.word	0x08003394

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <debugPrint>:
	  HAL_Delay(200);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	  HAL_Delay(200);
}
void debugPrint(char _out[])
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 200);
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f7ff fff1 	bl	800014c <strlen>
 800016a:	4603      	mov	r3, r0
 800016c:	b29a      	uxth	r2, r3
 800016e:	23c8      	movs	r3, #200	; 0xc8
 8000170:	6879      	ldr	r1, [r7, #4]
 8000172:	4803      	ldr	r0, [pc, #12]	; (8000180 <debugPrint+0x24>)
 8000174:	f002 fb0d 	bl	8002792 <HAL_UART_Transmit>
	 //char newline[2] = "\r\n";
	 //HAL_UART_Transmit(&huart1, (uint8_t *) newline, 2, 200);
}
 8000178:	bf00      	nop
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	200000d4 	.word	0x200000d4

08000184 <debugInt32Hexln>:
void debugInt32Hexln(uint32_t uint32data)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b086      	sub	sp, #24
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	char buff[8];
	sprintf(buff,"%08X",uint32data);
 800018c:	f107 0310 	add.w	r3, r7, #16
 8000190:	687a      	ldr	r2, [r7, #4]
 8000192:	490c      	ldr	r1, [pc, #48]	; (80001c4 <debugInt32Hexln+0x40>)
 8000194:	4618      	mov	r0, r3
 8000196:	f002 fceb 	bl	8002b70 <siprintf>
	HAL_UART_Transmit(&huart1, buff, 8, 200);
 800019a:	f107 0110 	add.w	r1, r7, #16
 800019e:	23c8      	movs	r3, #200	; 0xc8
 80001a0:	2208      	movs	r2, #8
 80001a2:	4809      	ldr	r0, [pc, #36]	; (80001c8 <debugInt32Hexln+0x44>)
 80001a4:	f002 faf5 	bl	8002792 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80001a8:	f640 230d 	movw	r3, #2573	; 0xa0d
 80001ac:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t *) newline, 2, 200);
 80001ae:	f107 010c 	add.w	r1, r7, #12
 80001b2:	23c8      	movs	r3, #200	; 0xc8
 80001b4:	2202      	movs	r2, #2
 80001b6:	4804      	ldr	r0, [pc, #16]	; (80001c8 <debugInt32Hexln+0x44>)
 80001b8:	f002 faeb 	bl	8002792 <HAL_UART_Transmit>
}
 80001bc:	bf00      	nop
 80001be:	3718      	adds	r7, #24
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	080033ac 	.word	0x080033ac
 80001c8:	200000d4 	.word	0x200000d4

080001cc <debugInt16Hexln>:
void debugInt16Hexln(uint16_t data)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	80fb      	strh	r3, [r7, #6]
	char buff[4];
	sprintf(buff,"%04X",data);
 80001d6:	88fa      	ldrh	r2, [r7, #6]
 80001d8:	f107 030c 	add.w	r3, r7, #12
 80001dc:	490c      	ldr	r1, [pc, #48]	; (8000210 <debugInt16Hexln+0x44>)
 80001de:	4618      	mov	r0, r3
 80001e0:	f002 fcc6 	bl	8002b70 <siprintf>
	HAL_UART_Transmit(&huart1, buff, 4, 200);
 80001e4:	f107 010c 	add.w	r1, r7, #12
 80001e8:	23c8      	movs	r3, #200	; 0xc8
 80001ea:	2204      	movs	r2, #4
 80001ec:	4809      	ldr	r0, [pc, #36]	; (8000214 <debugInt16Hexln+0x48>)
 80001ee:	f002 fad0 	bl	8002792 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80001f2:	f640 230d 	movw	r3, #2573	; 0xa0d
 80001f6:	813b      	strh	r3, [r7, #8]
	HAL_UART_Transmit(&huart1, (uint8_t *) newline, 2, 200);
 80001f8:	f107 0108 	add.w	r1, r7, #8
 80001fc:	23c8      	movs	r3, #200	; 0xc8
 80001fe:	2202      	movs	r2, #2
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <debugInt16Hexln+0x48>)
 8000202:	f002 fac6 	bl	8002792 <HAL_UART_Transmit>
}
 8000206:	bf00      	nop
 8000208:	3710      	adds	r7, #16
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	080033b4 	.word	0x080033b4
 8000214:	200000d4 	.word	0x200000d4

08000218 <debugInt8Hexln>:
void debugInt8Hexln(uint8_t uint8data)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
	char buff[2];
	sprintf(buff,"%02X",uint8data);
 8000222:	79fa      	ldrb	r2, [r7, #7]
 8000224:	f107 030c 	add.w	r3, r7, #12
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <debugInt8Hexln+0x44>)
 800022a:	4618      	mov	r0, r3
 800022c:	f002 fca0 	bl	8002b70 <siprintf>
	HAL_UART_Transmit(&huart1, buff, 2, 200);
 8000230:	f107 010c 	add.w	r1, r7, #12
 8000234:	23c8      	movs	r3, #200	; 0xc8
 8000236:	2202      	movs	r2, #2
 8000238:	4809      	ldr	r0, [pc, #36]	; (8000260 <debugInt8Hexln+0x48>)
 800023a:	f002 faaa 	bl	8002792 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800023e:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000242:	813b      	strh	r3, [r7, #8]
	HAL_UART_Transmit(&huart1, (uint8_t *) newline, 2, 200);
 8000244:	f107 0108 	add.w	r1, r7, #8
 8000248:	23c8      	movs	r3, #200	; 0xc8
 800024a:	2202      	movs	r2, #2
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <debugInt8Hexln+0x48>)
 800024e:	f002 faa0 	bl	8002792 <HAL_UART_Transmit>
}
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	080033bc 	.word	0x080033bc
 8000260:	200000d4 	.word	0x200000d4

08000264 <DW1000_init_fail>:
	char buff[2];
	sprintf(buff,"%02X",uint8data);
	HAL_UART_Transmit(&huart1, buff, 2, 200);
}
uint8 DW1000_init_fail()
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
	uint8 init_fail = 1;
 800026a:	2301      	movs	r3, #1
 800026c:	71fb      	strb	r3, [r7, #7]
	uint8 const fail_count = 20;
 800026e:	2314      	movs	r3, #20
 8000270:	717b      	strb	r3, [r7, #5]
	for(uint8 i=0;i<fail_count;i++){
 8000272:	2300      	movs	r3, #0
 8000274:	71bb      	strb	r3, [r7, #6]
 8000276:	e00f      	b.n	8000298 <DW1000_init_fail+0x34>
	  if (!(dwt_initialise(DWT_LOADUCODE) == DWT_ERROR))
 8000278:	2001      	movs	r0, #1
 800027a:	f000 fba7 	bl	80009cc <dwt_initialise>
 800027e:	4603      	mov	r3, r0
 8000280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000284:	d005      	beq.n	8000292 <DW1000_init_fail+0x2e>
	  {
		  debugPrint("INIT SUCCESS\r\n");
 8000286:	4809      	ldr	r0, [pc, #36]	; (80002ac <DW1000_init_fail+0x48>)
 8000288:	f7ff ff68 	bl	800015c <debugPrint>
		  init_fail = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	71fb      	strb	r3, [r7, #7]
		  break;
 8000290:	e006      	b.n	80002a0 <DW1000_init_fail+0x3c>
	for(uint8 i=0;i<fail_count;i++){
 8000292:	79bb      	ldrb	r3, [r7, #6]
 8000294:	3301      	adds	r3, #1
 8000296:	71bb      	strb	r3, [r7, #6]
 8000298:	79ba      	ldrb	r2, [r7, #6]
 800029a:	797b      	ldrb	r3, [r7, #5]
 800029c:	429a      	cmp	r2, r3
 800029e:	d3eb      	bcc.n	8000278 <DW1000_init_fail+0x14>
	  }
	}
	return init_fail;
 80002a0:	79fb      	ldrb	r3, [r7, #7]
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	080033c4 	.word	0x080033c4

080002b0 <DW1000_initiate>:
void DW1000_initiate()
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	while(dwt_read16bitoffsetreg(AGC_CTRL_ID,AGC_TUNE1_OFFSET)!=0x8870)
 80002b4:	e005      	b.n	80002c2 <DW1000_initiate+0x12>
		dwt_write16bitoffsetreg(AGC_CTRL_ID,AGC_TUNE1_OFFSET,0x8870);
 80002b6:	f648 0270 	movw	r2, #34928	; 0x8870
 80002ba:	2104      	movs	r1, #4
 80002bc:	2023      	movs	r0, #35	; 0x23
 80002be:	f000 fdf9 	bl	8000eb4 <dwt_write16bitoffsetreg>
	while(dwt_read16bitoffsetreg(AGC_CTRL_ID,AGC_TUNE1_OFFSET)!=0x8870)
 80002c2:	2104      	movs	r1, #4
 80002c4:	2023      	movs	r0, #35	; 0x23
 80002c6:	f000 fdb2 	bl	8000e2e <dwt_read16bitoffsetreg>
 80002ca:	4603      	mov	r3, r0
 80002cc:	461a      	mov	r2, r3
 80002ce:	f648 0370 	movw	r3, #34928	; 0x8870
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d1ef      	bne.n	80002b6 <DW1000_initiate+0x6>
	while(dwt_read32bitoffsetreg(DRX_CONF_ID,DRX_TUNE2_OFFSET)!=0x311A002D)
 80002d6:	e004      	b.n	80002e2 <DW1000_initiate+0x32>
		dwt_write32bitoffsetreg(DRX_CONF_ID,DRX_TUNE2_OFFSET,0x311A002D);
 80002d8:	4a2d      	ldr	r2, [pc, #180]	; (8000390 <DW1000_initiate+0xe0>)
 80002da:	2108      	movs	r1, #8
 80002dc:	2027      	movs	r0, #39	; 0x27
 80002de:	f000 fe05 	bl	8000eec <dwt_write32bitoffsetreg>
	while(dwt_read32bitoffsetreg(DRX_CONF_ID,DRX_TUNE2_OFFSET)!=0x311A002D)
 80002e2:	2108      	movs	r1, #8
 80002e4:	2027      	movs	r0, #39	; 0x27
 80002e6:	f000 fd7b 	bl	8000de0 <dwt_read32bitoffsetreg>
 80002ea:	4602      	mov	r2, r0
 80002ec:	4b28      	ldr	r3, [pc, #160]	; (8000390 <DW1000_initiate+0xe0>)
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d1f2      	bne.n	80002d8 <DW1000_initiate+0x28>
	while(dwt_read8bitoffsetreg(LDE_IF_ID,LDE_CFG1_OFFSET)!=0x6D)
 80002f2:	e005      	b.n	8000300 <DW1000_initiate+0x50>
		dwt_write8bitoffsetreg(LDE_IF_ID,LDE_CFG1_OFFSET,0x6D);
 80002f4:	226d      	movs	r2, #109	; 0x6d
 80002f6:	f640 0106 	movw	r1, #2054	; 0x806
 80002fa:	202e      	movs	r0, #46	; 0x2e
 80002fc:	f000 fdc7 	bl	8000e8e <dwt_write8bitoffsetreg>
	while(dwt_read8bitoffsetreg(LDE_IF_ID,LDE_CFG1_OFFSET)!=0x6D)
 8000300:	f640 0106 	movw	r1, #2054	; 0x806
 8000304:	202e      	movs	r0, #46	; 0x2e
 8000306:	f000 fdaf 	bl	8000e68 <dwt_read8bitoffsetreg>
 800030a:	4603      	mov	r3, r0
 800030c:	2b6d      	cmp	r3, #109	; 0x6d
 800030e:	d1f1      	bne.n	80002f4 <DW1000_initiate+0x44>
	while(dwt_read16bitoffsetreg(LDE_IF_ID,LDE_CFG2_OFFSET)!=0x1607)
 8000310:	e006      	b.n	8000320 <DW1000_initiate+0x70>
		dwt_write16bitoffsetreg(LDE_IF_ID,LDE_CFG2_OFFSET,0x1607);
 8000312:	f241 6207 	movw	r2, #5639	; 0x1607
 8000316:	f641 0106 	movw	r1, #6150	; 0x1806
 800031a:	202e      	movs	r0, #46	; 0x2e
 800031c:	f000 fdca 	bl	8000eb4 <dwt_write16bitoffsetreg>
	while(dwt_read16bitoffsetreg(LDE_IF_ID,LDE_CFG2_OFFSET)!=0x1607)
 8000320:	f641 0106 	movw	r1, #6150	; 0x1806
 8000324:	202e      	movs	r0, #46	; 0x2e
 8000326:	f000 fd82 	bl	8000e2e <dwt_read16bitoffsetreg>
 800032a:	4603      	mov	r3, r0
 800032c:	461a      	mov	r2, r3
 800032e:	f241 6307 	movw	r3, #5639	; 0x1607
 8000332:	429a      	cmp	r2, r3
 8000334:	d1ed      	bne.n	8000312 <DW1000_initiate+0x62>
	while(dwt_read32bitreg(TX_POWER_ID)!=0x0E082848)
 8000336:	e004      	b.n	8000342 <DW1000_initiate+0x92>
		dwt_write32bitreg(TX_POWER_ID,0x0E082848);
 8000338:	4a16      	ldr	r2, [pc, #88]	; (8000394 <DW1000_initiate+0xe4>)
 800033a:	2100      	movs	r1, #0
 800033c:	201e      	movs	r0, #30
 800033e:	f000 fdd5 	bl	8000eec <dwt_write32bitoffsetreg>
	while(dwt_read32bitreg(TX_POWER_ID)!=0x0E082848)
 8000342:	2100      	movs	r1, #0
 8000344:	201e      	movs	r0, #30
 8000346:	f000 fd4b 	bl	8000de0 <dwt_read32bitoffsetreg>
 800034a:	4602      	mov	r2, r0
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <DW1000_initiate+0xe4>)
 800034e:	429a      	cmp	r2, r3
 8000350:	d1f2      	bne.n	8000338 <DW1000_initiate+0x88>
	while(dwt_read32bitreg(SYS_CFG_ID)!=0x00001600)
 8000352:	e005      	b.n	8000360 <DW1000_initiate+0xb0>
		dwt_write32bitreg(SYS_CFG_ID,0x00001600);
 8000354:	f44f 52b0 	mov.w	r2, #5632	; 0x1600
 8000358:	2100      	movs	r1, #0
 800035a:	2004      	movs	r0, #4
 800035c:	f000 fdc6 	bl	8000eec <dwt_write32bitoffsetreg>
	while(dwt_read32bitreg(SYS_CFG_ID)!=0x00001600)
 8000360:	2100      	movs	r1, #0
 8000362:	2004      	movs	r0, #4
 8000364:	f000 fd3c 	bl	8000de0 <dwt_read32bitoffsetreg>
 8000368:	4603      	mov	r3, r0
 800036a:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 800036e:	d1f1      	bne.n	8000354 <DW1000_initiate+0xa4>
	while(dwt_read8bitoffsetreg(FS_CTRL_ID,FS_PLLTUNE_OFFSET)!=0xBE)
 8000370:	e004      	b.n	800037c <DW1000_initiate+0xcc>
		dwt_write8bitoffsetreg(FS_CTRL_ID,FS_PLLTUNE_OFFSET,0xBE);
 8000372:	22be      	movs	r2, #190	; 0xbe
 8000374:	210b      	movs	r1, #11
 8000376:	202b      	movs	r0, #43	; 0x2b
 8000378:	f000 fd89 	bl	8000e8e <dwt_write8bitoffsetreg>
	while(dwt_read8bitoffsetreg(FS_CTRL_ID,FS_PLLTUNE_OFFSET)!=0xBE)
 800037c:	210b      	movs	r1, #11
 800037e:	202b      	movs	r0, #43	; 0x2b
 8000380:	f000 fd72 	bl	8000e68 <dwt_read8bitoffsetreg>
 8000384:	4603      	mov	r3, r0
 8000386:	2bbe      	cmp	r3, #190	; 0xbe
 8000388:	d1f3      	bne.n	8000372 <DW1000_initiate+0xc2>
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	311a002d 	.word	0x311a002d
 8000394:	0e082848 	.word	0x0e082848

08000398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800039c:	f001 f88c 	bl	80014b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a0:	f000 f88e 	bl	80004c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a4:	f000 f932 	bl	800060c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003a8:	f000 f906 	bl	80005b8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80003ac:	f000 f8ce 	bl	800054c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint32 u32;
  port_set_dw1000_slowrate();
 80003b0:	f001 f83a 	bl	8001428 <port_set_dw1000_slowrate>
  //port_set_dw1000_fastrate();
  debugPrint("\r\n===============Restart_TX V1.0.0=================\r\n");
 80003b4:	4840      	ldr	r0, [pc, #256]	; (80004b8 <main+0x120>)
 80003b6:	f7ff fed1 	bl	800015c <debugPrint>
  while(1)
  {
	  //DWReset();
	  debugInt32Hexln(dwt_read32bitreg(SYS_STATUS_ID));
 80003ba:	2100      	movs	r1, #0
 80003bc:	200f      	movs	r0, #15
 80003be:	f000 fd0f 	bl	8000de0 <dwt_read32bitoffsetreg>
 80003c2:	4603      	mov	r3, r0
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff fedd 	bl	8000184 <debugInt32Hexln>
	  reset_DW1000();
 80003ca:	f001 f809 	bl	80013e0 <reset_DW1000>
	  debugInt32Hexln(dwt_read32bitreg(DEV_ID_ID));
 80003ce:	2100      	movs	r1, #0
 80003d0:	2000      	movs	r0, #0
 80003d2:	f000 fd05 	bl	8000de0 <dwt_read32bitoffsetreg>
 80003d6:	4603      	mov	r3, r0
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff fed3 	bl	8000184 <debugInt32Hexln>
	  debugInt32Hexln(dwt_read32bitreg(SYS_STATUS_ID));
 80003de:	2100      	movs	r1, #0
 80003e0:	200f      	movs	r0, #15
 80003e2:	f000 fcfd 	bl	8000de0 <dwt_read32bitoffsetreg>
 80003e6:	4603      	mov	r3, r0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff fecb 	bl	8000184 <debugInt32Hexln>
	  if(DW1000_init_fail())continue; //1 means initiate fails
 80003ee:	f7ff ff39 	bl	8000264 <DW1000_init_fail>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d000      	beq.n	80003fa <main+0x62>
  {
 80003f8:	e7df      	b.n	80003ba <main+0x22>
	  HAL_Delay(1000);
 80003fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003fe:	f001 f8bd 	bl	800157c <HAL_Delay>
	  debugInt32Hexln(dwt_read32bitreg(SYS_STATUS_ID));
 8000402:	2100      	movs	r1, #0
 8000404:	200f      	movs	r0, #15
 8000406:	f000 fceb 	bl	8000de0 <dwt_read32bitoffsetreg>
 800040a:	4603      	mov	r3, r0
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff feb9 	bl	8000184 <debugInt32Hexln>

	  //port_set_dw1000_fastrate();
	  //debugInt32Hexln(dwt_read32bitoffsetreg(EXT_SYNC_ID,EC_CTRL_OFFSET));
	  //reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */

	  DW1000_initiate();
 8000412:	f7ff ff4d 	bl	80002b0 <DW1000_initiate>
	  debugInt16Hexln(dwt_read16bitoffsetreg(AGC_CTRL_ID,AGC_TUNE1_OFFSET));
 8000416:	2104      	movs	r1, #4
 8000418:	2023      	movs	r0, #35	; 0x23
 800041a:	f000 fd08 	bl	8000e2e <dwt_read16bitoffsetreg>
 800041e:	4603      	mov	r3, r0
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff fed3 	bl	80001cc <debugInt16Hexln>
	  debugInt32Hexln(dwt_read32bitoffsetreg(DRX_CONF_ID,DRX_TUNE2_OFFSET));
 8000426:	2108      	movs	r1, #8
 8000428:	2027      	movs	r0, #39	; 0x27
 800042a:	f000 fcd9 	bl	8000de0 <dwt_read32bitoffsetreg>
 800042e:	4603      	mov	r3, r0
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff fea7 	bl	8000184 <debugInt32Hexln>
	  debugInt8Hexln(dwt_read8bitoffsetreg(LDE_IF_ID,LDE_CFG1_OFFSET));
 8000436:	f640 0106 	movw	r1, #2054	; 0x806
 800043a:	202e      	movs	r0, #46	; 0x2e
 800043c:	f000 fd14 	bl	8000e68 <dwt_read8bitoffsetreg>
 8000440:	4603      	mov	r3, r0
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fee8 	bl	8000218 <debugInt8Hexln>
	  debugInt16Hexln(dwt_read16bitoffsetreg(LDE_IF_ID,LDE_CFG2_OFFSET));
 8000448:	f641 0106 	movw	r1, #6150	; 0x1806
 800044c:	202e      	movs	r0, #46	; 0x2e
 800044e:	f000 fcee 	bl	8000e2e <dwt_read16bitoffsetreg>
 8000452:	4603      	mov	r3, r0
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff feb9 	bl	80001cc <debugInt16Hexln>
	  debugInt32Hexln(dwt_read32bitreg(TX_POWER_ID));
 800045a:	2100      	movs	r1, #0
 800045c:	201e      	movs	r0, #30
 800045e:	f000 fcbf 	bl	8000de0 <dwt_read32bitoffsetreg>
 8000462:	4603      	mov	r3, r0
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff fe8d 	bl	8000184 <debugInt32Hexln>
	  debugInt32Hexln(dwt_read32bitreg(SYS_STATE_ID)&0x000F0000);
 800046a:	2100      	movs	r1, #0
 800046c:	2019      	movs	r0, #25
 800046e:	f000 fcb7 	bl	8000de0 <dwt_read32bitoffsetreg>
 8000472:	4603      	mov	r3, r0
 8000474:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff fe83 	bl	8000184 <debugInt32Hexln>
	  debugInt32Hexln(dwt_read32bitreg(SYS_STATUS_ID));
 800047e:	2100      	movs	r1, #0
 8000480:	200f      	movs	r0, #15
 8000482:	f000 fcad 	bl	8000de0 <dwt_read32bitoffsetreg>
 8000486:	4603      	mov	r3, r0
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff fe7b 	bl	8000184 <debugInt32Hexln>
	  debugInt8Hexln(dwt_read8bitoffsetreg(FS_CTRL_ID,FS_PLLTUNE_OFFSET));
 800048e:	210b      	movs	r1, #11
 8000490:	202b      	movs	r0, #43	; 0x2b
 8000492:	f000 fce9 	bl	8000e68 <dwt_read8bitoffsetreg>
 8000496:	4603      	mov	r3, r0
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff febd 	bl	8000218 <debugInt8Hexln>

	  debugInt32Hexln(dwt_read32bitoffsetreg(EXT_SYNC_ID,EC_CTRL_OFFSET));
 800049e:	2100      	movs	r1, #0
 80004a0:	2024      	movs	r0, #36	; 0x24
 80004a2:	f000 fc9d 	bl	8000de0 <dwt_read32bitoffsetreg>
 80004a6:	4603      	mov	r3, r0
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff fe6b 	bl	8000184 <debugInt32Hexln>
	  debugPrint("******************\r\n");
 80004ae:	4803      	ldr	r0, [pc, #12]	; (80004bc <main+0x124>)
 80004b0:	f7ff fe54 	bl	800015c <debugPrint>
	  //spi_test();
	  while(1);
 80004b4:	e7fe      	b.n	80004b4 <main+0x11c>
 80004b6:	bf00      	nop
 80004b8:	080033e4 	.word	0x080033e4
 80004bc:	0800341c 	.word	0x0800341c

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b090      	sub	sp, #64	; 0x40
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	f107 0318 	add.w	r3, r7, #24
 80004ca:	2228      	movs	r2, #40	; 0x28
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f002 fb46 	bl	8002b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004e2:	2301      	movs	r3, #1
 80004e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004ec:	2300      	movs	r3, #0
 80004ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f0:	2301      	movs	r3, #1
 80004f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f4:	2302      	movs	r3, #2
 80004f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000502:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000504:	f107 0318 	add.w	r3, r7, #24
 8000508:	4618      	mov	r0, r3
 800050a:	f001 faaf 	bl	8001a6c <HAL_RCC_OscConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000514:	f000 f902 	bl	800071c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000518:	230f      	movs	r3, #15
 800051a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800051c:	2302      	movs	r3, #2
 800051e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000528:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2102      	movs	r1, #2
 8000532:	4618      	mov	r0, r3
 8000534:	f001 fd1a 	bl	8001f6c <HAL_RCC_ClockConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800053e:	f000 f8ed 	bl	800071c <Error_Handler>
  }
}
 8000542:	bf00      	nop
 8000544:	3740      	adds	r7, #64	; 0x40
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000550:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <MX_SPI1_Init+0x64>)
 8000552:	4a18      	ldr	r2, [pc, #96]	; (80005b4 <MX_SPI1_Init+0x68>)
 8000554:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000556:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <MX_SPI1_Init+0x64>)
 8000558:	f44f 7282 	mov.w	r2, #260	; 0x104
 800055c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <MX_SPI1_Init+0x64>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_SPI1_Init+0x64>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_SPI1_Init+0x64>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_SPI1_Init+0x64>)
 8000572:	2200      	movs	r2, #0
 8000574:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_SPI1_Init+0x64>)
 8000578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800057c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <MX_SPI1_Init+0x64>)
 8000580:	2208      	movs	r2, #8
 8000582:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000584:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <MX_SPI1_Init+0x64>)
 8000586:	2200      	movs	r2, #0
 8000588:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <MX_SPI1_Init+0x64>)
 800058c:	2200      	movs	r2, #0
 800058e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <MX_SPI1_Init+0x64>)
 8000592:	2200      	movs	r2, #0
 8000594:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MX_SPI1_Init+0x64>)
 8000598:	220a      	movs	r2, #10
 800059a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <MX_SPI1_Init+0x64>)
 800059e:	f001 fe81 	bl	80022a4 <HAL_SPI_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005a8:	f000 f8b8 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000114 	.word	0x20000114
 80005b4:	40013000 	.word	0x40013000

080005b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <MX_USART1_UART_Init+0x50>)
 80005c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005de:	220c      	movs	r2, #12
 80005e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <MX_USART1_UART_Init+0x4c>)
 80005f0:	f002 f882 	bl	80026f8 <HAL_UART_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005fa:	f000 f88f 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000d4 	.word	0x200000d4
 8000608:	40013800 	.word	0x40013800

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000620:	4b3a      	ldr	r3, [pc, #232]	; (800070c <MX_GPIO_Init+0x100>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a39      	ldr	r2, [pc, #228]	; (800070c <MX_GPIO_Init+0x100>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b37      	ldr	r3, [pc, #220]	; (800070c <MX_GPIO_Init+0x100>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0310 	and.w	r3, r3, #16
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000638:	4b34      	ldr	r3, [pc, #208]	; (800070c <MX_GPIO_Init+0x100>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a33      	ldr	r2, [pc, #204]	; (800070c <MX_GPIO_Init+0x100>)
 800063e:	f043 0320 	orr.w	r3, r3, #32
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b31      	ldr	r3, [pc, #196]	; (800070c <MX_GPIO_Init+0x100>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0320 	and.w	r3, r3, #32
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b2e      	ldr	r3, [pc, #184]	; (800070c <MX_GPIO_Init+0x100>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a2d      	ldr	r2, [pc, #180]	; (800070c <MX_GPIO_Init+0x100>)
 8000656:	f043 0304 	orr.w	r3, r3, #4
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b2b      	ldr	r3, [pc, #172]	; (800070c <MX_GPIO_Init+0x100>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <MX_GPIO_Init+0x100>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <MX_GPIO_Init+0x100>)
 800066e:	f043 0308 	orr.w	r3, r3, #8
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <MX_GPIO_Init+0x100>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0308 	and.w	r3, r3, #8
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000686:	4822      	ldr	r0, [pc, #136]	; (8000710 <MX_GPIO_Init+0x104>)
 8000688:	f001 f9d8 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DW_RESET_Pin|DW_NSS_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	210a      	movs	r1, #10
 8000690:	4820      	ldr	r0, [pc, #128]	; (8000714 <MX_GPIO_Init+0x108>)
 8000692:	f001 f9d3 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	4818      	ldr	r0, [pc, #96]	; (8000710 <MX_GPIO_Init+0x104>)
 80006b0:	f001 f86a 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 80006b4:	2301      	movs	r3, #1
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_GPIO_Init+0x10c>)
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	4619      	mov	r1, r3
 80006c6:	4813      	ldr	r0, [pc, #76]	; (8000714 <MX_GPIO_Init+0x108>)
 80006c8:	f001 f85e 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80006d0:	2311      	movs	r3, #17
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2302      	movs	r3, #2
 80006da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4619      	mov	r1, r3
 80006e2:	480c      	ldr	r0, [pc, #48]	; (8000714 <MX_GPIO_Init+0x108>)
 80006e4:	f001 f850 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 80006e8:	2308      	movs	r3, #8
 80006ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	4619      	mov	r1, r3
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_GPIO_Init+0x108>)
 8000700:	f001 f842 	bl	8001788 <HAL_GPIO_Init>

}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000
 8000710:	40011000 	.word	0x40011000
 8000714:	40010c00 	.word	0x40010c00
 8000718:	10110000 	.word	0x10110000

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_MspInit+0x5c>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <HAL_MspInit+0x5c>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_MspInit+0x5c>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_MspInit+0x5c>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <HAL_MspInit+0x5c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <HAL_MspInit+0x5c>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_MspInit+0x60>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <HAL_MspInit+0x60>)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40021000 	.word	0x40021000
 8000788:	40010000 	.word	0x40010000

0800078c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <HAL_SPI_MspInit+0x88>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d12f      	bne.n	800080c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <HAL_SPI_MspInit+0x8c>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a19      	ldr	r2, [pc, #100]	; (8000818 <HAL_SPI_MspInit+0x8c>)
 80007b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <HAL_SPI_MspInit+0x8c>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_SPI_MspInit+0x8c>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a13      	ldr	r2, [pc, #76]	; (8000818 <HAL_SPI_MspInit+0x8c>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_SPI_MspInit+0x8c>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MOSI_Pin;
 80007dc:	23a0      	movs	r3, #160	; 0xa0
 80007de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	480b      	ldr	r0, [pc, #44]	; (800081c <HAL_SPI_MspInit+0x90>)
 80007f0:	f000 ffca 	bl	8001788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DW_MISO_Pin;
 80007f4:	2340      	movs	r3, #64	; 0x40
 80007f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DW_MISO_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <HAL_SPI_MspInit+0x90>)
 8000808:	f000 ffbe 	bl	8001788 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40013000 	.word	0x40013000
 8000818:	40021000 	.word	0x40021000
 800081c:	40010800 	.word	0x40010800

08000820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <HAL_UART_MspInit+0x8c>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d131      	bne.n	80008a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <HAL_UART_MspInit+0x90>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a1a      	ldr	r2, [pc, #104]	; (80008b0 <HAL_UART_MspInit+0x90>)
 8000846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <HAL_UART_MspInit+0x90>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <HAL_UART_MspInit+0x90>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a14      	ldr	r2, [pc, #80]	; (80008b0 <HAL_UART_MspInit+0x90>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_UART_MspInit+0x90>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0304 	and.w	r3, r3, #4
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000874:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	4619      	mov	r1, r3
 8000884:	480b      	ldr	r0, [pc, #44]	; (80008b4 <HAL_UART_MspInit+0x94>)
 8000886:	f000 ff7f 	bl	8001788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800088a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4619      	mov	r1, r3
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <HAL_UART_MspInit+0x94>)
 80008a0:	f000 ff72 	bl	8001788 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008a4:	bf00      	nop
 80008a6:	3720      	adds	r7, #32
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40013800 	.word	0x40013800
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40010800 	.word	0x40010800

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <HardFault_Handler+0x4>

080008ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <MemManage_Handler+0x4>

080008d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <BusFault_Handler+0x4>

080008d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <UsageFault_Handler+0x4>

080008dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 fe1e 	bl	8001544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <_sbrk>:
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <_sbrk+0x50>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d102      	bne.n	8000922 <_sbrk+0x16>
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <_sbrk+0x50>)
 800091e:	4a10      	ldr	r2, [pc, #64]	; (8000960 <_sbrk+0x54>)
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <_sbrk+0x50>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <_sbrk+0x50>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	466a      	mov	r2, sp
 8000932:	4293      	cmp	r3, r2
 8000934:	d907      	bls.n	8000946 <_sbrk+0x3a>
 8000936:	f002 f8e9 	bl	8002b0c <__errno>
 800093a:	4602      	mov	r2, r0
 800093c:	230c      	movs	r3, #12
 800093e:	6013      	str	r3, [r2, #0]
 8000940:	f04f 33ff 	mov.w	r3, #4294967295
 8000944:	e006      	b.n	8000954 <_sbrk+0x48>
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <_sbrk+0x50>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	4a03      	ldr	r2, [pc, #12]	; (800095c <_sbrk+0x50>)
 8000950:	6013      	str	r3, [r2, #0]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000090 	.word	0x20000090
 8000960:	20000178 	.word	0x20000178

08000964 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <SystemInit+0x5c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <SystemInit+0x5c>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <SystemInit+0x5c>)
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	4911      	ldr	r1, [pc, #68]	; (80009c0 <SystemInit+0x5c>)
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <SystemInit+0x60>)
 800097c:	4013      	ands	r3, r2
 800097e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <SystemInit+0x5c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <SystemInit+0x5c>)
 8000986:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800098a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800098e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <SystemInit+0x5c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <SystemInit+0x5c>)
 8000996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800099a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <SystemInit+0x5c>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <SystemInit+0x5c>)
 80009a2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80009a6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <SystemInit+0x5c>)
 80009aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80009ae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <SystemInit+0x64>)
 80009b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009b6:	609a      	str	r2, [r3, #8]
#endif 
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	40021000 	.word	0x40021000
 80009c4:	f8ff0000 	.word	0xf8ff0000
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

    uint16 otp_xtaltrim_and_rev = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 80009dc:	4b9f      	ldr	r3, [pc, #636]	; (8000c5c <dwt_initialise+0x290>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2200      	movs	r2, #0
 80009e2:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80009e4:	4b9d      	ldr	r3, [pc, #628]	; (8000c5c <dwt_initialise+0x290>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2200      	movs	r2, #0
 80009ea:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80009ec:	4b9b      	ldr	r3, [pc, #620]	; (8000c5c <dwt_initialise+0x290>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2200      	movs	r2, #0
 80009f2:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80009f4:	4b99      	ldr	r3, [pc, #612]	; (8000c5c <dwt_initialise+0x290>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2200      	movs	r2, #0
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80009fc:	4b97      	ldr	r3, [pc, #604]	; (8000c5c <dwt_initialise+0x290>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2200      	movs	r2, #0
 8000a02:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8000a04:	4b95      	ldr	r3, [pc, #596]	; (8000c5c <dwt_initialise+0x290>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 8000a0c:	4b93      	ldr	r3, [pc, #588]	; (8000c5c <dwt_initialise+0x290>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2200      	movs	r2, #0
 8000a12:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8000a14:	f000 f926 	bl	8000c64 <dwt_readdevid>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	4b91      	ldr	r3, [pc, #580]	; (8000c60 <dwt_initialise+0x294>)
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d002      	beq.n	8000a26 <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 8000a20:	f04f 33ff 	mov.w	r3, #4294967295
 8000a24:	e115      	b.n	8000c52 <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d101      	bne.n	8000a34 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8000a30:	f000 fb6a 	bl	8001108 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d004      	beq.n	8000a48 <dwt_initialise+0x7c>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d102      	bne.n	8000a4e <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 fab7 	bl	8000fbc <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8000a4e:	2204      	movs	r2, #4
 8000a50:	2100      	movs	r1, #0
 8000a52:	2024      	movs	r0, #36	; 0x24
 8000a54:	f000 fa1b 	bl	8000e8e <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d116      	bne.n	8000a90 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8000a62:	2004      	movs	r0, #4
 8000a64:	f000 fa69 	bl	8000f3a <_dwt_otpread>
 8000a68:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d01f      	beq.n	8000ab2 <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8000a72:	2202      	movs	r2, #2
 8000a74:	2112      	movs	r1, #18
 8000a76:	202d      	movs	r0, #45	; 0x2d
 8000a78:	f000 fa09 	bl	8000e8e <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000a7c:	4b77      	ldr	r3, [pc, #476]	; (8000c5c <dwt_initialise+0x290>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	8ada      	ldrh	r2, [r3, #22]
 8000a82:	4b76      	ldr	r3, [pc, #472]	; (8000c5c <dwt_initialise+0x290>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a8a:	b292      	uxth	r2, r2
 8000a8c:	82da      	strh	r2, [r3, #22]
 8000a8e:	e010      	b.n	8000ab2 <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8000a90:	2130      	movs	r1, #48	; 0x30
 8000a92:	2028      	movs	r0, #40	; 0x28
 8000a94:	f000 f9a4 	bl	8000de0 <dwt_read32bitoffsetreg>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 8000a9e:	d008      	beq.n	8000ab2 <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8000aa0:	4b6e      	ldr	r3, [pc, #440]	; (8000c5c <dwt_initialise+0x290>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	8ada      	ldrh	r2, [r3, #22]
 8000aa6:	4b6d      	ldr	r3, [pc, #436]	; (8000c5c <dwt_initialise+0x290>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000aae:	b292      	uxth	r2, r2
 8000ab0:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d009      	beq.n	8000ad0 <dwt_initialise+0x104>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d011      	beq.n	8000aea <dwt_initialise+0x11e>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f003 0308 	and.w	r3, r3, #8
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d00c      	beq.n	8000aea <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8000ad0:	201e      	movs	r0, #30
 8000ad2:	f000 fa32 	bl	8000f3a <_dwt_otpread>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8000ada:	8afb      	ldrh	r3, [r7, #22]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	4b5e      	ldr	r3, [pc, #376]	; (8000c5c <dwt_initialise+0x290>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	72da      	strb	r2, [r3, #11]
 8000ae8:	e003      	b.n	8000af2 <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8000aea:	4b5c      	ldr	r3, [pc, #368]	; (8000c5c <dwt_initialise+0x290>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2200      	movs	r2, #0
 8000af0:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d10b      	bne.n	8000b14 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8000afc:	8afb      	ldrh	r3, [r7, #22]
 8000afe:	f003 031f 	and.w	r3, r3, #31
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d101      	bne.n	8000b0a <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8000b06:	2310      	movs	r3, #16
 8000b08:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 8000b0a:	8afb      	ldrh	r3, [r7, #22]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fb20 	bl	8001154 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0310 	and.w	r3, r3, #16
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d007      	beq.n	8000b2e <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8000b1e:	4b4f      	ldr	r3, [pc, #316]	; (8000c5c <dwt_initialise+0x290>)
 8000b20:	681c      	ldr	r4, [r3, #0]
 8000b22:	2006      	movs	r0, #6
 8000b24:	f000 fa09 	bl	8000f3a <_dwt_otpread>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	6023      	str	r3, [r4, #0]
 8000b2c:	e003      	b.n	8000b36 <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 8000b2e:	4b4b      	ldr	r3, [pc, #300]	; (8000c5c <dwt_initialise+0x290>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f003 0320 	and.w	r3, r3, #32
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d007      	beq.n	8000b50 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8000b40:	4b46      	ldr	r3, [pc, #280]	; (8000c5c <dwt_initialise+0x290>)
 8000b42:	681c      	ldr	r4, [r3, #0]
 8000b44:	2007      	movs	r0, #7
 8000b46:	f000 f9f8 	bl	8000f3a <_dwt_otpread>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6063      	str	r3, [r4, #4]
 8000b4e:	e003      	b.n	8000b58 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8000b50:	4b42      	ldr	r3, [pc, #264]	; (8000c5c <dwt_initialise+0x290>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d008      	beq.n	8000b74 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8000b62:	2008      	movs	r0, #8
 8000b64:	f000 f9e9 	bl	8000f3a <_dwt_otpread>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	4b3c      	ldr	r3, [pc, #240]	; (8000c5c <dwt_initialise+0x290>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	721a      	strb	r2, [r3, #8]
 8000b72:	e003      	b.n	8000b7c <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8000b74:	4b39      	ldr	r3, [pc, #228]	; (8000c5c <dwt_initialise+0x290>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d008      	beq.n	8000b98 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8000b86:	2009      	movs	r0, #9
 8000b88:	f000 f9d7 	bl	8000f3a <_dwt_otpread>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	4b33      	ldr	r3, [pc, #204]	; (8000c5c <dwt_initialise+0x290>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	725a      	strb	r2, [r3, #9]
 8000b96:	e003      	b.n	8000ba0 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 8000b98:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <dwt_initialise+0x290>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d121      	bne.n	8000bee <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d00b      	beq.n	8000bcc <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 8000bb4:	f000 f9ee 	bl	8000f94 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <dwt_initialise+0x290>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	8ada      	ldrh	r2, [r3, #22]
 8000bbe:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <dwt_initialise+0x290>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000bc6:	b292      	uxth	r2, r2
 8000bc8:	82da      	strh	r2, [r3, #22]
 8000bca:	e01e      	b.n	8000c0a <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000bcc:	2105      	movs	r1, #5
 8000bce:	2036      	movs	r0, #54	; 0x36
 8000bd0:	f000 f92d 	bl	8000e2e <dwt_read16bitoffsetreg>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8000bd8:	89fb      	ldrh	r3, [r7, #14]
 8000bda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000bde:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	461a      	mov	r2, r3
 8000be4:	2105      	movs	r1, #5
 8000be6:	2036      	movs	r0, #54	; 0x36
 8000be8:	f000 f964 	bl	8000eb4 <dwt_write16bitoffsetreg>
 8000bec:	e00d      	b.n	8000c0a <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d108      	bne.n	8000c0a <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <dwt_initialise+0x290>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	8ada      	ldrh	r2, [r3, #22]
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <dwt_initialise+0x290>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c06:	b292      	uxth	r2, r2
 8000c08:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f000 f9d6 	bl	8000fbc <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8000c10:	2200      	movs	r2, #0
 8000c12:	210a      	movs	r1, #10
 8000c14:	202c      	movs	r0, #44	; 0x2c
 8000c16:	f000 f93a 	bl	8000e8e <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <dwt_initialise+0x290>)
 8000c1c:	681c      	ldr	r4, [r3, #0]
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2004      	movs	r0, #4
 8000c22:	f000 f8dd 	bl	8000de0 <dwt_read32bitoffsetreg>
 8000c26:	4603      	mov	r3, r0
 8000c28:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <dwt_initialise+0x290>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	0c1b      	lsrs	r3, r3, #16
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <dwt_initialise+0x290>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f002 0203 	and.w	r2, r2, #3
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <dwt_initialise+0x290>)
 8000c42:	681c      	ldr	r4, [r3, #0]
 8000c44:	2100      	movs	r1, #0
 8000c46:	2008      	movs	r0, #8
 8000c48:	f000 f8ca 	bl	8000de0 <dwt_read32bitoffsetreg>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	60e3      	str	r3, [r4, #12]
    return DWT_SUCCESS ;
 8000c50:	2300      	movs	r3, #0

} // end dwt_initialise()
 8000c52:	4618      	mov	r0, r3
 8000c54:	371c      	adds	r7, #28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000004 	.word	0x20000004
 8000c60:	deca0130 	.word	0xdeca0130

08000c64 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f000 f8b8 	bl	8000de0 <dwt_read32bitoffsetreg>
 8000c70:	4603      	mov	r3, r0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60ba      	str	r2, [r7, #8]
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	4603      	mov	r3, r0
 8000c82:	81fb      	strh	r3, [r7, #14]
 8000c84:	460b      	mov	r3, r1
 8000c86:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000c8c:	89bb      	ldrh	r3, [r7, #12]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10d      	bne.n	8000cae <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	1c59      	adds	r1, r3, #1
 8000c9a:	6179      	str	r1, [r7, #20]
 8000c9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	f107 0118 	add.w	r1, r7, #24
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000cac:	e033      	b.n	8000d16 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000cae:	89fb      	ldrh	r3, [r7, #14]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	1c59      	adds	r1, r3, #1
 8000cb6:	6179      	str	r1, [r7, #20]
 8000cb8:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	f107 0118 	add.w	r1, r7, #24
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000cc8:	89bb      	ldrh	r3, [r7, #12]
 8000cca:	2b7f      	cmp	r3, #127	; 0x7f
 8000ccc:	d80a      	bhi.n	8000ce4 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	1c5a      	adds	r2, r3, #1
 8000cd2:	617a      	str	r2, [r7, #20]
 8000cd4:	89ba      	ldrh	r2, [r7, #12]
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	f107 0118 	add.w	r1, r7, #24
 8000cdc:	440b      	add	r3, r1
 8000cde:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000ce2:	e018      	b.n	8000d16 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000ce4:	89bb      	ldrh	r3, [r7, #12]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	1c59      	adds	r1, r3, #1
 8000cec:	6179      	str	r1, [r7, #20]
 8000cee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	f107 0118 	add.w	r1, r7, #24
 8000cf8:	440b      	add	r3, r1
 8000cfa:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000cfe:	89bb      	ldrh	r3, [r7, #12]
 8000d00:	09db      	lsrs	r3, r3, #7
 8000d02:	b299      	uxth	r1, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	617a      	str	r2, [r7, #20]
 8000d0a:	b2ca      	uxtb	r2, r1
 8000d0c:	f107 0118 	add.w	r1, r7, #24
 8000d10:	440b      	add	r3, r1
 8000d12:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	b298      	uxth	r0, r3
 8000d1a:	f107 0110 	add.w	r1, r7, #16
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	f000 fa59 	bl	80011d8 <writetospi>
} // end dwt_writetodevice()
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60ba      	str	r2, [r7, #8]
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	4603      	mov	r3, r0
 8000d3a:	81fb      	strh	r3, [r7, #14]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000d44:	89bb      	ldrh	r3, [r7, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10a      	bne.n	8000d60 <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	617a      	str	r2, [r7, #20]
 8000d50:	89fa      	ldrh	r2, [r7, #14]
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	f107 0118 	add.w	r1, r7, #24
 8000d58:	440b      	add	r3, r1
 8000d5a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000d5e:	e033      	b.n	8000dc8 <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000d60:	89fb      	ldrh	r3, [r7, #14]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	1c59      	adds	r1, r3, #1
 8000d68:	6179      	str	r1, [r7, #20]
 8000d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	f107 0118 	add.w	r1, r7, #24
 8000d74:	440b      	add	r3, r1
 8000d76:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000d7a:	89bb      	ldrh	r3, [r7, #12]
 8000d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d7e:	d80a      	bhi.n	8000d96 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	617a      	str	r2, [r7, #20]
 8000d86:	89ba      	ldrh	r2, [r7, #12]
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	f107 0118 	add.w	r1, r7, #24
 8000d8e:	440b      	add	r3, r1
 8000d90:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000d94:	e018      	b.n	8000dc8 <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000d96:	89bb      	ldrh	r3, [r7, #12]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	1c59      	adds	r1, r3, #1
 8000d9e:	6179      	str	r1, [r7, #20]
 8000da0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	f107 0118 	add.w	r1, r7, #24
 8000daa:	440b      	add	r3, r1
 8000dac:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000db0:	89bb      	ldrh	r3, [r7, #12]
 8000db2:	09db      	lsrs	r3, r3, #7
 8000db4:	b299      	uxth	r1, r3
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	1c5a      	adds	r2, r3, #1
 8000dba:	617a      	str	r2, [r7, #20]
 8000dbc:	b2ca      	uxtb	r2, r1
 8000dbe:	f107 0118 	add.w	r1, r7, #24
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	b298      	uxth	r0, r3
 8000dcc:	f107 0110 	add.w	r1, r7, #16
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f000 fa34 	bl	8001240 <readfromspi>
} // end dwt_readfromdevice()
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	b298      	uxth	r0, r3
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b299      	uxth	r1, r3
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	f7ff ff97 	bl	8000d2e <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000e00:	2303      	movs	r3, #3
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	e00b      	b.n	8000e1e <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	f107 010c 	add.w	r1, r7, #12
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	440a      	add	r2, r1
 8000e12:	7812      	ldrb	r2, [r2, #0]
 8000e14:	4413      	add	r3, r2
 8000e16:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	daf0      	bge.n	8000e06 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000e24:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000e26:	4618      	mov	r0, r3
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	b298      	uxth	r0, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b299      	uxth	r1, r3
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2202      	movs	r2, #2
 8000e4a:	f7ff ff70 	bl	8000d2e <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000e4e:	7b7b      	ldrb	r3, [r7, #13]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	7b3b      	ldrb	r3, [r7, #12]
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	4413      	add	r3, r2
 8000e5c:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000e5e:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	b298      	uxth	r0, r3
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b299      	uxth	r1, r3
 8000e7a:	f107 030f 	add.w	r3, r7, #15
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f7ff ff55 	bl	8000d2e <dwt_readfromdevice>

    return regval ;
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	b298      	uxth	r0, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	b299      	uxth	r1, r3
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f7ff fee5 	bl	8000c76 <dwt_writetodevice>
}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	0a1b      	lsrs	r3, r3, #8
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,&buffer);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	b298      	uxth	r0, r3
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	b299      	uxth	r1, r3
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	2202      	movs	r2, #2
 8000ee0:	f7ff fec9 	bl	8000c76 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	e00d      	b.n	8000f1a <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	b2d9      	uxtb	r1, r3
 8000f02:	f107 0210 	add.w	r2, r7, #16
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	4413      	add	r3, r2
 8000f0a:	460a      	mov	r2, r1
 8000f0c:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	ddee      	ble.n	8000efe <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	b298      	uxth	r0, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	b299      	uxth	r1, r3
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	f7ff fea2 	bl	8000c76 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	461a      	mov	r2, r3
 8000f48:	2104      	movs	r1, #4
 8000f4a:	202d      	movs	r0, #45	; 0x2d
 8000f4c:	f7ff ffb2 	bl	8000eb4 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000f50:	2203      	movs	r2, #3
 8000f52:	2106      	movs	r1, #6
 8000f54:	202d      	movs	r0, #45	; 0x2d
 8000f56:	f7ff ff9a 	bl	8000e8e <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2106      	movs	r1, #6
 8000f5e:	202d      	movs	r0, #45	; 0x2d
 8000f60:	f7ff ff95 	bl	8000e8e <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000f64:	210a      	movs	r1, #10
 8000f66:	202d      	movs	r0, #45	; 0x2d
 8000f68:	f7ff ff3a 	bl	8000de0 <dwt_read32bitoffsetreg>
 8000f6c:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2102      	movs	r1, #2
 8000f80:	202c      	movs	r0, #44	; 0x2c
 8000f82:	f7ff ff84 	bl	8000e8e <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000f86:	2202      	movs	r2, #2
 8000f88:	2102      	movs	r1, #2
 8000f8a:	202c      	movs	r0, #44	; 0x2c
 8000f8c:	f7ff ff7f 	bl	8000e8e <dwt_write8bitoffsetreg>
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000f98:	200e      	movs	r0, #14
 8000f9a:	f000 f80f 	bl	8000fbc <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000f9e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fa2:	2106      	movs	r1, #6
 8000fa4:	202d      	movs	r0, #45	; 0x2d
 8000fa6:	f7ff ff85 	bl	8000eb4 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000faa:	2001      	movs	r0, #1
 8000fac:	f000 f908 	bl	80011c0 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f000 f803 	bl	8000fbc <_dwt_enableclocks>
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2202      	movs	r2, #2
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2036      	movs	r0, #54	; 0x36
 8000fce:	f7ff feae 	bl	8000d2e <dwt_readfromdevice>
    switch(clocks)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0e      	cmp	r3, #14
 8000fd6:	d876      	bhi.n	80010c6 <_dwt_enableclocks+0x10a>
 8000fd8:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <_dwt_enableclocks+0x24>)
 8000fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fde:	bf00      	nop
 8000fe0:	0800102d 	.word	0x0800102d
 8000fe4:	0800101d 	.word	0x0800101d
 8000fe8:	08001043 	.word	0x08001043
 8000fec:	080010c7 	.word	0x080010c7
 8000ff0:	080010c7 	.word	0x080010c7
 8000ff4:	080010c7 	.word	0x080010c7
 8000ff8:	080010c7 	.word	0x080010c7
 8000ffc:	08001059 	.word	0x08001059
 8001000:	08001079 	.word	0x08001079
 8001004:	080010c7 	.word	0x080010c7
 8001008:	080010c7 	.word	0x080010c7
 800100c:	0800108f 	.word	0x0800108f
 8001010:	0800109b 	.word	0x0800109b
 8001014:	080010a7 	.word	0x080010a7
 8001018:	080010bd 	.word	0x080010bd
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 800101c:	2300      	movs	r3, #0
 800101e:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8001020:	7b7b      	ldrb	r3, [r7, #13]
 8001022:	f023 0301 	bic.w	r3, r3, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	737b      	strb	r3, [r7, #13]
        }
        break;
 800102a:	e04d      	b.n	80010c8 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 800102c:	7b3b      	ldrb	r3, [r7, #12]
 800102e:	b25b      	sxtb	r3, r3
 8001030:	f023 0303 	bic.w	r3, r3, #3
 8001034:	b25b      	sxtb	r3, r3
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	b25b      	sxtb	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001040:	e042      	b.n	80010c8 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8001042:	7b3b      	ldrb	r3, [r7, #12]
 8001044:	b25b      	sxtb	r3, r3
 8001046:	f023 0303 	bic.w	r3, r3, #3
 800104a:	b25b      	sxtb	r3, r3
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	b25b      	sxtb	r3, r3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001056:	e037      	b.n	80010c8 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8001058:	7b3b      	ldrb	r3, [r7, #12]
 800105a:	b25b      	sxtb	r3, r3
 800105c:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001060:	b25b      	sxtb	r3, r3
 8001062:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8001066:	b25b      	sxtb	r3, r3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 800106c:	7b7b      	ldrb	r3, [r7, #13]
 800106e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001072:	b2db      	uxtb	r3, r3
 8001074:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001076:	e027      	b.n	80010c8 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8001078:	7b3b      	ldrb	r3, [r7, #12]
 800107a:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 800107e:	b2db      	uxtb	r3, r3
 8001080:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8001082:	7b7b      	ldrb	r3, [r7, #13]
 8001084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001088:	b2db      	uxtb	r3, r3
 800108a:	737b      	strb	r3, [r7, #13]
        }
        break;
 800108c:	e01c      	b.n	80010c8 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 800108e:	7b7b      	ldrb	r3, [r7, #13]
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	b2db      	uxtb	r3, r3
 8001096:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001098:	e016      	b.n	80010c8 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 800109a:	7b7b      	ldrb	r3, [r7, #13]
 800109c:	f023 0302 	bic.w	r3, r3, #2
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	737b      	strb	r3, [r7, #13]
        }
        break;
 80010a4:	e010      	b.n	80010c8 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 80010a6:	7b3b      	ldrb	r3, [r7, #12]
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	f043 0320 	orr.w	r3, r3, #32
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	733b      	strb	r3, [r7, #12]
        }
        break;
 80010ba:	e005      	b.n	80010c8 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 80010bc:	2301      	movs	r3, #1
 80010be:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 80010c0:	2303      	movs	r3, #3
 80010c2:	737b      	strb	r3, [r7, #13]
        }
        break;
 80010c4:	e000      	b.n	80010c8 <_dwt_enableclocks+0x10c>
        default:
        break;
 80010c6:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2201      	movs	r2, #1
 80010ce:	2100      	movs	r1, #0
 80010d0:	2036      	movs	r0, #54	; 0x36
 80010d2:	f7ff fdd0 	bl	8000c76 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	3301      	adds	r3, #1
 80010dc:	2201      	movs	r2, #1
 80010de:	2101      	movs	r1, #1
 80010e0:	2036      	movs	r0, #54	; 0x36
 80010e2:	f7ff fdc8 	bl	8000c76 <dwt_writetodevice>

} // end _dwt_enableclocks()
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop

080010f0 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff ff61 	bl	8000fbc <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 80010fa:	2200      	movs	r2, #0
 80010fc:	2104      	movs	r1, #4
 80010fe:	2036      	movs	r0, #54	; 0x36
 8001100:	f7ff fed8 	bl	8000eb4 <dwt_write16bitoffsetreg>
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 800110c:	f7ff fff0 	bl	80010f0 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	202c      	movs	r0, #44	; 0x2c
 8001116:	f7ff fecd 	bl	8000eb4 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800111a:	2200      	movs	r2, #0
 800111c:	2106      	movs	r1, #6
 800111e:	202c      	movs	r0, #44	; 0x2c
 8001120:	f7ff feb5 	bl	8000e8e <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001124:	f7ff ff28 	bl	8000f78 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001128:	2200      	movs	r2, #0
 800112a:	2103      	movs	r1, #3
 800112c:	2036      	movs	r0, #54	; 0x36
 800112e:	f7ff feae 	bl	8000e8e <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f000 f844 	bl	80011c0 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001138:	22f0      	movs	r2, #240	; 0xf0
 800113a:	2103      	movs	r1, #3
 800113c:	2036      	movs	r0, #54	; 0x36
 800113e:	f7ff fea6 	bl	8000e8e <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001142:	4b03      	ldr	r3, [pc, #12]	; (8001150 <dwt_softreset+0x48>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	755a      	strb	r2, [r3, #21]
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000004 	.word	0x20000004

08001154 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	f003 031f 	and.w	r3, r3, #31
 8001166:	b25b      	sxtb	r3, r3
 8001168:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800116c:	b25b      	sxtb	r3, r3
 800116e:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	461a      	mov	r2, r3
 8001174:	210e      	movs	r1, #14
 8001176:	202b      	movs	r0, #43	; 0x2b
 8001178:	f7ff fe89 	bl	8000e8e <dwt_write8bitoffsetreg>
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800118a:	f000 f967 	bl	800145c <port_GetEXT_IRQStatus>
 800118e:	4603      	mov	r3, r0
 8001190:	607b      	str	r3, [r7, #4]

	if(s) {
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8001198:	f000 f952 	bl	8001440 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80011b4:	f000 f94b 	bl	800144e <port_EnableEXT_IRQ>
	}
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 f8e1 	bl	8001390 <Sleep>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80011d8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80011dc:	4683      	mov	fp, r0
 80011de:	468a      	mov	sl, r1
 80011e0:	4691      	mov	r9, r2
 80011e2:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80011e4:	f7ff ffce 	bl	8001184 <decamutexon>
 80011e8:	4606      	mov	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011ea:	4d13      	ldr	r5, [pc, #76]	; (8001238 <writetospi+0x60>)
 80011ec:	4628      	mov	r0, r5
 80011ee:	f001 f9ee 	bl	80025ce <HAL_SPI_GetState>
 80011f2:	2801      	cmp	r0, #1
 80011f4:	4604      	mov	r4, r0
 80011f6:	d1f9      	bne.n	80011ec <writetospi+0x14>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80011f8:	2200      	movs	r2, #0
 80011fa:	2108      	movs	r1, #8
 80011fc:	480f      	ldr	r0, [pc, #60]	; (800123c <writetospi+0x64>)
 80011fe:	f000 fc1d 	bl	8001a3c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8001202:	465a      	mov	r2, fp
 8001204:	4651      	mov	r1, sl
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	480b      	ldr	r0, [pc, #44]	; (8001238 <writetospi+0x60>)
 800120c:	f001 f8ab 	bl	8002366 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	fa1f f289 	uxth.w	r2, r9
 8001218:	4641      	mov	r1, r8
 800121a:	4807      	ldr	r0, [pc, #28]	; (8001238 <writetospi+0x60>)
 800121c:	f001 f8a3 	bl	8002366 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001220:	4622      	mov	r2, r4
 8001222:	2108      	movs	r1, #8
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <writetospi+0x64>)
 8001226:	f000 fc09 	bl	8001a3c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800122a:	4630      	mov	r0, r6
 800122c:	f7ff ffbb 	bl	80011a6 <decamutexoff>

    return 0;
} // end writetospi()
 8001230:	2000      	movs	r0, #0
 8001232:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8001236:	bf00      	nop
 8001238:	20000114 	.word	0x20000114
 800123c:	40010c00 	.word	0x40010c00

08001240 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001240:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8001244:	4680      	mov	r8, r0
 8001246:	460c      	mov	r4, r1
 8001248:	4616      	mov	r6, r2
 800124a:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    //stat = decamutexon() ;

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800124c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80012c0 <readfromspi+0x80>
 8001250:	4648      	mov	r0, r9
 8001252:	f001 f9bc 	bl	80025ce <HAL_SPI_GetState>
 8001256:	2801      	cmp	r0, #1
 8001258:	d1fa      	bne.n	8001250 <readfromspi+0x10>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800125a:	4818      	ldr	r0, [pc, #96]	; (80012bc <readfromspi+0x7c>)
 800125c:	2200      	movs	r2, #0
 800125e:	2108      	movs	r1, #8
 8001260:	f000 fbec 	bl	8001a3c <HAL_GPIO_WritePin>
    usleep(10);
 8001264:	200a      	movs	r0, #10
 8001266:	f000 f86b 	bl	8001340 <usleep>
    /* Send header */
    for(i=0; i<headerLength; i++)
 800126a:	f1b8 0f00 	cmp.w	r8, #0
 800126e:	d00c      	beq.n	800128a <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001270:	f8df 904c 	ldr.w	r9, [pc, #76]	; 80012c0 <readfromspi+0x80>
 8001274:	44a0      	add	r8, r4
 8001276:	2201      	movs	r2, #1
 8001278:	4621      	mov	r1, r4
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	4414      	add	r4, r2
 8001280:	4648      	mov	r0, r9
 8001282:	f001 f870 	bl	8002366 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8001286:	4544      	cmp	r4, r8
 8001288:	d1f5      	bne.n	8001276 <readfromspi+0x36>



    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 800128a:	b17e      	cbz	r6, 80012ac <readfromspi+0x6c>
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800128c:	2000      	movs	r0, #0
 800128e:	4c0c      	ldr	r4, [pc, #48]	; (80012c0 <readfromspi+0x80>)
 8001290:	19a9      	adds	r1, r5, r6
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	0796      	lsls	r6, r2, #30
 8001298:	d5fc      	bpl.n	8001294 <readfromspi+0x54>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800129a:	60d8      	str	r0, [r3, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	07d2      	lsls	r2, r2, #31
 80012a0:	d5fc      	bpl.n	800129c <readfromspi+0x5c>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 80012a8:	428d      	cmp	r5, r1
 80012aa:	d1f2      	bne.n	8001292 <readfromspi+0x52>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80012ac:	2201      	movs	r2, #1
 80012ae:	2108      	movs	r1, #8
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <readfromspi+0x7c>)
 80012b2:	f000 fbc3 	bl	8001a3c <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
//
//	decamutexoff(stat);
//
//	return 0;
} // end readfromspi()
 80012b6:	2000      	movs	r0, #0
 80012b8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80012bc:	40010c00 	.word	0x40010c00
 80012c0:	20000114 	.word	0x20000114

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4906      	ldr	r1, [pc, #24]	; (80012f8 <__NVIC_EnableIRQ+0x34>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	db10      	blt.n	8001330 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f003 021f 	and.w	r2, r3, #31
 8001314:	4909      	ldr	r1, [pc, #36]	; (800133c <__NVIC_DisableIRQ+0x40>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	2001      	movs	r0, #1
 800131e:	fa00 f202 	lsl.w	r2, r0, r2
 8001322:	3320      	adds	r3, #32
 8001324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001328:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800132c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100

08001340 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
void usleep(useconds_t usec)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	e012      	b.n	8001374 <usleep+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	e004      	b.n	800135e <usleep+0x1e>
        {
            __NOP();
 8001354:	bf00      	nop
            __NOP();
 8001356:	bf00      	nop
        for(j=0;j<2;j++)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	3301      	adds	r3, #1
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b01      	cmp	r3, #1
 8001362:	bfd4      	ite	le
 8001364:	2301      	movle	r3, #1
 8001366:	2300      	movgt	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f2      	bne.n	8001354 <usleep+0x14>
    for(i=0;i<usec;i++)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	3301      	adds	r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	429a      	cmp	r2, r3
 800137a:	bf8c      	ite	hi
 800137c:	2301      	movhi	r3, #1
 800137e:	2300      	movls	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1e3      	bne.n	800134e <usleep+0xe>
        }
    }
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 f8ef 	bl	800157c <HAL_Delay>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <EXTI_GetITEnStatus+0x34>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	095b      	lsrs	r3, r3, #5
 80013b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f003 031f 	and.w	r3, r3, #31
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf14      	ite	ne
 80013cc:	2301      	movne	r3, #1
 80013ce:	2300      	moveq	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 80013e6:	2302      	movs	r3, #2
 80013e8:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2302      	movs	r3, #2
 80013f0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80013f2:	463b      	mov	r3, r7
 80013f4:	4619      	mov	r1, r3
 80013f6:	480b      	ldr	r0, [pc, #44]	; (8001424 <reset_DW1000+0x44>)
 80013f8:	f000 f9c6 	bl	8001788 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2102      	movs	r1, #2
 8001400:	4808      	ldr	r0, [pc, #32]	; (8001424 <reset_DW1000+0x44>)
 8001402:	f000 fb1b 	bl	8001a3c <HAL_GPIO_WritePin>

    usleep(1);
 8001406:	2001      	movs	r0, #1
 8001408:	f7ff ff9a 	bl	8001340 <usleep>

    //put the pin back to output open-drain (not active)
    //setup_DW1000RSTnIRQ(0);
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	2102      	movs	r1, #2
 8001410:	4804      	ldr	r0, [pc, #16]	; (8001424 <reset_DW1000+0x44>)
 8001412:	f000 fb13 	bl	8001a3c <HAL_GPIO_WritePin>

    Sleep(2);
 8001416:	2002      	movs	r0, #2
 8001418:	f7ff ffba 	bl	8001390 <Sleep>
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40010c00 	.word	0x40010c00

08001428 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <port_set_dw1000_slowrate+0x14>)
 800142e:	2238      	movs	r2, #56	; 0x38
 8001430:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001432:	4802      	ldr	r0, [pc, #8]	; (800143c <port_set_dw1000_slowrate+0x14>)
 8001434:	f000 ff36 	bl	80022a4 <HAL_SPI_Init>
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000114 	.word	0x20000114

08001440 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8001444:	2017      	movs	r0, #23
 8001446:	f7ff ff59 	bl	80012fc <__NVIC_DisableIRQ>
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}

0800144e <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8001452:	2017      	movs	r0, #23
 8001454:	f7ff ff36 	bl	80012c4 <__NVIC_EnableIRQ>
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8001460:	2017      	movs	r0, #23
 8001462:	f7ff ffa1 	bl	80013a8 <EXTI_GetITEnStatus>
 8001466:	4603      	mov	r3, r0
}
 8001468:	4618      	mov	r0, r3
 800146a:	bd80      	pop	{r7, pc}

0800146c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800146c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800146e:	e003      	b.n	8001478 <LoopCopyDataInit>

08001470 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001472:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001474:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001476:	3104      	adds	r1, #4

08001478 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001478:	480a      	ldr	r0, [pc, #40]	; (80014a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800147c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800147e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001480:	d3f6      	bcc.n	8001470 <CopyDataInit>
  ldr r2, =_sbss
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001484:	e002      	b.n	800148c <LoopFillZerobss>

08001486 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001488:	f842 3b04 	str.w	r3, [r2], #4

0800148c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800148e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001490:	d3f9      	bcc.n	8001486 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001492:	f7ff fa67 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001496:	f001 fb3f 	bl	8002b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800149a:	f7fe ff7d 	bl	8000398 <main>
  bx lr
 800149e:	4770      	bx	lr
  ldr r3, =_sidata
 80014a0:	0800349c 	.word	0x0800349c
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014a8:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80014ac:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80014b0:	20000174 	.word	0x20000174

080014b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC1_2_IRQHandler>
	...

080014b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_Init+0x28>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_Init+0x28>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 f929 	bl	8001720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f000 f808 	bl	80014e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d4:	f7ff f928 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40022000 	.word	0x40022000

080014e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_InitTick+0x54>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x58>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f933 	bl	800176e <HAL_SYSTICK_Config>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00e      	b.n	8001530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d80a      	bhi.n	800152e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f000 f909 	bl	8001736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001524:	4a06      	ldr	r2, [pc, #24]	; (8001540 <HAL_InitTick+0x5c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	e000      	b.n	8001530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000000 	.word	0x20000000
 800153c:	2000000c 	.word	0x2000000c
 8001540:	20000008 	.word	0x20000008

08001544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x1c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_IncTick+0x20>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <HAL_IncTick+0x20>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	2000000c 	.word	0x2000000c
 8001564:	2000016c 	.word	0x2000016c

08001568 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b02      	ldr	r3, [pc, #8]	; (8001578 <HAL_GetTick+0x10>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	2000016c 	.word	0x2000016c

0800157c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff fff0 	bl	8001568 <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d005      	beq.n	80015a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_Delay+0x40>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a2:	bf00      	nop
 80015a4:	f7ff ffe0 	bl	8001568 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d8f7      	bhi.n	80015a4 <HAL_Delay+0x28>
  {
  }
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2000000c 	.word	0x2000000c

080015c0 <__NVIC_SetPriorityGrouping>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_GetPriorityGrouping>:
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	; (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ec:	d301      	bcc.n	80016f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00f      	b.n	8001712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <SysTick_Config+0x40>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fa:	210f      	movs	r1, #15
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f7ff ff90 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <SysTick_Config+0x40>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <SysTick_Config+0x40>)
 800170c:	2207      	movs	r2, #7
 800170e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	e000e010 	.word	0xe000e010

08001720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff49 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001748:	f7ff ff5e 	bl	8001608 <__NVIC_GetPriorityGrouping>
 800174c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	6978      	ldr	r0, [r7, #20]
 8001754:	f7ff ff90 	bl	8001678 <NVIC_EncodePriority>
 8001758:	4602      	mov	r2, r0
 800175a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff5f 	bl	8001624 <__NVIC_SetPriority>
}
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffb0 	bl	80016dc <SysTick_Config>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b08b      	sub	sp, #44	; 0x2c
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179a:	e127      	b.n	80019ec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800179c:	2201      	movs	r2, #1
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	f040 8116 	bne.w	80019e6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b12      	cmp	r3, #18
 80017c0:	d034      	beq.n	800182c <HAL_GPIO_Init+0xa4>
 80017c2:	2b12      	cmp	r3, #18
 80017c4:	d80d      	bhi.n	80017e2 <HAL_GPIO_Init+0x5a>
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d02b      	beq.n	8001822 <HAL_GPIO_Init+0x9a>
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d804      	bhi.n	80017d8 <HAL_GPIO_Init+0x50>
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d031      	beq.n	8001836 <HAL_GPIO_Init+0xae>
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d01c      	beq.n	8001810 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017d6:	e048      	b.n	800186a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d043      	beq.n	8001864 <HAL_GPIO_Init+0xdc>
 80017dc:	2b11      	cmp	r3, #17
 80017de:	d01b      	beq.n	8001818 <HAL_GPIO_Init+0x90>
          break;
 80017e0:	e043      	b.n	800186a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017e2:	4a89      	ldr	r2, [pc, #548]	; (8001a08 <HAL_GPIO_Init+0x280>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d026      	beq.n	8001836 <HAL_GPIO_Init+0xae>
 80017e8:	4a87      	ldr	r2, [pc, #540]	; (8001a08 <HAL_GPIO_Init+0x280>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d806      	bhi.n	80017fc <HAL_GPIO_Init+0x74>
 80017ee:	4a87      	ldr	r2, [pc, #540]	; (8001a0c <HAL_GPIO_Init+0x284>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d020      	beq.n	8001836 <HAL_GPIO_Init+0xae>
 80017f4:	4a86      	ldr	r2, [pc, #536]	; (8001a10 <HAL_GPIO_Init+0x288>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d01d      	beq.n	8001836 <HAL_GPIO_Init+0xae>
          break;
 80017fa:	e036      	b.n	800186a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017fc:	4a85      	ldr	r2, [pc, #532]	; (8001a14 <HAL_GPIO_Init+0x28c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d019      	beq.n	8001836 <HAL_GPIO_Init+0xae>
 8001802:	4a85      	ldr	r2, [pc, #532]	; (8001a18 <HAL_GPIO_Init+0x290>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d016      	beq.n	8001836 <HAL_GPIO_Init+0xae>
 8001808:	4a84      	ldr	r2, [pc, #528]	; (8001a1c <HAL_GPIO_Init+0x294>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d013      	beq.n	8001836 <HAL_GPIO_Init+0xae>
          break;
 800180e:	e02c      	b.n	800186a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	623b      	str	r3, [r7, #32]
          break;
 8001816:	e028      	b.n	800186a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	3304      	adds	r3, #4
 800181e:	623b      	str	r3, [r7, #32]
          break;
 8001820:	e023      	b.n	800186a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	3308      	adds	r3, #8
 8001828:	623b      	str	r3, [r7, #32]
          break;
 800182a:	e01e      	b.n	800186a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	330c      	adds	r3, #12
 8001832:	623b      	str	r3, [r7, #32]
          break;
 8001834:	e019      	b.n	800186a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d102      	bne.n	8001844 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800183e:	2304      	movs	r3, #4
 8001840:	623b      	str	r3, [r7, #32]
          break;
 8001842:	e012      	b.n	800186a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d105      	bne.n	8001858 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800184c:	2308      	movs	r3, #8
 800184e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	611a      	str	r2, [r3, #16]
          break;
 8001856:	e008      	b.n	800186a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001858:	2308      	movs	r3, #8
 800185a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	615a      	str	r2, [r3, #20]
          break;
 8001862:	e002      	b.n	800186a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
          break;
 8001868:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2bff      	cmp	r3, #255	; 0xff
 800186e:	d801      	bhi.n	8001874 <HAL_GPIO_Init+0xec>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	e001      	b.n	8001878 <HAL_GPIO_Init+0xf0>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3304      	adds	r3, #4
 8001878:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2bff      	cmp	r3, #255	; 0xff
 800187e:	d802      	bhi.n	8001886 <HAL_GPIO_Init+0xfe>
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	e002      	b.n	800188c <HAL_GPIO_Init+0x104>
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	3b08      	subs	r3, #8
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	210f      	movs	r1, #15
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	401a      	ands	r2, r3
 800189e:	6a39      	ldr	r1, [r7, #32]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	431a      	orrs	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 8096 	beq.w	80019e6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018ba:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_GPIO_Init+0x298>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <HAL_GPIO_Init+0x298>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6193      	str	r3, [r2, #24]
 80018c6:	4b56      	ldr	r3, [pc, #344]	; (8001a20 <HAL_GPIO_Init+0x298>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018d2:	4a54      	ldr	r2, [pc, #336]	; (8001a24 <HAL_GPIO_Init+0x29c>)
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018de:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	4013      	ands	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4b      	ldr	r2, [pc, #300]	; (8001a28 <HAL_GPIO_Init+0x2a0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0x19e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4a      	ldr	r2, [pc, #296]	; (8001a2c <HAL_GPIO_Init+0x2a4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00d      	beq.n	8001922 <HAL_GPIO_Init+0x19a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a49      	ldr	r2, [pc, #292]	; (8001a30 <HAL_GPIO_Init+0x2a8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x196>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a48      	ldr	r2, [pc, #288]	; (8001a34 <HAL_GPIO_Init+0x2ac>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_GPIO_Init+0x192>
 8001916:	2303      	movs	r3, #3
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x1a0>
 800191a:	2304      	movs	r3, #4
 800191c:	e004      	b.n	8001928 <HAL_GPIO_Init+0x1a0>
 800191e:	2302      	movs	r3, #2
 8001920:	e002      	b.n	8001928 <HAL_GPIO_Init+0x1a0>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_GPIO_Init+0x1a0>
 8001926:	2300      	movs	r3, #0
 8001928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192a:	f002 0203 	and.w	r2, r2, #3
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	4093      	lsls	r3, r2
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4313      	orrs	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001938:	493a      	ldr	r1, [pc, #232]	; (8001a24 <HAL_GPIO_Init+0x29c>)
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d006      	beq.n	8001960 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4938      	ldr	r1, [pc, #224]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
 800195e:	e006      	b.n	800196e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001960:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	43db      	mvns	r3, r3
 8001968:	4933      	ldr	r1, [pc, #204]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 800196a:	4013      	ands	r3, r2
 800196c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800197a:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	492e      	ldr	r1, [pc, #184]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001988:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	43db      	mvns	r3, r3
 8001990:	4929      	ldr	r1, [pc, #164]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 8001992:	4013      	ands	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019a2:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	4924      	ldr	r1, [pc, #144]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
 80019ae:	e006      	b.n	80019be <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	491f      	ldr	r1, [pc, #124]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	491a      	ldr	r1, [pc, #104]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	60cb      	str	r3, [r1, #12]
 80019d6:	e006      	b.n	80019e6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	43db      	mvns	r3, r3
 80019e0:	4915      	ldr	r1, [pc, #84]	; (8001a38 <HAL_GPIO_Init+0x2b0>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	3301      	adds	r3, #1
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	fa22 f303 	lsr.w	r3, r2, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f47f aed0 	bne.w	800179c <HAL_GPIO_Init+0x14>
  }
}
 80019fc:	bf00      	nop
 80019fe:	372c      	adds	r7, #44	; 0x2c
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	10210000 	.word	0x10210000
 8001a0c:	10110000 	.word	0x10110000
 8001a10:	10120000 	.word	0x10120000
 8001a14:	10310000 	.word	0x10310000
 8001a18:	10320000 	.word	0x10320000
 8001a1c:	10220000 	.word	0x10220000
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000
 8001a28:	40010800 	.word	0x40010800
 8001a2c:	40010c00 	.word	0x40010c00
 8001a30:	40011000 	.word	0x40011000
 8001a34:	40011400 	.word	0x40011400
 8001a38:	40010400 	.word	0x40010400

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a4c:	787b      	ldrb	r3, [r7, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a58:	e003      	b.n	8001a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	041a      	lsls	r2, r3, #16
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	611a      	str	r2, [r3, #16]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e26c      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8087 	beq.w	8001b9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a8c:	4b92      	ldr	r3, [pc, #584]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d00c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a98:	4b8f      	ldr	r3, [pc, #572]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d112      	bne.n	8001aca <HAL_RCC_OscConfig+0x5e>
 8001aa4:	4b8c      	ldr	r3, [pc, #560]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab0:	d10b      	bne.n	8001aca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab2:	4b89      	ldr	r3, [pc, #548]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d06c      	beq.n	8001b98 <HAL_RCC_OscConfig+0x12c>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d168      	bne.n	8001b98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e246      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x76>
 8001ad4:	4b80      	ldr	r3, [pc, #512]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a7f      	ldr	r2, [pc, #508]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	e02e      	b.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x98>
 8001aea:	4b7b      	ldr	r3, [pc, #492]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a7a      	ldr	r2, [pc, #488]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b78      	ldr	r3, [pc, #480]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a77      	ldr	r2, [pc, #476]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e01d      	b.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0xbc>
 8001b0e:	4b72      	ldr	r3, [pc, #456]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a71      	ldr	r2, [pc, #452]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a6e      	ldr	r2, [pc, #440]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e00b      	b.n	8001b40 <HAL_RCC_OscConfig+0xd4>
 8001b28:	4b6b      	ldr	r3, [pc, #428]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a6a      	ldr	r2, [pc, #424]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b68      	ldr	r3, [pc, #416]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a67      	ldr	r2, [pc, #412]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d013      	beq.n	8001b70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fd0e 	bl	8001568 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff fd0a 	bl	8001568 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e1fa      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0xe4>
 8001b6e:	e014      	b.n	8001b9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fcfa 	bl	8001568 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff fcf6 	bl	8001568 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e1e6      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x10c>
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d063      	beq.n	8001c6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba6:	4b4c      	ldr	r3, [pc, #304]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00b      	beq.n	8001bca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bb2:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d11c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x18c>
 8001bbe:	4b46      	ldr	r3, [pc, #280]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d116      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <HAL_RCC_OscConfig+0x176>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e1ba      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be2:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4939      	ldr	r1, [pc, #228]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf6:	e03a      	b.n	8001c6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d020      	beq.n	8001c42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c00:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fcaf 	bl	8001568 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7ff fcab 	bl	8001568 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e19b      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4927      	ldr	r1, [pc, #156]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]
 8001c40:	e015      	b.n	8001c6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c42:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <HAL_RCC_OscConfig+0x270>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff fc8e 	bl	8001568 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c50:	f7ff fc8a 	bl	8001568 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e17a      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d03a      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d019      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c88:	f7ff fc6e 	bl	8001568 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c90:	f7ff fc6a 	bl	8001568 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e15a      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f000 fada 	bl	8002268 <RCC_Delay>
 8001cb4:	e01c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbc:	f7ff fc54 	bl	8001568 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc2:	e00f      	b.n	8001ce4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc4:	f7ff fc50 	bl	8001568 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d908      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e140      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	42420000 	.word	0x42420000
 8001ce0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce4:	4b9e      	ldr	r3, [pc, #632]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1e9      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80a6 	beq.w	8001e4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d02:	4b97      	ldr	r3, [pc, #604]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10d      	bne.n	8001d2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b94      	ldr	r3, [pc, #592]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a93      	ldr	r2, [pc, #588]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	61d3      	str	r3, [r2, #28]
 8001d1a:	4b91      	ldr	r3, [pc, #580]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d26:	2301      	movs	r3, #1
 8001d28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2a:	4b8e      	ldr	r3, [pc, #568]	; (8001f64 <HAL_RCC_OscConfig+0x4f8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d118      	bne.n	8001d68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <HAL_RCC_OscConfig+0x4f8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a8a      	ldr	r2, [pc, #552]	; (8001f64 <HAL_RCC_OscConfig+0x4f8>)
 8001d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fc11 	bl	8001568 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4a:	f7ff fc0d 	bl	8001568 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b64      	cmp	r3, #100	; 0x64
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e0fd      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	4b81      	ldr	r3, [pc, #516]	; (8001f64 <HAL_RCC_OscConfig+0x4f8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_OscConfig+0x312>
 8001d70:	4b7b      	ldr	r3, [pc, #492]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4a7a      	ldr	r2, [pc, #488]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6213      	str	r3, [r2, #32]
 8001d7c:	e02d      	b.n	8001dda <HAL_RCC_OscConfig+0x36e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x334>
 8001d86:	4b76      	ldr	r3, [pc, #472]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a75      	ldr	r2, [pc, #468]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6213      	str	r3, [r2, #32]
 8001d92:	4b73      	ldr	r3, [pc, #460]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a72      	ldr	r2, [pc, #456]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	6213      	str	r3, [r2, #32]
 8001d9e:	e01c      	b.n	8001dda <HAL_RCC_OscConfig+0x36e>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d10c      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x356>
 8001da8:	4b6d      	ldr	r3, [pc, #436]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4a6c      	ldr	r2, [pc, #432]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	6213      	str	r3, [r2, #32]
 8001db4:	4b6a      	ldr	r3, [pc, #424]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a69      	ldr	r2, [pc, #420]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	e00b      	b.n	8001dda <HAL_RCC_OscConfig+0x36e>
 8001dc2:	4b67      	ldr	r3, [pc, #412]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4a66      	ldr	r2, [pc, #408]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6213      	str	r3, [r2, #32]
 8001dce:	4b64      	ldr	r3, [pc, #400]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4a63      	ldr	r2, [pc, #396]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	f023 0304 	bic.w	r3, r3, #4
 8001dd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d015      	beq.n	8001e0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de2:	f7ff fbc1 	bl	8001568 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7ff fbbd 	bl	8001568 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e0ab      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e00:	4b57      	ldr	r3, [pc, #348]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0ee      	beq.n	8001dea <HAL_RCC_OscConfig+0x37e>
 8001e0c:	e014      	b.n	8001e38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fbab 	bl	8001568 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff fba7 	bl	8001568 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e095      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2c:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1ee      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d105      	bne.n	8001e4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3e:	4b48      	ldr	r3, [pc, #288]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a47      	ldr	r2, [pc, #284]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8081 	beq.w	8001f56 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e54:	4b42      	ldr	r3, [pc, #264]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d061      	beq.n	8001f24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d146      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e68:	4b3f      	ldr	r3, [pc, #252]	; (8001f68 <HAL_RCC_OscConfig+0x4fc>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7ff fb7b 	bl	8001568 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e76:	f7ff fb77 	bl	8001568 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e067      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e88:	4b35      	ldr	r3, [pc, #212]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9c:	d108      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e9e:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	492d      	ldr	r1, [pc, #180]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a19      	ldr	r1, [r3, #32]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	4927      	ldr	r1, [pc, #156]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <HAL_RCC_OscConfig+0x4fc>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff fb4b 	bl	8001568 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7ff fb47 	bl	8001568 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e037      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x46a>
 8001ef4:	e02f      	b.n	8001f56 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_RCC_OscConfig+0x4fc>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fb34 	bl	8001568 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff fb30 	bl	8001568 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e020      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x498>
 8001f22:	e018      	b.n	8001f56 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e013      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_OscConfig+0x4f4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40007000 	.word	0x40007000
 8001f68:	42420060 	.word	0x42420060

08001f6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0d0      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f80:	4b6a      	ldr	r3, [pc, #424]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d910      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b67      	ldr	r3, [pc, #412]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 0207 	bic.w	r2, r3, #7
 8001f96:	4965      	ldr	r1, [pc, #404]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b63      	ldr	r3, [pc, #396]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0b8      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc8:	4b59      	ldr	r3, [pc, #356]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4a58      	ldr	r2, [pc, #352]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe0:	4b53      	ldr	r3, [pc, #332]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a52      	ldr	r2, [pc, #328]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	494d      	ldr	r1, [pc, #308]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d040      	beq.n	800208c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d107      	bne.n	8002022 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d115      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e07f      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	4b41      	ldr	r3, [pc, #260]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e073      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203a:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e06b      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204a:	4b39      	ldr	r3, [pc, #228]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f023 0203 	bic.w	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4936      	ldr	r1, [pc, #216]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800205c:	f7ff fa84 	bl	8001568 <HAL_GetTick>
 8002060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	e00a      	b.n	800207a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002064:	f7ff fa80 	bl	8001568 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e053      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 020c 	and.w	r2, r3, #12
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	429a      	cmp	r2, r3
 800208a:	d1eb      	bne.n	8002064 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800208c:	4b27      	ldr	r3, [pc, #156]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d210      	bcs.n	80020bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 0207 	bic.w	r2, r3, #7
 80020a2:	4922      	ldr	r1, [pc, #136]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e032      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4916      	ldr	r1, [pc, #88]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	490e      	ldr	r1, [pc, #56]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020fa:	f000 f821 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80020fe:	4601      	mov	r1, r0
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <HAL_RCC_ClockConfig+0x1c8>)
 800210c:	5cd3      	ldrb	r3, [r2, r3]
 800210e:	fa21 f303 	lsr.w	r3, r1, r3
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1cc>)
 8002114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1d0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff f9e2 	bl	80014e4 <HAL_InitTick>

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40022000 	.word	0x40022000
 8002130:	40021000 	.word	0x40021000
 8002134:	08003448 	.word	0x08003448
 8002138:	20000000 	.word	0x20000000
 800213c:	20000008 	.word	0x20000008

08002140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002140:	b490      	push	{r4, r7}
 8002142:	b08a      	sub	sp, #40	; 0x28
 8002144:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002146:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002148:	1d3c      	adds	r4, r7, #4
 800214a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800214c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002150:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	2300      	movs	r3, #0
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800216a:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b04      	cmp	r3, #4
 8002178:	d002      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x40>
 800217a:	2b08      	cmp	r3, #8
 800217c:	d003      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x46>
 800217e:	e02d      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002180:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002182:	623b      	str	r3, [r7, #32]
      break;
 8002184:	e02d      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	0c9b      	lsrs	r3, r3, #18
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002192:	4413      	add	r3, r2
 8002194:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002198:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d013      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	0c5b      	lsrs	r3, r3, #17
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021b2:	4413      	add	r3, r2
 80021b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	4a0f      	ldr	r2, [pc, #60]	; (80021fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80021be:	fb02 f203 	mul.w	r2, r2, r3
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ca:	e004      	b.n	80021d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	623b      	str	r3, [r7, #32]
      break;
 80021da:	e002      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4b07      	ldr	r3, [pc, #28]	; (80021fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80021de:	623b      	str	r3, [r7, #32]
      break;
 80021e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e2:	6a3b      	ldr	r3, [r7, #32]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3728      	adds	r7, #40	; 0x28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc90      	pop	{r4, r7}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	08003434 	.word	0x08003434
 80021f4:	08003444 	.word	0x08003444
 80021f8:	40021000 	.word	0x40021000
 80021fc:	007a1200 	.word	0x007a1200
 8002200:	003d0900 	.word	0x003d0900

08002204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002208:	4b02      	ldr	r3, [pc, #8]	; (8002214 <HAL_RCC_GetHCLKFreq+0x10>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	20000000 	.word	0x20000000

08002218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800221c:	f7ff fff2 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8002220:	4601      	mov	r1, r0
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	4a03      	ldr	r2, [pc, #12]	; (800223c <HAL_RCC_GetPCLK1Freq+0x24>)
 800222e:	5cd3      	ldrb	r3, [r2, r3]
 8002230:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002234:	4618      	mov	r0, r3
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	08003458 	.word	0x08003458

08002240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002244:	f7ff ffde 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8002248:	4601      	mov	r1, r0
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	0adb      	lsrs	r3, r3, #11
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	4a03      	ldr	r2, [pc, #12]	; (8002264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	fa21 f303 	lsr.w	r3, r1, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000
 8002264:	08003458 	.word	0x08003458

08002268 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <RCC_Delay+0x34>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <RCC_Delay+0x38>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0a5b      	lsrs	r3, r3, #9
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002284:	bf00      	nop
  }
  while (Delay --);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1e5a      	subs	r2, r3, #1
 800228a:	60fa      	str	r2, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f9      	bne.n	8002284 <RCC_Delay+0x1c>
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000000 	.word	0x20000000
 80022a0:	10624dd3 	.word	0x10624dd3

080022a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e053      	b.n	800235e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d106      	bne.n	80022d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7fe fa5b 	bl	800078c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2202      	movs	r2, #2
 80022da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	ea42 0103 	orr.w	r1, r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	0c1a      	lsrs	r2, r3, #16
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f002 0204 	and.w	r2, r2, #4
 800233c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69da      	ldr	r2, [r3, #28]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800234c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b088      	sub	sp, #32
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_SPI_Transmit+0x22>
 8002384:	2302      	movs	r3, #2
 8002386:	e11e      	b.n	80025c6 <HAL_SPI_Transmit+0x260>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002390:	f7ff f8ea 	bl	8001568 <HAL_GetTick>
 8002394:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d002      	beq.n	80023ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
 80023a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023aa:	e103      	b.n	80025b4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_SPI_Transmit+0x52>
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023bc:	e0fa      	b.n	80025b4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2203      	movs	r2, #3
 80023c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	88fa      	ldrh	r2, [r7, #6]
 80023d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	88fa      	ldrh	r2, [r7, #6]
 80023dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002404:	d107      	bne.n	8002416 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002414:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002420:	2b40      	cmp	r3, #64	; 0x40
 8002422:	d007      	beq.n	8002434 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002432:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800243c:	d14b      	bne.n	80024d6 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_SPI_Transmit+0xe6>
 8002446:	8afb      	ldrh	r3, [r7, #22]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d13e      	bne.n	80024ca <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	881a      	ldrh	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	1c9a      	adds	r2, r3, #2
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002466:	b29b      	uxth	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002470:	e02b      	b.n	80024ca <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b02      	cmp	r3, #2
 800247e:	d112      	bne.n	80024a6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	881a      	ldrh	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	1c9a      	adds	r2, r3, #2
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80024a4:	e011      	b.n	80024ca <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024a6:	f7ff f85f 	bl	8001568 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d803      	bhi.n	80024be <HAL_SPI_Transmit+0x158>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d102      	bne.n	80024c4 <HAL_SPI_Transmit+0x15e>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024c8:	e074      	b.n	80025b4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1ce      	bne.n	8002472 <HAL_SPI_Transmit+0x10c>
 80024d4:	e04c      	b.n	8002570 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_SPI_Transmit+0x17e>
 80024de:	8afb      	ldrh	r3, [r7, #22]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d140      	bne.n	8002566 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	330c      	adds	r3, #12
 80024ee:	7812      	ldrb	r2, [r2, #0]
 80024f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800250a:	e02c      	b.n	8002566 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b02      	cmp	r3, #2
 8002518:	d113      	bne.n	8002542 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	330c      	adds	r3, #12
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002540:	e011      	b.n	8002566 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002542:	f7ff f811 	bl	8001568 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d803      	bhi.n	800255a <HAL_SPI_Transmit+0x1f4>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d102      	bne.n	8002560 <HAL_SPI_Transmit+0x1fa>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d102      	bne.n	8002566 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002564:	e026      	b.n	80025b4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1cd      	bne.n	800250c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	6839      	ldr	r1, [r7, #0]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f8a1 	bl	80026bc <SPI_EndRxTxTransaction>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10a      	bne.n	80025a4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	77fb      	strb	r3, [r7, #31]
 80025b0:	e000      	b.n	80025b4 <HAL_SPI_Transmit+0x24e>
  }

error:
 80025b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3720      	adds	r7, #32
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025dc:	b2db      	uxtb	r3, r3
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025f8:	e04c      	b.n	8002694 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d048      	beq.n	8002694 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002602:	f7fe ffb1 	bl	8001568 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d902      	bls.n	8002618 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d13d      	bne.n	8002694 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002626:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002630:	d111      	bne.n	8002656 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800263a:	d004      	beq.n	8002646 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002644:	d107      	bne.n	8002656 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002654:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800265e:	d10f      	bne.n	8002680 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800267e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e00f      	b.n	80026b4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	4013      	ands	r3, r2
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d1a3      	bne.n	80025fa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2200      	movs	r2, #0
 80026d0:	2180      	movs	r1, #128	; 0x80
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f7ff ff88 	bl	80025e8 <SPI_WaitFlagStateUntilTimeout>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	f043 0220 	orr.w	r2, r3, #32
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e000      	b.n	80026f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e03f      	b.n	800278a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe f87e 	bl	8000820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2224      	movs	r2, #36	; 0x24
 8002728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800273a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f90b 	bl	8002958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b088      	sub	sp, #32
 8002796:	af02      	add	r7, sp, #8
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	4613      	mov	r3, r2
 80027a0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	f040 8083 	bne.w	80028ba <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_UART_Transmit+0x2e>
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e07b      	b.n	80028bc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_UART_Transmit+0x40>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e074      	b.n	80028bc <HAL_UART_Transmit+0x12a>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2221      	movs	r2, #33	; 0x21
 80027e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80027e8:	f7fe febe 	bl	8001568 <HAL_GetTick>
 80027ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	88fa      	ldrh	r2, [r7, #6]
 80027f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	88fa      	ldrh	r2, [r7, #6]
 80027f8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027fa:	e042      	b.n	8002882 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002812:	d122      	bne.n	800285a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2200      	movs	r2, #0
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f850 	bl	80028c4 <UART_WaitOnFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e046      	b.n	80028bc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002840:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d103      	bne.n	8002852 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	3302      	adds	r3, #2
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	e017      	b.n	8002882 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3301      	adds	r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	e013      	b.n	8002882 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2200      	movs	r2, #0
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f82d 	bl	80028c4 <UART_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e023      	b.n	80028bc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	60ba      	str	r2, [r7, #8]
 800287a:	781a      	ldrb	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1b7      	bne.n	80027fc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2200      	movs	r2, #0
 8002894:	2140      	movs	r1, #64	; 0x40
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f814 	bl	80028c4 <UART_WaitOnFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e00a      	b.n	80028bc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e000      	b.n	80028bc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80028ba:	2302      	movs	r3, #2
  }
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	4613      	mov	r3, r2
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d4:	e02c      	b.n	8002930 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d028      	beq.n	8002930 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d007      	beq.n	80028f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80028e4:	f7fe fe40 	bl	8001568 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d21d      	bcs.n	8002930 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002902:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e00f      	b.n	8002950 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4013      	ands	r3, r2
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	429a      	cmp	r2, r3
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	429a      	cmp	r2, r3
 800294c:	d0c3      	beq.n	80028d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002992:	f023 030c 	bic.w	r3, r3, #12
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	68f9      	ldr	r1, [r7, #12]
 800299c:	430b      	orrs	r3, r1
 800299e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <UART_SetConfig+0x1ac>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d14e      	bne.n	8002a5e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029c0:	f7ff fc3e 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 80029c4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009a      	lsls	r2, r3, #2
 80029d0:	441a      	add	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	4a4a      	ldr	r2, [pc, #296]	; (8002b08 <UART_SetConfig+0x1b0>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	0119      	lsls	r1, r3, #4
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	009a      	lsls	r2, r3, #2
 80029f0:	441a      	add	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029fc:	4b42      	ldr	r3, [pc, #264]	; (8002b08 <UART_SetConfig+0x1b0>)
 80029fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2064      	movs	r0, #100	; 0x64
 8002a06:	fb00 f303 	mul.w	r3, r0, r3
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	3332      	adds	r3, #50	; 0x32
 8002a10:	4a3d      	ldr	r2, [pc, #244]	; (8002b08 <UART_SetConfig+0x1b0>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a1c:	4419      	add	r1, r3
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	009a      	lsls	r2, r3, #2
 8002a28:	441a      	add	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a34:	4b34      	ldr	r3, [pc, #208]	; (8002b08 <UART_SetConfig+0x1b0>)
 8002a36:	fba3 0302 	umull	r0, r3, r3, r2
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	2064      	movs	r0, #100	; 0x64
 8002a3e:	fb00 f303 	mul.w	r3, r0, r3
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	3332      	adds	r3, #50	; 0x32
 8002a48:	4a2f      	ldr	r2, [pc, #188]	; (8002b08 <UART_SetConfig+0x1b0>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	f003 020f 	and.w	r2, r3, #15
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	440a      	add	r2, r1
 8002a5a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002a5c:	e04d      	b.n	8002afa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a5e:	f7ff fbdb 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 8002a62:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009a      	lsls	r2, r3, #2
 8002a6e:	441a      	add	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	4a23      	ldr	r2, [pc, #140]	; (8002b08 <UART_SetConfig+0x1b0>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	0119      	lsls	r1, r3, #4
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009a      	lsls	r2, r3, #2
 8002a8e:	441a      	add	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <UART_SetConfig+0x1b0>)
 8002a9c:	fba3 0302 	umull	r0, r3, r3, r2
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	2064      	movs	r0, #100	; 0x64
 8002aa4:	fb00 f303 	mul.w	r3, r0, r3
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	3332      	adds	r3, #50	; 0x32
 8002aae:	4a16      	ldr	r2, [pc, #88]	; (8002b08 <UART_SetConfig+0x1b0>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	095b      	lsrs	r3, r3, #5
 8002ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aba:	4419      	add	r1, r3
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009a      	lsls	r2, r3, #2
 8002ac6:	441a      	add	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <UART_SetConfig+0x1b0>)
 8002ad4:	fba3 0302 	umull	r0, r3, r3, r2
 8002ad8:	095b      	lsrs	r3, r3, #5
 8002ada:	2064      	movs	r0, #100	; 0x64
 8002adc:	fb00 f303 	mul.w	r3, r0, r3
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	3332      	adds	r3, #50	; 0x32
 8002ae6:	4a08      	ldr	r2, [pc, #32]	; (8002b08 <UART_SetConfig+0x1b0>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	095b      	lsrs	r3, r3, #5
 8002aee:	f003 020f 	and.w	r2, r3, #15
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	440a      	add	r2, r1
 8002af8:	609a      	str	r2, [r3, #8]
}
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40013800 	.word	0x40013800
 8002b08:	51eb851f 	.word	0x51eb851f

08002b0c <__errno>:
 8002b0c:	4b01      	ldr	r3, [pc, #4]	; (8002b14 <__errno+0x8>)
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20000010 	.word	0x20000010

08002b18 <__libc_init_array>:
 8002b18:	b570      	push	{r4, r5, r6, lr}
 8002b1a:	2500      	movs	r5, #0
 8002b1c:	4e0c      	ldr	r6, [pc, #48]	; (8002b50 <__libc_init_array+0x38>)
 8002b1e:	4c0d      	ldr	r4, [pc, #52]	; (8002b54 <__libc_init_array+0x3c>)
 8002b20:	1ba4      	subs	r4, r4, r6
 8002b22:	10a4      	asrs	r4, r4, #2
 8002b24:	42a5      	cmp	r5, r4
 8002b26:	d109      	bne.n	8002b3c <__libc_init_array+0x24>
 8002b28:	f000 fc34 	bl	8003394 <_init>
 8002b2c:	2500      	movs	r5, #0
 8002b2e:	4e0a      	ldr	r6, [pc, #40]	; (8002b58 <__libc_init_array+0x40>)
 8002b30:	4c0a      	ldr	r4, [pc, #40]	; (8002b5c <__libc_init_array+0x44>)
 8002b32:	1ba4      	subs	r4, r4, r6
 8002b34:	10a4      	asrs	r4, r4, #2
 8002b36:	42a5      	cmp	r5, r4
 8002b38:	d105      	bne.n	8002b46 <__libc_init_array+0x2e>
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}
 8002b3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b40:	4798      	blx	r3
 8002b42:	3501      	adds	r5, #1
 8002b44:	e7ee      	b.n	8002b24 <__libc_init_array+0xc>
 8002b46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b4a:	4798      	blx	r3
 8002b4c:	3501      	adds	r5, #1
 8002b4e:	e7f2      	b.n	8002b36 <__libc_init_array+0x1e>
 8002b50:	08003494 	.word	0x08003494
 8002b54:	08003494 	.word	0x08003494
 8002b58:	08003494 	.word	0x08003494
 8002b5c:	08003498 	.word	0x08003498

08002b60 <memset>:
 8002b60:	4603      	mov	r3, r0
 8002b62:	4402      	add	r2, r0
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d100      	bne.n	8002b6a <memset+0xa>
 8002b68:	4770      	bx	lr
 8002b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b6e:	e7f9      	b.n	8002b64 <memset+0x4>

08002b70 <siprintf>:
 8002b70:	b40e      	push	{r1, r2, r3}
 8002b72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b76:	b500      	push	{lr}
 8002b78:	b09c      	sub	sp, #112	; 0x70
 8002b7a:	ab1d      	add	r3, sp, #116	; 0x74
 8002b7c:	9002      	str	r0, [sp, #8]
 8002b7e:	9006      	str	r0, [sp, #24]
 8002b80:	9107      	str	r1, [sp, #28]
 8002b82:	9104      	str	r1, [sp, #16]
 8002b84:	4808      	ldr	r0, [pc, #32]	; (8002ba8 <siprintf+0x38>)
 8002b86:	4909      	ldr	r1, [pc, #36]	; (8002bac <siprintf+0x3c>)
 8002b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b8c:	9105      	str	r1, [sp, #20]
 8002b8e:	6800      	ldr	r0, [r0, #0]
 8002b90:	a902      	add	r1, sp, #8
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	f000 f866 	bl	8002c64 <_svfiprintf_r>
 8002b98:	2200      	movs	r2, #0
 8002b9a:	9b02      	ldr	r3, [sp, #8]
 8002b9c:	701a      	strb	r2, [r3, #0]
 8002b9e:	b01c      	add	sp, #112	; 0x70
 8002ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ba4:	b003      	add	sp, #12
 8002ba6:	4770      	bx	lr
 8002ba8:	20000010 	.word	0x20000010
 8002bac:	ffff0208 	.word	0xffff0208

08002bb0 <__ssputs_r>:
 8002bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bb4:	688e      	ldr	r6, [r1, #8]
 8002bb6:	4682      	mov	sl, r0
 8002bb8:	429e      	cmp	r6, r3
 8002bba:	460c      	mov	r4, r1
 8002bbc:	4690      	mov	r8, r2
 8002bbe:	4699      	mov	r9, r3
 8002bc0:	d837      	bhi.n	8002c32 <__ssputs_r+0x82>
 8002bc2:	898a      	ldrh	r2, [r1, #12]
 8002bc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bc8:	d031      	beq.n	8002c2e <__ssputs_r+0x7e>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	6825      	ldr	r5, [r4, #0]
 8002bce:	6909      	ldr	r1, [r1, #16]
 8002bd0:	1a6f      	subs	r7, r5, r1
 8002bd2:	6965      	ldr	r5, [r4, #20]
 8002bd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bd8:	fb95 f5f3 	sdiv	r5, r5, r3
 8002bdc:	f109 0301 	add.w	r3, r9, #1
 8002be0:	443b      	add	r3, r7
 8002be2:	429d      	cmp	r5, r3
 8002be4:	bf38      	it	cc
 8002be6:	461d      	movcc	r5, r3
 8002be8:	0553      	lsls	r3, r2, #21
 8002bea:	d530      	bpl.n	8002c4e <__ssputs_r+0x9e>
 8002bec:	4629      	mov	r1, r5
 8002bee:	f000 fb37 	bl	8003260 <_malloc_r>
 8002bf2:	4606      	mov	r6, r0
 8002bf4:	b950      	cbnz	r0, 8002c0c <__ssputs_r+0x5c>
 8002bf6:	230c      	movs	r3, #12
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f8ca 3000 	str.w	r3, [sl]
 8002c00:	89a3      	ldrh	r3, [r4, #12]
 8002c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c06:	81a3      	strh	r3, [r4, #12]
 8002c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c0c:	463a      	mov	r2, r7
 8002c0e:	6921      	ldr	r1, [r4, #16]
 8002c10:	f000 fab6 	bl	8003180 <memcpy>
 8002c14:	89a3      	ldrh	r3, [r4, #12]
 8002c16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c1e:	81a3      	strh	r3, [r4, #12]
 8002c20:	6126      	str	r6, [r4, #16]
 8002c22:	443e      	add	r6, r7
 8002c24:	6026      	str	r6, [r4, #0]
 8002c26:	464e      	mov	r6, r9
 8002c28:	6165      	str	r5, [r4, #20]
 8002c2a:	1bed      	subs	r5, r5, r7
 8002c2c:	60a5      	str	r5, [r4, #8]
 8002c2e:	454e      	cmp	r6, r9
 8002c30:	d900      	bls.n	8002c34 <__ssputs_r+0x84>
 8002c32:	464e      	mov	r6, r9
 8002c34:	4632      	mov	r2, r6
 8002c36:	4641      	mov	r1, r8
 8002c38:	6820      	ldr	r0, [r4, #0]
 8002c3a:	f000 faac 	bl	8003196 <memmove>
 8002c3e:	68a3      	ldr	r3, [r4, #8]
 8002c40:	2000      	movs	r0, #0
 8002c42:	1b9b      	subs	r3, r3, r6
 8002c44:	60a3      	str	r3, [r4, #8]
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	441e      	add	r6, r3
 8002c4a:	6026      	str	r6, [r4, #0]
 8002c4c:	e7dc      	b.n	8002c08 <__ssputs_r+0x58>
 8002c4e:	462a      	mov	r2, r5
 8002c50:	f000 fb60 	bl	8003314 <_realloc_r>
 8002c54:	4606      	mov	r6, r0
 8002c56:	2800      	cmp	r0, #0
 8002c58:	d1e2      	bne.n	8002c20 <__ssputs_r+0x70>
 8002c5a:	6921      	ldr	r1, [r4, #16]
 8002c5c:	4650      	mov	r0, sl
 8002c5e:	f000 fab3 	bl	80031c8 <_free_r>
 8002c62:	e7c8      	b.n	8002bf6 <__ssputs_r+0x46>

08002c64 <_svfiprintf_r>:
 8002c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c68:	461d      	mov	r5, r3
 8002c6a:	898b      	ldrh	r3, [r1, #12]
 8002c6c:	b09d      	sub	sp, #116	; 0x74
 8002c6e:	061f      	lsls	r7, r3, #24
 8002c70:	4680      	mov	r8, r0
 8002c72:	460c      	mov	r4, r1
 8002c74:	4616      	mov	r6, r2
 8002c76:	d50f      	bpl.n	8002c98 <_svfiprintf_r+0x34>
 8002c78:	690b      	ldr	r3, [r1, #16]
 8002c7a:	b96b      	cbnz	r3, 8002c98 <_svfiprintf_r+0x34>
 8002c7c:	2140      	movs	r1, #64	; 0x40
 8002c7e:	f000 faef 	bl	8003260 <_malloc_r>
 8002c82:	6020      	str	r0, [r4, #0]
 8002c84:	6120      	str	r0, [r4, #16]
 8002c86:	b928      	cbnz	r0, 8002c94 <_svfiprintf_r+0x30>
 8002c88:	230c      	movs	r3, #12
 8002c8a:	f8c8 3000 	str.w	r3, [r8]
 8002c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c92:	e0c8      	b.n	8002e26 <_svfiprintf_r+0x1c2>
 8002c94:	2340      	movs	r3, #64	; 0x40
 8002c96:	6163      	str	r3, [r4, #20]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ca2:	2330      	movs	r3, #48	; 0x30
 8002ca4:	f04f 0b01 	mov.w	fp, #1
 8002ca8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cac:	9503      	str	r5, [sp, #12]
 8002cae:	4637      	mov	r7, r6
 8002cb0:	463d      	mov	r5, r7
 8002cb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002cb6:	b10b      	cbz	r3, 8002cbc <_svfiprintf_r+0x58>
 8002cb8:	2b25      	cmp	r3, #37	; 0x25
 8002cba:	d13e      	bne.n	8002d3a <_svfiprintf_r+0xd6>
 8002cbc:	ebb7 0a06 	subs.w	sl, r7, r6
 8002cc0:	d00b      	beq.n	8002cda <_svfiprintf_r+0x76>
 8002cc2:	4653      	mov	r3, sl
 8002cc4:	4632      	mov	r2, r6
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	4640      	mov	r0, r8
 8002cca:	f7ff ff71 	bl	8002bb0 <__ssputs_r>
 8002cce:	3001      	adds	r0, #1
 8002cd0:	f000 80a4 	beq.w	8002e1c <_svfiprintf_r+0x1b8>
 8002cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cd6:	4453      	add	r3, sl
 8002cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8002cda:	783b      	ldrb	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 809d 	beq.w	8002e1c <_svfiprintf_r+0x1b8>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cec:	9304      	str	r3, [sp, #16]
 8002cee:	9307      	str	r3, [sp, #28]
 8002cf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cf4:	931a      	str	r3, [sp, #104]	; 0x68
 8002cf6:	462f      	mov	r7, r5
 8002cf8:	2205      	movs	r2, #5
 8002cfa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002cfe:	4850      	ldr	r0, [pc, #320]	; (8002e40 <_svfiprintf_r+0x1dc>)
 8002d00:	f000 fa30 	bl	8003164 <memchr>
 8002d04:	9b04      	ldr	r3, [sp, #16]
 8002d06:	b9d0      	cbnz	r0, 8002d3e <_svfiprintf_r+0xda>
 8002d08:	06d9      	lsls	r1, r3, #27
 8002d0a:	bf44      	itt	mi
 8002d0c:	2220      	movmi	r2, #32
 8002d0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d12:	071a      	lsls	r2, r3, #28
 8002d14:	bf44      	itt	mi
 8002d16:	222b      	movmi	r2, #43	; 0x2b
 8002d18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d1c:	782a      	ldrb	r2, [r5, #0]
 8002d1e:	2a2a      	cmp	r2, #42	; 0x2a
 8002d20:	d015      	beq.n	8002d4e <_svfiprintf_r+0xea>
 8002d22:	462f      	mov	r7, r5
 8002d24:	2000      	movs	r0, #0
 8002d26:	250a      	movs	r5, #10
 8002d28:	9a07      	ldr	r2, [sp, #28]
 8002d2a:	4639      	mov	r1, r7
 8002d2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d30:	3b30      	subs	r3, #48	; 0x30
 8002d32:	2b09      	cmp	r3, #9
 8002d34:	d94d      	bls.n	8002dd2 <_svfiprintf_r+0x16e>
 8002d36:	b1b8      	cbz	r0, 8002d68 <_svfiprintf_r+0x104>
 8002d38:	e00f      	b.n	8002d5a <_svfiprintf_r+0xf6>
 8002d3a:	462f      	mov	r7, r5
 8002d3c:	e7b8      	b.n	8002cb0 <_svfiprintf_r+0x4c>
 8002d3e:	4a40      	ldr	r2, [pc, #256]	; (8002e40 <_svfiprintf_r+0x1dc>)
 8002d40:	463d      	mov	r5, r7
 8002d42:	1a80      	subs	r0, r0, r2
 8002d44:	fa0b f000 	lsl.w	r0, fp, r0
 8002d48:	4318      	orrs	r0, r3
 8002d4a:	9004      	str	r0, [sp, #16]
 8002d4c:	e7d3      	b.n	8002cf6 <_svfiprintf_r+0x92>
 8002d4e:	9a03      	ldr	r2, [sp, #12]
 8002d50:	1d11      	adds	r1, r2, #4
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	9103      	str	r1, [sp, #12]
 8002d56:	2a00      	cmp	r2, #0
 8002d58:	db01      	blt.n	8002d5e <_svfiprintf_r+0xfa>
 8002d5a:	9207      	str	r2, [sp, #28]
 8002d5c:	e004      	b.n	8002d68 <_svfiprintf_r+0x104>
 8002d5e:	4252      	negs	r2, r2
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	9207      	str	r2, [sp, #28]
 8002d66:	9304      	str	r3, [sp, #16]
 8002d68:	783b      	ldrb	r3, [r7, #0]
 8002d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8002d6c:	d10c      	bne.n	8002d88 <_svfiprintf_r+0x124>
 8002d6e:	787b      	ldrb	r3, [r7, #1]
 8002d70:	2b2a      	cmp	r3, #42	; 0x2a
 8002d72:	d133      	bne.n	8002ddc <_svfiprintf_r+0x178>
 8002d74:	9b03      	ldr	r3, [sp, #12]
 8002d76:	3702      	adds	r7, #2
 8002d78:	1d1a      	adds	r2, r3, #4
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	9203      	str	r2, [sp, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bfb8      	it	lt
 8002d82:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d86:	9305      	str	r3, [sp, #20]
 8002d88:	4d2e      	ldr	r5, [pc, #184]	; (8002e44 <_svfiprintf_r+0x1e0>)
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	7839      	ldrb	r1, [r7, #0]
 8002d8e:	4628      	mov	r0, r5
 8002d90:	f000 f9e8 	bl	8003164 <memchr>
 8002d94:	b138      	cbz	r0, 8002da6 <_svfiprintf_r+0x142>
 8002d96:	2340      	movs	r3, #64	; 0x40
 8002d98:	1b40      	subs	r0, r0, r5
 8002d9a:	fa03 f000 	lsl.w	r0, r3, r0
 8002d9e:	9b04      	ldr	r3, [sp, #16]
 8002da0:	3701      	adds	r7, #1
 8002da2:	4303      	orrs	r3, r0
 8002da4:	9304      	str	r3, [sp, #16]
 8002da6:	7839      	ldrb	r1, [r7, #0]
 8002da8:	2206      	movs	r2, #6
 8002daa:	4827      	ldr	r0, [pc, #156]	; (8002e48 <_svfiprintf_r+0x1e4>)
 8002dac:	1c7e      	adds	r6, r7, #1
 8002dae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002db2:	f000 f9d7 	bl	8003164 <memchr>
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d038      	beq.n	8002e2c <_svfiprintf_r+0x1c8>
 8002dba:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <_svfiprintf_r+0x1e8>)
 8002dbc:	bb13      	cbnz	r3, 8002e04 <_svfiprintf_r+0x1a0>
 8002dbe:	9b03      	ldr	r3, [sp, #12]
 8002dc0:	3307      	adds	r3, #7
 8002dc2:	f023 0307 	bic.w	r3, r3, #7
 8002dc6:	3308      	adds	r3, #8
 8002dc8:	9303      	str	r3, [sp, #12]
 8002dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dcc:	444b      	add	r3, r9
 8002dce:	9309      	str	r3, [sp, #36]	; 0x24
 8002dd0:	e76d      	b.n	8002cae <_svfiprintf_r+0x4a>
 8002dd2:	fb05 3202 	mla	r2, r5, r2, r3
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	460f      	mov	r7, r1
 8002dda:	e7a6      	b.n	8002d2a <_svfiprintf_r+0xc6>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	250a      	movs	r5, #10
 8002de0:	4619      	mov	r1, r3
 8002de2:	3701      	adds	r7, #1
 8002de4:	9305      	str	r3, [sp, #20]
 8002de6:	4638      	mov	r0, r7
 8002de8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dec:	3a30      	subs	r2, #48	; 0x30
 8002dee:	2a09      	cmp	r2, #9
 8002df0:	d903      	bls.n	8002dfa <_svfiprintf_r+0x196>
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0c8      	beq.n	8002d88 <_svfiprintf_r+0x124>
 8002df6:	9105      	str	r1, [sp, #20]
 8002df8:	e7c6      	b.n	8002d88 <_svfiprintf_r+0x124>
 8002dfa:	fb05 2101 	mla	r1, r5, r1, r2
 8002dfe:	2301      	movs	r3, #1
 8002e00:	4607      	mov	r7, r0
 8002e02:	e7f0      	b.n	8002de6 <_svfiprintf_r+0x182>
 8002e04:	ab03      	add	r3, sp, #12
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	4622      	mov	r2, r4
 8002e0a:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <_svfiprintf_r+0x1ec>)
 8002e0c:	a904      	add	r1, sp, #16
 8002e0e:	4640      	mov	r0, r8
 8002e10:	f3af 8000 	nop.w
 8002e14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002e18:	4681      	mov	r9, r0
 8002e1a:	d1d6      	bne.n	8002dca <_svfiprintf_r+0x166>
 8002e1c:	89a3      	ldrh	r3, [r4, #12]
 8002e1e:	065b      	lsls	r3, r3, #25
 8002e20:	f53f af35 	bmi.w	8002c8e <_svfiprintf_r+0x2a>
 8002e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e26:	b01d      	add	sp, #116	; 0x74
 8002e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e2c:	ab03      	add	r3, sp, #12
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	4622      	mov	r2, r4
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <_svfiprintf_r+0x1ec>)
 8002e34:	a904      	add	r1, sp, #16
 8002e36:	4640      	mov	r0, r8
 8002e38:	f000 f882 	bl	8002f40 <_printf_i>
 8002e3c:	e7ea      	b.n	8002e14 <_svfiprintf_r+0x1b0>
 8002e3e:	bf00      	nop
 8002e40:	08003460 	.word	0x08003460
 8002e44:	08003466 	.word	0x08003466
 8002e48:	0800346a 	.word	0x0800346a
 8002e4c:	00000000 	.word	0x00000000
 8002e50:	08002bb1 	.word	0x08002bb1

08002e54 <_printf_common>:
 8002e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e58:	4691      	mov	r9, r2
 8002e5a:	461f      	mov	r7, r3
 8002e5c:	688a      	ldr	r2, [r1, #8]
 8002e5e:	690b      	ldr	r3, [r1, #16]
 8002e60:	4606      	mov	r6, r0
 8002e62:	4293      	cmp	r3, r2
 8002e64:	bfb8      	it	lt
 8002e66:	4613      	movlt	r3, r2
 8002e68:	f8c9 3000 	str.w	r3, [r9]
 8002e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e70:	460c      	mov	r4, r1
 8002e72:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e76:	b112      	cbz	r2, 8002e7e <_printf_common+0x2a>
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f8c9 3000 	str.w	r3, [r9]
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	0699      	lsls	r1, r3, #26
 8002e82:	bf42      	ittt	mi
 8002e84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e88:	3302      	addmi	r3, #2
 8002e8a:	f8c9 3000 	strmi.w	r3, [r9]
 8002e8e:	6825      	ldr	r5, [r4, #0]
 8002e90:	f015 0506 	ands.w	r5, r5, #6
 8002e94:	d107      	bne.n	8002ea6 <_printf_common+0x52>
 8002e96:	f104 0a19 	add.w	sl, r4, #25
 8002e9a:	68e3      	ldr	r3, [r4, #12]
 8002e9c:	f8d9 2000 	ldr.w	r2, [r9]
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	42ab      	cmp	r3, r5
 8002ea4:	dc29      	bgt.n	8002efa <_printf_common+0xa6>
 8002ea6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002eaa:	6822      	ldr	r2, [r4, #0]
 8002eac:	3300      	adds	r3, #0
 8002eae:	bf18      	it	ne
 8002eb0:	2301      	movne	r3, #1
 8002eb2:	0692      	lsls	r2, r2, #26
 8002eb4:	d42e      	bmi.n	8002f14 <_printf_common+0xc0>
 8002eb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002eba:	4639      	mov	r1, r7
 8002ebc:	4630      	mov	r0, r6
 8002ebe:	47c0      	blx	r8
 8002ec0:	3001      	adds	r0, #1
 8002ec2:	d021      	beq.n	8002f08 <_printf_common+0xb4>
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	68e5      	ldr	r5, [r4, #12]
 8002ec8:	f003 0306 	and.w	r3, r3, #6
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	bf18      	it	ne
 8002ed0:	2500      	movne	r5, #0
 8002ed2:	f8d9 2000 	ldr.w	r2, [r9]
 8002ed6:	f04f 0900 	mov.w	r9, #0
 8002eda:	bf08      	it	eq
 8002edc:	1aad      	subeq	r5, r5, r2
 8002ede:	68a3      	ldr	r3, [r4, #8]
 8002ee0:	6922      	ldr	r2, [r4, #16]
 8002ee2:	bf08      	it	eq
 8002ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	bfc4      	itt	gt
 8002eec:	1a9b      	subgt	r3, r3, r2
 8002eee:	18ed      	addgt	r5, r5, r3
 8002ef0:	341a      	adds	r4, #26
 8002ef2:	454d      	cmp	r5, r9
 8002ef4:	d11a      	bne.n	8002f2c <_printf_common+0xd8>
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	e008      	b.n	8002f0c <_printf_common+0xb8>
 8002efa:	2301      	movs	r3, #1
 8002efc:	4652      	mov	r2, sl
 8002efe:	4639      	mov	r1, r7
 8002f00:	4630      	mov	r0, r6
 8002f02:	47c0      	blx	r8
 8002f04:	3001      	adds	r0, #1
 8002f06:	d103      	bne.n	8002f10 <_printf_common+0xbc>
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f10:	3501      	adds	r5, #1
 8002f12:	e7c2      	b.n	8002e9a <_printf_common+0x46>
 8002f14:	2030      	movs	r0, #48	; 0x30
 8002f16:	18e1      	adds	r1, r4, r3
 8002f18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f22:	4422      	add	r2, r4
 8002f24:	3302      	adds	r3, #2
 8002f26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f2a:	e7c4      	b.n	8002eb6 <_printf_common+0x62>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	4622      	mov	r2, r4
 8002f30:	4639      	mov	r1, r7
 8002f32:	4630      	mov	r0, r6
 8002f34:	47c0      	blx	r8
 8002f36:	3001      	adds	r0, #1
 8002f38:	d0e6      	beq.n	8002f08 <_printf_common+0xb4>
 8002f3a:	f109 0901 	add.w	r9, r9, #1
 8002f3e:	e7d8      	b.n	8002ef2 <_printf_common+0x9e>

08002f40 <_printf_i>:
 8002f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002f48:	460c      	mov	r4, r1
 8002f4a:	7e09      	ldrb	r1, [r1, #24]
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	296e      	cmp	r1, #110	; 0x6e
 8002f50:	4617      	mov	r7, r2
 8002f52:	4606      	mov	r6, r0
 8002f54:	4698      	mov	r8, r3
 8002f56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f58:	f000 80b3 	beq.w	80030c2 <_printf_i+0x182>
 8002f5c:	d822      	bhi.n	8002fa4 <_printf_i+0x64>
 8002f5e:	2963      	cmp	r1, #99	; 0x63
 8002f60:	d036      	beq.n	8002fd0 <_printf_i+0x90>
 8002f62:	d80a      	bhi.n	8002f7a <_printf_i+0x3a>
 8002f64:	2900      	cmp	r1, #0
 8002f66:	f000 80b9 	beq.w	80030dc <_printf_i+0x19c>
 8002f6a:	2958      	cmp	r1, #88	; 0x58
 8002f6c:	f000 8083 	beq.w	8003076 <_printf_i+0x136>
 8002f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002f78:	e032      	b.n	8002fe0 <_printf_i+0xa0>
 8002f7a:	2964      	cmp	r1, #100	; 0x64
 8002f7c:	d001      	beq.n	8002f82 <_printf_i+0x42>
 8002f7e:	2969      	cmp	r1, #105	; 0x69
 8002f80:	d1f6      	bne.n	8002f70 <_printf_i+0x30>
 8002f82:	6820      	ldr	r0, [r4, #0]
 8002f84:	6813      	ldr	r3, [r2, #0]
 8002f86:	0605      	lsls	r5, r0, #24
 8002f88:	f103 0104 	add.w	r1, r3, #4
 8002f8c:	d52a      	bpl.n	8002fe4 <_printf_i+0xa4>
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6011      	str	r1, [r2, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	da03      	bge.n	8002f9e <_printf_i+0x5e>
 8002f96:	222d      	movs	r2, #45	; 0x2d
 8002f98:	425b      	negs	r3, r3
 8002f9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002f9e:	486f      	ldr	r0, [pc, #444]	; (800315c <_printf_i+0x21c>)
 8002fa0:	220a      	movs	r2, #10
 8002fa2:	e039      	b.n	8003018 <_printf_i+0xd8>
 8002fa4:	2973      	cmp	r1, #115	; 0x73
 8002fa6:	f000 809d 	beq.w	80030e4 <_printf_i+0x1a4>
 8002faa:	d808      	bhi.n	8002fbe <_printf_i+0x7e>
 8002fac:	296f      	cmp	r1, #111	; 0x6f
 8002fae:	d020      	beq.n	8002ff2 <_printf_i+0xb2>
 8002fb0:	2970      	cmp	r1, #112	; 0x70
 8002fb2:	d1dd      	bne.n	8002f70 <_printf_i+0x30>
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	f043 0320 	orr.w	r3, r3, #32
 8002fba:	6023      	str	r3, [r4, #0]
 8002fbc:	e003      	b.n	8002fc6 <_printf_i+0x86>
 8002fbe:	2975      	cmp	r1, #117	; 0x75
 8002fc0:	d017      	beq.n	8002ff2 <_printf_i+0xb2>
 8002fc2:	2978      	cmp	r1, #120	; 0x78
 8002fc4:	d1d4      	bne.n	8002f70 <_printf_i+0x30>
 8002fc6:	2378      	movs	r3, #120	; 0x78
 8002fc8:	4865      	ldr	r0, [pc, #404]	; (8003160 <_printf_i+0x220>)
 8002fca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fce:	e055      	b.n	800307c <_printf_i+0x13c>
 8002fd0:	6813      	ldr	r3, [r2, #0]
 8002fd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fd6:	1d19      	adds	r1, r3, #4
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6011      	str	r1, [r2, #0]
 8002fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e08c      	b.n	80030fe <_printf_i+0x1be>
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002fea:	6011      	str	r1, [r2, #0]
 8002fec:	bf18      	it	ne
 8002fee:	b21b      	sxthne	r3, r3
 8002ff0:	e7cf      	b.n	8002f92 <_printf_i+0x52>
 8002ff2:	6813      	ldr	r3, [r2, #0]
 8002ff4:	6825      	ldr	r5, [r4, #0]
 8002ff6:	1d18      	adds	r0, r3, #4
 8002ff8:	6010      	str	r0, [r2, #0]
 8002ffa:	0628      	lsls	r0, r5, #24
 8002ffc:	d501      	bpl.n	8003002 <_printf_i+0xc2>
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	e002      	b.n	8003008 <_printf_i+0xc8>
 8003002:	0668      	lsls	r0, r5, #25
 8003004:	d5fb      	bpl.n	8002ffe <_printf_i+0xbe>
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	296f      	cmp	r1, #111	; 0x6f
 800300a:	bf14      	ite	ne
 800300c:	220a      	movne	r2, #10
 800300e:	2208      	moveq	r2, #8
 8003010:	4852      	ldr	r0, [pc, #328]	; (800315c <_printf_i+0x21c>)
 8003012:	2100      	movs	r1, #0
 8003014:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003018:	6865      	ldr	r5, [r4, #4]
 800301a:	2d00      	cmp	r5, #0
 800301c:	60a5      	str	r5, [r4, #8]
 800301e:	f2c0 8095 	blt.w	800314c <_printf_i+0x20c>
 8003022:	6821      	ldr	r1, [r4, #0]
 8003024:	f021 0104 	bic.w	r1, r1, #4
 8003028:	6021      	str	r1, [r4, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d13d      	bne.n	80030aa <_printf_i+0x16a>
 800302e:	2d00      	cmp	r5, #0
 8003030:	f040 808e 	bne.w	8003150 <_printf_i+0x210>
 8003034:	4665      	mov	r5, ip
 8003036:	2a08      	cmp	r2, #8
 8003038:	d10b      	bne.n	8003052 <_printf_i+0x112>
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	07db      	lsls	r3, r3, #31
 800303e:	d508      	bpl.n	8003052 <_printf_i+0x112>
 8003040:	6923      	ldr	r3, [r4, #16]
 8003042:	6862      	ldr	r2, [r4, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	bfde      	ittt	le
 8003048:	2330      	movle	r3, #48	; 0x30
 800304a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800304e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003052:	ebac 0305 	sub.w	r3, ip, r5
 8003056:	6123      	str	r3, [r4, #16]
 8003058:	f8cd 8000 	str.w	r8, [sp]
 800305c:	463b      	mov	r3, r7
 800305e:	aa03      	add	r2, sp, #12
 8003060:	4621      	mov	r1, r4
 8003062:	4630      	mov	r0, r6
 8003064:	f7ff fef6 	bl	8002e54 <_printf_common>
 8003068:	3001      	adds	r0, #1
 800306a:	d14d      	bne.n	8003108 <_printf_i+0x1c8>
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	b005      	add	sp, #20
 8003072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003076:	4839      	ldr	r0, [pc, #228]	; (800315c <_printf_i+0x21c>)
 8003078:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800307c:	6813      	ldr	r3, [r2, #0]
 800307e:	6821      	ldr	r1, [r4, #0]
 8003080:	1d1d      	adds	r5, r3, #4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6015      	str	r5, [r2, #0]
 8003086:	060a      	lsls	r2, r1, #24
 8003088:	d50b      	bpl.n	80030a2 <_printf_i+0x162>
 800308a:	07ca      	lsls	r2, r1, #31
 800308c:	bf44      	itt	mi
 800308e:	f041 0120 	orrmi.w	r1, r1, #32
 8003092:	6021      	strmi	r1, [r4, #0]
 8003094:	b91b      	cbnz	r3, 800309e <_printf_i+0x15e>
 8003096:	6822      	ldr	r2, [r4, #0]
 8003098:	f022 0220 	bic.w	r2, r2, #32
 800309c:	6022      	str	r2, [r4, #0]
 800309e:	2210      	movs	r2, #16
 80030a0:	e7b7      	b.n	8003012 <_printf_i+0xd2>
 80030a2:	064d      	lsls	r5, r1, #25
 80030a4:	bf48      	it	mi
 80030a6:	b29b      	uxthmi	r3, r3
 80030a8:	e7ef      	b.n	800308a <_printf_i+0x14a>
 80030aa:	4665      	mov	r5, ip
 80030ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80030b0:	fb02 3311 	mls	r3, r2, r1, r3
 80030b4:	5cc3      	ldrb	r3, [r0, r3]
 80030b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80030ba:	460b      	mov	r3, r1
 80030bc:	2900      	cmp	r1, #0
 80030be:	d1f5      	bne.n	80030ac <_printf_i+0x16c>
 80030c0:	e7b9      	b.n	8003036 <_printf_i+0xf6>
 80030c2:	6813      	ldr	r3, [r2, #0]
 80030c4:	6825      	ldr	r5, [r4, #0]
 80030c6:	1d18      	adds	r0, r3, #4
 80030c8:	6961      	ldr	r1, [r4, #20]
 80030ca:	6010      	str	r0, [r2, #0]
 80030cc:	0628      	lsls	r0, r5, #24
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	d501      	bpl.n	80030d6 <_printf_i+0x196>
 80030d2:	6019      	str	r1, [r3, #0]
 80030d4:	e002      	b.n	80030dc <_printf_i+0x19c>
 80030d6:	066a      	lsls	r2, r5, #25
 80030d8:	d5fb      	bpl.n	80030d2 <_printf_i+0x192>
 80030da:	8019      	strh	r1, [r3, #0]
 80030dc:	2300      	movs	r3, #0
 80030de:	4665      	mov	r5, ip
 80030e0:	6123      	str	r3, [r4, #16]
 80030e2:	e7b9      	b.n	8003058 <_printf_i+0x118>
 80030e4:	6813      	ldr	r3, [r2, #0]
 80030e6:	1d19      	adds	r1, r3, #4
 80030e8:	6011      	str	r1, [r2, #0]
 80030ea:	681d      	ldr	r5, [r3, #0]
 80030ec:	6862      	ldr	r2, [r4, #4]
 80030ee:	2100      	movs	r1, #0
 80030f0:	4628      	mov	r0, r5
 80030f2:	f000 f837 	bl	8003164 <memchr>
 80030f6:	b108      	cbz	r0, 80030fc <_printf_i+0x1bc>
 80030f8:	1b40      	subs	r0, r0, r5
 80030fa:	6060      	str	r0, [r4, #4]
 80030fc:	6863      	ldr	r3, [r4, #4]
 80030fe:	6123      	str	r3, [r4, #16]
 8003100:	2300      	movs	r3, #0
 8003102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003106:	e7a7      	b.n	8003058 <_printf_i+0x118>
 8003108:	6923      	ldr	r3, [r4, #16]
 800310a:	462a      	mov	r2, r5
 800310c:	4639      	mov	r1, r7
 800310e:	4630      	mov	r0, r6
 8003110:	47c0      	blx	r8
 8003112:	3001      	adds	r0, #1
 8003114:	d0aa      	beq.n	800306c <_printf_i+0x12c>
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	079b      	lsls	r3, r3, #30
 800311a:	d413      	bmi.n	8003144 <_printf_i+0x204>
 800311c:	68e0      	ldr	r0, [r4, #12]
 800311e:	9b03      	ldr	r3, [sp, #12]
 8003120:	4298      	cmp	r0, r3
 8003122:	bfb8      	it	lt
 8003124:	4618      	movlt	r0, r3
 8003126:	e7a3      	b.n	8003070 <_printf_i+0x130>
 8003128:	2301      	movs	r3, #1
 800312a:	464a      	mov	r2, r9
 800312c:	4639      	mov	r1, r7
 800312e:	4630      	mov	r0, r6
 8003130:	47c0      	blx	r8
 8003132:	3001      	adds	r0, #1
 8003134:	d09a      	beq.n	800306c <_printf_i+0x12c>
 8003136:	3501      	adds	r5, #1
 8003138:	68e3      	ldr	r3, [r4, #12]
 800313a:	9a03      	ldr	r2, [sp, #12]
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	42ab      	cmp	r3, r5
 8003140:	dcf2      	bgt.n	8003128 <_printf_i+0x1e8>
 8003142:	e7eb      	b.n	800311c <_printf_i+0x1dc>
 8003144:	2500      	movs	r5, #0
 8003146:	f104 0919 	add.w	r9, r4, #25
 800314a:	e7f5      	b.n	8003138 <_printf_i+0x1f8>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1ac      	bne.n	80030aa <_printf_i+0x16a>
 8003150:	7803      	ldrb	r3, [r0, #0]
 8003152:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003156:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800315a:	e76c      	b.n	8003036 <_printf_i+0xf6>
 800315c:	08003471 	.word	0x08003471
 8003160:	08003482 	.word	0x08003482

08003164 <memchr>:
 8003164:	b510      	push	{r4, lr}
 8003166:	b2c9      	uxtb	r1, r1
 8003168:	4402      	add	r2, r0
 800316a:	4290      	cmp	r0, r2
 800316c:	4603      	mov	r3, r0
 800316e:	d101      	bne.n	8003174 <memchr+0x10>
 8003170:	2300      	movs	r3, #0
 8003172:	e003      	b.n	800317c <memchr+0x18>
 8003174:	781c      	ldrb	r4, [r3, #0]
 8003176:	3001      	adds	r0, #1
 8003178:	428c      	cmp	r4, r1
 800317a:	d1f6      	bne.n	800316a <memchr+0x6>
 800317c:	4618      	mov	r0, r3
 800317e:	bd10      	pop	{r4, pc}

08003180 <memcpy>:
 8003180:	b510      	push	{r4, lr}
 8003182:	1e43      	subs	r3, r0, #1
 8003184:	440a      	add	r2, r1
 8003186:	4291      	cmp	r1, r2
 8003188:	d100      	bne.n	800318c <memcpy+0xc>
 800318a:	bd10      	pop	{r4, pc}
 800318c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003190:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003194:	e7f7      	b.n	8003186 <memcpy+0x6>

08003196 <memmove>:
 8003196:	4288      	cmp	r0, r1
 8003198:	b510      	push	{r4, lr}
 800319a:	eb01 0302 	add.w	r3, r1, r2
 800319e:	d807      	bhi.n	80031b0 <memmove+0x1a>
 80031a0:	1e42      	subs	r2, r0, #1
 80031a2:	4299      	cmp	r1, r3
 80031a4:	d00a      	beq.n	80031bc <memmove+0x26>
 80031a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031aa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80031ae:	e7f8      	b.n	80031a2 <memmove+0xc>
 80031b0:	4283      	cmp	r3, r0
 80031b2:	d9f5      	bls.n	80031a0 <memmove+0xa>
 80031b4:	1881      	adds	r1, r0, r2
 80031b6:	1ad2      	subs	r2, r2, r3
 80031b8:	42d3      	cmn	r3, r2
 80031ba:	d100      	bne.n	80031be <memmove+0x28>
 80031bc:	bd10      	pop	{r4, pc}
 80031be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80031c6:	e7f7      	b.n	80031b8 <memmove+0x22>

080031c8 <_free_r>:
 80031c8:	b538      	push	{r3, r4, r5, lr}
 80031ca:	4605      	mov	r5, r0
 80031cc:	2900      	cmp	r1, #0
 80031ce:	d043      	beq.n	8003258 <_free_r+0x90>
 80031d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031d4:	1f0c      	subs	r4, r1, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	bfb8      	it	lt
 80031da:	18e4      	addlt	r4, r4, r3
 80031dc:	f000 f8d0 	bl	8003380 <__malloc_lock>
 80031e0:	4a1e      	ldr	r2, [pc, #120]	; (800325c <_free_r+0x94>)
 80031e2:	6813      	ldr	r3, [r2, #0]
 80031e4:	4610      	mov	r0, r2
 80031e6:	b933      	cbnz	r3, 80031f6 <_free_r+0x2e>
 80031e8:	6063      	str	r3, [r4, #4]
 80031ea:	6014      	str	r4, [r2, #0]
 80031ec:	4628      	mov	r0, r5
 80031ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031f2:	f000 b8c6 	b.w	8003382 <__malloc_unlock>
 80031f6:	42a3      	cmp	r3, r4
 80031f8:	d90b      	bls.n	8003212 <_free_r+0x4a>
 80031fa:	6821      	ldr	r1, [r4, #0]
 80031fc:	1862      	adds	r2, r4, r1
 80031fe:	4293      	cmp	r3, r2
 8003200:	bf01      	itttt	eq
 8003202:	681a      	ldreq	r2, [r3, #0]
 8003204:	685b      	ldreq	r3, [r3, #4]
 8003206:	1852      	addeq	r2, r2, r1
 8003208:	6022      	streq	r2, [r4, #0]
 800320a:	6063      	str	r3, [r4, #4]
 800320c:	6004      	str	r4, [r0, #0]
 800320e:	e7ed      	b.n	80031ec <_free_r+0x24>
 8003210:	4613      	mov	r3, r2
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	b10a      	cbz	r2, 800321a <_free_r+0x52>
 8003216:	42a2      	cmp	r2, r4
 8003218:	d9fa      	bls.n	8003210 <_free_r+0x48>
 800321a:	6819      	ldr	r1, [r3, #0]
 800321c:	1858      	adds	r0, r3, r1
 800321e:	42a0      	cmp	r0, r4
 8003220:	d10b      	bne.n	800323a <_free_r+0x72>
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	4401      	add	r1, r0
 8003226:	1858      	adds	r0, r3, r1
 8003228:	4282      	cmp	r2, r0
 800322a:	6019      	str	r1, [r3, #0]
 800322c:	d1de      	bne.n	80031ec <_free_r+0x24>
 800322e:	6810      	ldr	r0, [r2, #0]
 8003230:	6852      	ldr	r2, [r2, #4]
 8003232:	4401      	add	r1, r0
 8003234:	6019      	str	r1, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	e7d8      	b.n	80031ec <_free_r+0x24>
 800323a:	d902      	bls.n	8003242 <_free_r+0x7a>
 800323c:	230c      	movs	r3, #12
 800323e:	602b      	str	r3, [r5, #0]
 8003240:	e7d4      	b.n	80031ec <_free_r+0x24>
 8003242:	6820      	ldr	r0, [r4, #0]
 8003244:	1821      	adds	r1, r4, r0
 8003246:	428a      	cmp	r2, r1
 8003248:	bf01      	itttt	eq
 800324a:	6811      	ldreq	r1, [r2, #0]
 800324c:	6852      	ldreq	r2, [r2, #4]
 800324e:	1809      	addeq	r1, r1, r0
 8003250:	6021      	streq	r1, [r4, #0]
 8003252:	6062      	str	r2, [r4, #4]
 8003254:	605c      	str	r4, [r3, #4]
 8003256:	e7c9      	b.n	80031ec <_free_r+0x24>
 8003258:	bd38      	pop	{r3, r4, r5, pc}
 800325a:	bf00      	nop
 800325c:	200000cc 	.word	0x200000cc

08003260 <_malloc_r>:
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	1ccd      	adds	r5, r1, #3
 8003264:	f025 0503 	bic.w	r5, r5, #3
 8003268:	3508      	adds	r5, #8
 800326a:	2d0c      	cmp	r5, #12
 800326c:	bf38      	it	cc
 800326e:	250c      	movcc	r5, #12
 8003270:	2d00      	cmp	r5, #0
 8003272:	4606      	mov	r6, r0
 8003274:	db01      	blt.n	800327a <_malloc_r+0x1a>
 8003276:	42a9      	cmp	r1, r5
 8003278:	d903      	bls.n	8003282 <_malloc_r+0x22>
 800327a:	230c      	movs	r3, #12
 800327c:	6033      	str	r3, [r6, #0]
 800327e:	2000      	movs	r0, #0
 8003280:	bd70      	pop	{r4, r5, r6, pc}
 8003282:	f000 f87d 	bl	8003380 <__malloc_lock>
 8003286:	4a21      	ldr	r2, [pc, #132]	; (800330c <_malloc_r+0xac>)
 8003288:	6814      	ldr	r4, [r2, #0]
 800328a:	4621      	mov	r1, r4
 800328c:	b991      	cbnz	r1, 80032b4 <_malloc_r+0x54>
 800328e:	4c20      	ldr	r4, [pc, #128]	; (8003310 <_malloc_r+0xb0>)
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	b91b      	cbnz	r3, 800329c <_malloc_r+0x3c>
 8003294:	4630      	mov	r0, r6
 8003296:	f000 f863 	bl	8003360 <_sbrk_r>
 800329a:	6020      	str	r0, [r4, #0]
 800329c:	4629      	mov	r1, r5
 800329e:	4630      	mov	r0, r6
 80032a0:	f000 f85e 	bl	8003360 <_sbrk_r>
 80032a4:	1c43      	adds	r3, r0, #1
 80032a6:	d124      	bne.n	80032f2 <_malloc_r+0x92>
 80032a8:	230c      	movs	r3, #12
 80032aa:	4630      	mov	r0, r6
 80032ac:	6033      	str	r3, [r6, #0]
 80032ae:	f000 f868 	bl	8003382 <__malloc_unlock>
 80032b2:	e7e4      	b.n	800327e <_malloc_r+0x1e>
 80032b4:	680b      	ldr	r3, [r1, #0]
 80032b6:	1b5b      	subs	r3, r3, r5
 80032b8:	d418      	bmi.n	80032ec <_malloc_r+0x8c>
 80032ba:	2b0b      	cmp	r3, #11
 80032bc:	d90f      	bls.n	80032de <_malloc_r+0x7e>
 80032be:	600b      	str	r3, [r1, #0]
 80032c0:	18cc      	adds	r4, r1, r3
 80032c2:	50cd      	str	r5, [r1, r3]
 80032c4:	4630      	mov	r0, r6
 80032c6:	f000 f85c 	bl	8003382 <__malloc_unlock>
 80032ca:	f104 000b 	add.w	r0, r4, #11
 80032ce:	1d23      	adds	r3, r4, #4
 80032d0:	f020 0007 	bic.w	r0, r0, #7
 80032d4:	1ac3      	subs	r3, r0, r3
 80032d6:	d0d3      	beq.n	8003280 <_malloc_r+0x20>
 80032d8:	425a      	negs	r2, r3
 80032da:	50e2      	str	r2, [r4, r3]
 80032dc:	e7d0      	b.n	8003280 <_malloc_r+0x20>
 80032de:	684b      	ldr	r3, [r1, #4]
 80032e0:	428c      	cmp	r4, r1
 80032e2:	bf16      	itet	ne
 80032e4:	6063      	strne	r3, [r4, #4]
 80032e6:	6013      	streq	r3, [r2, #0]
 80032e8:	460c      	movne	r4, r1
 80032ea:	e7eb      	b.n	80032c4 <_malloc_r+0x64>
 80032ec:	460c      	mov	r4, r1
 80032ee:	6849      	ldr	r1, [r1, #4]
 80032f0:	e7cc      	b.n	800328c <_malloc_r+0x2c>
 80032f2:	1cc4      	adds	r4, r0, #3
 80032f4:	f024 0403 	bic.w	r4, r4, #3
 80032f8:	42a0      	cmp	r0, r4
 80032fa:	d005      	beq.n	8003308 <_malloc_r+0xa8>
 80032fc:	1a21      	subs	r1, r4, r0
 80032fe:	4630      	mov	r0, r6
 8003300:	f000 f82e 	bl	8003360 <_sbrk_r>
 8003304:	3001      	adds	r0, #1
 8003306:	d0cf      	beq.n	80032a8 <_malloc_r+0x48>
 8003308:	6025      	str	r5, [r4, #0]
 800330a:	e7db      	b.n	80032c4 <_malloc_r+0x64>
 800330c:	200000cc 	.word	0x200000cc
 8003310:	200000d0 	.word	0x200000d0

08003314 <_realloc_r>:
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	4607      	mov	r7, r0
 8003318:	4614      	mov	r4, r2
 800331a:	460e      	mov	r6, r1
 800331c:	b921      	cbnz	r1, 8003328 <_realloc_r+0x14>
 800331e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003322:	4611      	mov	r1, r2
 8003324:	f7ff bf9c 	b.w	8003260 <_malloc_r>
 8003328:	b922      	cbnz	r2, 8003334 <_realloc_r+0x20>
 800332a:	f7ff ff4d 	bl	80031c8 <_free_r>
 800332e:	4625      	mov	r5, r4
 8003330:	4628      	mov	r0, r5
 8003332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003334:	f000 f826 	bl	8003384 <_malloc_usable_size_r>
 8003338:	42a0      	cmp	r0, r4
 800333a:	d20f      	bcs.n	800335c <_realloc_r+0x48>
 800333c:	4621      	mov	r1, r4
 800333e:	4638      	mov	r0, r7
 8003340:	f7ff ff8e 	bl	8003260 <_malloc_r>
 8003344:	4605      	mov	r5, r0
 8003346:	2800      	cmp	r0, #0
 8003348:	d0f2      	beq.n	8003330 <_realloc_r+0x1c>
 800334a:	4631      	mov	r1, r6
 800334c:	4622      	mov	r2, r4
 800334e:	f7ff ff17 	bl	8003180 <memcpy>
 8003352:	4631      	mov	r1, r6
 8003354:	4638      	mov	r0, r7
 8003356:	f7ff ff37 	bl	80031c8 <_free_r>
 800335a:	e7e9      	b.n	8003330 <_realloc_r+0x1c>
 800335c:	4635      	mov	r5, r6
 800335e:	e7e7      	b.n	8003330 <_realloc_r+0x1c>

08003360 <_sbrk_r>:
 8003360:	b538      	push	{r3, r4, r5, lr}
 8003362:	2300      	movs	r3, #0
 8003364:	4c05      	ldr	r4, [pc, #20]	; (800337c <_sbrk_r+0x1c>)
 8003366:	4605      	mov	r5, r0
 8003368:	4608      	mov	r0, r1
 800336a:	6023      	str	r3, [r4, #0]
 800336c:	f7fd face 	bl	800090c <_sbrk>
 8003370:	1c43      	adds	r3, r0, #1
 8003372:	d102      	bne.n	800337a <_sbrk_r+0x1a>
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	b103      	cbz	r3, 800337a <_sbrk_r+0x1a>
 8003378:	602b      	str	r3, [r5, #0]
 800337a:	bd38      	pop	{r3, r4, r5, pc}
 800337c:	20000170 	.word	0x20000170

08003380 <__malloc_lock>:
 8003380:	4770      	bx	lr

08003382 <__malloc_unlock>:
 8003382:	4770      	bx	lr

08003384 <_malloc_usable_size_r>:
 8003384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003388:	1f18      	subs	r0, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	bfbc      	itt	lt
 800338e:	580b      	ldrlt	r3, [r1, r0]
 8003390:	18c0      	addlt	r0, r0, r3
 8003392:	4770      	bx	lr

08003394 <_init>:
 8003394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003396:	bf00      	nop
 8003398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339a:	bc08      	pop	{r3}
 800339c:	469e      	mov	lr, r3
 800339e:	4770      	bx	lr

080033a0 <_fini>:
 80033a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a2:	bf00      	nop
 80033a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a6:	bc08      	pop	{r3}
 80033a8:	469e      	mov	lr, r3
 80033aa:	4770      	bx	lr
