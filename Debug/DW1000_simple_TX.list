
DW1000_simple_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003140  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800324c  0800324c  0001324c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800331c  0800331c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800331c  0800331c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800331c  0800331c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800331c  0800331c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003320  08003320  00013320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000074  08003398  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003398  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e009  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002236  00000000  00000000  0002e0a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  000302e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  00030fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d0a  00000000  00000000  00031b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009858  00000000  00000000  00048882  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073f1e  00000000  00000000  000520da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5ff8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003630  00000000  00000000  000c6074  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003234 	.word	0x08003234

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003234 	.word	0x08003234

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <debugPrint>:
	  HAL_Delay(200);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	  HAL_Delay(200);
}
void debugPrint(char _out[])
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 200);
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f7ff fff1 	bl	800014c <strlen>
 800016a:	4603      	mov	r3, r0
 800016c:	b29a      	uxth	r2, r3
 800016e:	23c8      	movs	r3, #200	; 0xc8
 8000170:	6879      	ldr	r1, [r7, #4]
 8000172:	4803      	ldr	r0, [pc, #12]	; (8000180 <debugPrint+0x24>)
 8000174:	f002 fa5d 	bl	8002632 <HAL_UART_Transmit>
	 //char newline[2] = "\r\n";
	 //HAL_UART_Transmit(&huart1, (uint8_t *) newline, 2, 200);
}
 8000178:	bf00      	nop
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	200000d4 	.word	0x200000d4

08000184 <debugInt32Hexln>:
void debugInt32Hexln(uint32_t uint32data)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b086      	sub	sp, #24
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	char buff[8];
	sprintf(buff,"%08X",uint32data);
 800018c:	f107 0310 	add.w	r3, r7, #16
 8000190:	687a      	ldr	r2, [r7, #4]
 8000192:	490c      	ldr	r1, [pc, #48]	; (80001c4 <debugInt32Hexln+0x40>)
 8000194:	4618      	mov	r0, r3
 8000196:	f002 fc3b 	bl	8002a10 <siprintf>
	HAL_UART_Transmit(&huart1, buff, 8, 200);
 800019a:	f107 0110 	add.w	r1, r7, #16
 800019e:	23c8      	movs	r3, #200	; 0xc8
 80001a0:	2208      	movs	r2, #8
 80001a2:	4809      	ldr	r0, [pc, #36]	; (80001c8 <debugInt32Hexln+0x44>)
 80001a4:	f002 fa45 	bl	8002632 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80001a8:	f640 230d 	movw	r3, #2573	; 0xa0d
 80001ac:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t *) newline, 2, 200);
 80001ae:	f107 010c 	add.w	r1, r7, #12
 80001b2:	23c8      	movs	r3, #200	; 0xc8
 80001b4:	2202      	movs	r2, #2
 80001b6:	4804      	ldr	r0, [pc, #16]	; (80001c8 <debugInt32Hexln+0x44>)
 80001b8:	f002 fa3b 	bl	8002632 <HAL_UART_Transmit>
}
 80001bc:	bf00      	nop
 80001be:	3718      	adds	r7, #24
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	0800324c 	.word	0x0800324c
 80001c8:	200000d4 	.word	0x200000d4

080001cc <debugInt8Hex>:
	HAL_UART_Transmit(&huart1, buff, 2, 200);
	char newline[2] = "\r\n";
	HAL_UART_Transmit(&huart1, (uint8_t *) newline, 2, 200);
}
void debugInt8Hex(uint8_t uint8data)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
	char buff[2];
	sprintf(buff,"%02X",uint8data);
 80001d6:	79fa      	ldrb	r2, [r7, #7]
 80001d8:	f107 030c 	add.w	r3, r7, #12
 80001dc:	4907      	ldr	r1, [pc, #28]	; (80001fc <debugInt8Hex+0x30>)
 80001de:	4618      	mov	r0, r3
 80001e0:	f002 fc16 	bl	8002a10 <siprintf>
	HAL_UART_Transmit(&huart1, buff, 2, 200);
 80001e4:	f107 010c 	add.w	r1, r7, #12
 80001e8:	23c8      	movs	r3, #200	; 0xc8
 80001ea:	2202      	movs	r2, #2
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <debugInt8Hex+0x34>)
 80001ee:	f002 fa20 	bl	8002632 <HAL_UART_Transmit>
}
 80001f2:	bf00      	nop
 80001f4:	3710      	adds	r7, #16
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	0800325c 	.word	0x0800325c
 8000200:	200000d4 	.word	0x200000d4

08000204 <DW1000_init_fail>:
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
	HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
	//for(uint8_t i=0;i<4;i++)temp = temp*0x100+temp8[3-i];
}
uint8 DW1000_init_fail()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
	uint8 init_fail = 1;
 800020a:	2301      	movs	r3, #1
 800020c:	71fb      	strb	r3, [r7, #7]
	uint8 const fail_count = 20;
 800020e:	2314      	movs	r3, #20
 8000210:	717b      	strb	r3, [r7, #5]
	for(uint8 i=0;i<fail_count;i++){
 8000212:	2300      	movs	r3, #0
 8000214:	71bb      	strb	r3, [r7, #6]
 8000216:	e00f      	b.n	8000238 <DW1000_init_fail+0x34>
	  if (!(dwt_initialise(DWT_LOADUCODE) == DWT_ERROR))
 8000218:	2001      	movs	r0, #1
 800021a:	f000 fb3d 	bl	8000898 <dwt_initialise>
 800021e:	4603      	mov	r3, r0
 8000220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000224:	d005      	beq.n	8000232 <DW1000_init_fail+0x2e>
	  {
		  debugPrint("INIT SUCCESS\r\n");
 8000226:	4809      	ldr	r0, [pc, #36]	; (800024c <DW1000_init_fail+0x48>)
 8000228:	f7ff ff98 	bl	800015c <debugPrint>
		  init_fail = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	71fb      	strb	r3, [r7, #7]
		  break;
 8000230:	e006      	b.n	8000240 <DW1000_init_fail+0x3c>
	for(uint8 i=0;i<fail_count;i++){
 8000232:	79bb      	ldrb	r3, [r7, #6]
 8000234:	3301      	adds	r3, #1
 8000236:	71bb      	strb	r3, [r7, #6]
 8000238:	79ba      	ldrb	r2, [r7, #6]
 800023a:	797b      	ldrb	r3, [r7, #5]
 800023c:	429a      	cmp	r2, r3
 800023e:	d3eb      	bcc.n	8000218 <DW1000_init_fail+0x14>
	  }
	}
	return init_fail;
 8000240:	79fb      	ldrb	r3, [r7, #7]
}
 8000242:	4618      	mov	r0, r3
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	08003264 	.word	0x08003264

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f001 f87f 	bl	8001358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f895 	bl	8000388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f000 f939 	bl	80004d4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000262:	f000 f8d7 	bl	8000414 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000266:	f000 f90b 	bl	8000480 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32 u32;
  port_set_dw1000_slowrate();
 800026a:	f001 f82d 	bl	80012c8 <port_set_dw1000_slowrate>
  //port_set_dw1000_fastrate();
  debugPrint("\r\n===============Restart_TX V1.0.1=================\r\n");
 800026e:	4844      	ldr	r0, [pc, #272]	; (8000380 <main+0x130>)
 8000270:	f7ff ff74 	bl	800015c <debugPrint>
  while(1)
  {
	  //DWReset();
	  reset_DW1000();
 8000274:	f001 f804 	bl	8001280 <reset_DW1000>
	  u32 = dwt_readdevid();
 8000278:	f000 fc5a 	bl	8000b30 <dwt_readdevid>
 800027c:	61f8      	str	r0, [r7, #28]
//	  debugInt32Hexln(u32);

	  while((u32 = dwt_read32bitreg(SYS_CFG_ID))!=0x00001600)
 800027e:	e005      	b.n	800028c <main+0x3c>
		  dwt_write32bitreg(SYS_CFG_ID,0x00001600);
 8000280:	f44f 52b0 	mov.w	r2, #5632	; 0x1600
 8000284:	2100      	movs	r1, #0
 8000286:	2004      	movs	r0, #4
 8000288:	f000 fd83 	bl	8000d92 <dwt_write32bitoffsetreg>
	  while((u32 = dwt_read32bitreg(SYS_CFG_ID))!=0x00001600)
 800028c:	2100      	movs	r1, #0
 800028e:	2004      	movs	r0, #4
 8000290:	f000 fd0c 	bl	8000cac <dwt_read32bitoffsetreg>
 8000294:	61f8      	str	r0, [r7, #28]
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 800029c:	d1f0      	bne.n	8000280 <main+0x30>
//	  debugInt32Hexln(u32);

	  //port_set_dw1000_fastrate();
	  debugInt32Hexln(dwt_read32bitoffsetreg(EXT_SYNC_ID,EC_CTRL_OFFSET));
 800029e:	2100      	movs	r1, #0
 80002a0:	2024      	movs	r0, #36	; 0x24
 80002a2:	f000 fd03 	bl	8000cac <dwt_read32bitoffsetreg>
 80002a6:	4603      	mov	r3, r0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ff6b 	bl	8000184 <debugInt32Hexln>
	  //reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
	  if(DW1000_init_fail())continue; //1 means initiate fails
 80002ae:	f7ff ffa9 	bl	8000204 <DW1000_init_fail>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d15f      	bne.n	8000378 <main+0x128>

	  //port_set_dw1000_fastrate();
	  if(dwt_read32bitreg(SYS_CFG_ID)!=0x00001200)continue;
 80002b8:	2100      	movs	r1, #0
 80002ba:	2004      	movs	r0, #4
 80002bc:	f000 fcf6 	bl	8000cac <dwt_read32bitoffsetreg>
 80002c0:	4603      	mov	r3, r0
 80002c2:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 80002c6:	d159      	bne.n	800037c <main+0x12c>

	  while((u32 = dwt_read32bitreg(SYS_CFG_ID))!=0x00001600)
 80002c8:	e005      	b.n	80002d6 <main+0x86>
		  dwt_write32bitreg(SYS_CFG_ID,0x00001600);
 80002ca:	f44f 52b0 	mov.w	r2, #5632	; 0x1600
 80002ce:	2100      	movs	r1, #0
 80002d0:	2004      	movs	r0, #4
 80002d2:	f000 fd5e 	bl	8000d92 <dwt_write32bitoffsetreg>
	  while((u32 = dwt_read32bitreg(SYS_CFG_ID))!=0x00001600)
 80002d6:	2100      	movs	r1, #0
 80002d8:	2004      	movs	r0, #4
 80002da:	f000 fce7 	bl	8000cac <dwt_read32bitoffsetreg>
 80002de:	61f8      	str	r0, [r7, #28]
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 80002e6:	d1f0      	bne.n	80002ca <main+0x7a>
//	  debugInt32Hexln(dwt_read32bitreg(SYS_STATUS_ID));
//	  debugInt32Hexln(dwt_read32bitoffsetreg(DRX_CONF_ID,DRX_TUNE2_OFFSET));
//	  debugInt16Hexln(dwt_read16bitoffsetreg(LDE_IF_ID,LDE_CFG2_OFFSET));
//	  debugInt16Hexln(dwt_read16bitoffsetreg(AGC_CTRL_ID,AGC_TUNE1_OFFSET));

	  debugInt32Hexln(dwt_read32bitoffsetreg(EXT_SYNC_ID,EC_CTRL_OFFSET));
 80002e8:	2100      	movs	r1, #0
 80002ea:	2024      	movs	r0, #36	; 0x24
 80002ec:	f000 fcde 	bl	8000cac <dwt_read32bitoffsetreg>
 80002f0:	4603      	mov	r3, r0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff46 	bl	8000184 <debugInt32Hexln>


	  //dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);


	  HAL_Delay(1000);
 80002f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fc:	f001 f88e 	bl	800141c <HAL_Delay>

	  uint8 dataA[10] = {0x11,0x22,0x33,0x44,0x55,0x66,0x78,0x9A,0xBC,0xDE};
 8000300:	4a20      	ldr	r2, [pc, #128]	; (8000384 <main+0x134>)
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	ca07      	ldmia	r2, {r0, r1, r2}
 8000308:	c303      	stmia	r3!, {r0, r1}
 800030a:	801a      	strh	r2, [r3, #0]
	  uint8 dataB[10];
	  dwt_writetodevice(0x21, 0, 10, &dataA);
 800030c:	f107 0310 	add.w	r3, r7, #16
 8000310:	220a      	movs	r2, #10
 8000312:	2100      	movs	r1, #0
 8000314:	2021      	movs	r0, #33	; 0x21
 8000316:	f000 fc14 	bl	8000b42 <dwt_writetodevice>
	  dwt_readfromdevice(0x21, 0 , 10,&dataB);
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	220a      	movs	r2, #10
 800031e:	2100      	movs	r1, #0
 8000320:	2021      	movs	r0, #33	; 0x21
 8000322:	f000 fc6a 	bl	8000bfa <dwt_readfromdevice>


	  debugInt8Hex(dataB[0]);
 8000326:	793b      	ldrb	r3, [r7, #4]
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff4f 	bl	80001cc <debugInt8Hex>
	  debugInt8Hex(dataB[1]);
 800032e:	797b      	ldrb	r3, [r7, #5]
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff4b 	bl	80001cc <debugInt8Hex>
	  debugInt8Hex(dataB[2]);
 8000336:	79bb      	ldrb	r3, [r7, #6]
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ff47 	bl	80001cc <debugInt8Hex>
	  debugInt8Hex(dataB[3]);
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff43 	bl	80001cc <debugInt8Hex>
	  debugInt8Hex(dataB[4]);
 8000346:	7a3b      	ldrb	r3, [r7, #8]
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff3f 	bl	80001cc <debugInt8Hex>
	  debugInt8Hex(dataB[5]);
 800034e:	7a7b      	ldrb	r3, [r7, #9]
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff3b 	bl	80001cc <debugInt8Hex>
	  debugInt8Hex(dataB[6]);
 8000356:	7abb      	ldrb	r3, [r7, #10]
 8000358:	4618      	mov	r0, r3
 800035a:	f7ff ff37 	bl	80001cc <debugInt8Hex>
	  debugInt8Hex(dataB[7]);
 800035e:	7afb      	ldrb	r3, [r7, #11]
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ff33 	bl	80001cc <debugInt8Hex>
	  debugInt8Hex(dataB[8]);
 8000366:	7b3b      	ldrb	r3, [r7, #12]
 8000368:	4618      	mov	r0, r3
 800036a:	f7ff ff2f 	bl	80001cc <debugInt8Hex>
	  debugInt8Hex(dataB[9]);
 800036e:	7b7b      	ldrb	r3, [r7, #13]
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff2b 	bl	80001cc <debugInt8Hex>

	  while(1);
 8000376:	e7fe      	b.n	8000376 <main+0x126>
	  if(DW1000_init_fail())continue; //1 means initiate fails
 8000378:	bf00      	nop
 800037a:	e77b      	b.n	8000274 <main+0x24>
	  if(dwt_read32bitreg(SYS_CFG_ID)!=0x00001200)continue;
 800037c:	bf00      	nop
  {
 800037e:	e779      	b.n	8000274 <main+0x24>
 8000380:	08003278 	.word	0x08003278
 8000384:	080032b0 	.word	0x080032b0

08000388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b090      	sub	sp, #64	; 0x40
 800038c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038e:	f107 0318 	add.w	r3, r7, #24
 8000392:	2228      	movs	r2, #40	; 0x28
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f002 fb32 	bl	8002a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003aa:	2301      	movs	r3, #1
 80003ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b8:	2301      	movs	r3, #1
 80003ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003bc:	2302      	movs	r3, #2
 80003be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003cc:	f107 0318 	add.w	r3, r7, #24
 80003d0:	4618      	mov	r0, r3
 80003d2:	f001 fa9b 	bl	800190c <HAL_RCC_OscConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003dc:	f000 f904 	bl	80005e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e0:	230f      	movs	r3, #15
 80003e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e4:	2302      	movs	r3, #2
 80003e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2102      	movs	r1, #2
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 fd06 	bl	8001e0c <HAL_RCC_ClockConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000406:	f000 f8ef 	bl	80005e8 <Error_Handler>
  }
}
 800040a:	bf00      	nop
 800040c:	3740      	adds	r7, #64	; 0x40
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000418:	4b17      	ldr	r3, [pc, #92]	; (8000478 <MX_SPI1_Init+0x64>)
 800041a:	4a18      	ldr	r2, [pc, #96]	; (800047c <MX_SPI1_Init+0x68>)
 800041c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800041e:	4b16      	ldr	r3, [pc, #88]	; (8000478 <MX_SPI1_Init+0x64>)
 8000420:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000424:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000426:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_SPI1_Init+0x64>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <MX_SPI1_Init+0x64>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_SPI1_Init+0x64>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_SPI1_Init+0x64>)
 800043a:	2200      	movs	r2, #0
 800043c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_SPI1_Init+0x64>)
 8000440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000444:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_SPI1_Init+0x64>)
 8000448:	2220      	movs	r2, #32
 800044a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800044c:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <MX_SPI1_Init+0x64>)
 800044e:	2200      	movs	r2, #0
 8000450:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_SPI1_Init+0x64>)
 8000454:	2200      	movs	r2, #0
 8000456:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000458:	4b07      	ldr	r3, [pc, #28]	; (8000478 <MX_SPI1_Init+0x64>)
 800045a:	2200      	movs	r2, #0
 800045c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_SPI1_Init+0x64>)
 8000460:	220a      	movs	r2, #10
 8000462:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000464:	4804      	ldr	r0, [pc, #16]	; (8000478 <MX_SPI1_Init+0x64>)
 8000466:	f001 fe6d 	bl	8002144 <HAL_SPI_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000470:	f000 f8ba 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000114 	.word	0x20000114
 800047c:	40013000 	.word	0x40013000

08000480 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 8000486:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <MX_USART1_UART_Init+0x50>)
 8000488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 800048c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004a6:	220c      	movs	r2, #12
 80004a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004b8:	f002 f86e 	bl	8002598 <HAL_UART_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004c2:	f000 f891 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200000d4 	.word	0x200000d4
 80004d0:	40013800 	.word	0x40013800

080004d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e8:	4b3a      	ldr	r3, [pc, #232]	; (80005d4 <MX_GPIO_Init+0x100>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a39      	ldr	r2, [pc, #228]	; (80005d4 <MX_GPIO_Init+0x100>)
 80004ee:	f043 0310 	orr.w	r3, r3, #16
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b37      	ldr	r3, [pc, #220]	; (80005d4 <MX_GPIO_Init+0x100>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000500:	4b34      	ldr	r3, [pc, #208]	; (80005d4 <MX_GPIO_Init+0x100>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a33      	ldr	r2, [pc, #204]	; (80005d4 <MX_GPIO_Init+0x100>)
 8000506:	f043 0320 	orr.w	r3, r3, #32
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <MX_GPIO_Init+0x100>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0320 	and.w	r3, r3, #32
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000518:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <MX_GPIO_Init+0x100>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a2d      	ldr	r2, [pc, #180]	; (80005d4 <MX_GPIO_Init+0x100>)
 800051e:	f043 0304 	orr.w	r3, r3, #4
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <MX_GPIO_Init+0x100>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0304 	and.w	r3, r3, #4
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <MX_GPIO_Init+0x100>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <MX_GPIO_Init+0x100>)
 8000536:	f043 0308 	orr.w	r3, r3, #8
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <MX_GPIO_Init+0x100>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0308 	and.w	r3, r3, #8
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054e:	4822      	ldr	r0, [pc, #136]	; (80005d8 <MX_GPIO_Init+0x104>)
 8000550:	f001 f9c4 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_RST_Pin|DW_NSS_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2118      	movs	r1, #24
 8000558:	4820      	ldr	r0, [pc, #128]	; (80005dc <MX_GPIO_Init+0x108>)
 800055a:	f001 f9bf 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800055e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	2301      	movs	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	2302      	movs	r3, #2
 800056e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	4619      	mov	r1, r3
 8000576:	4818      	ldr	r0, [pc, #96]	; (80005d8 <MX_GPIO_Init+0x104>)
 8000578:	f001 f856 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RST_Pin */
  GPIO_InitStruct.Pin = DW_RST_Pin;
 800057c:	2308      	movs	r3, #8
 800057e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000580:	2311      	movs	r3, #17
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2302      	movs	r3, #2
 800058a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	4619      	mov	r1, r3
 8000592:	4812      	ldr	r0, [pc, #72]	; (80005dc <MX_GPIO_Init+0x108>)
 8000594:	f001 f848 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8000598:	2310      	movs	r3, #16
 800059a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2302      	movs	r3, #2
 80005a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4619      	mov	r1, r3
 80005ae:	480b      	ldr	r0, [pc, #44]	; (80005dc <MX_GPIO_Init+0x108>)
 80005b0:	f001 f83a 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 80005b4:	2301      	movs	r3, #1
 80005b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_GPIO_Init+0x10c>)
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005bc:	2302      	movs	r3, #2
 80005be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4619      	mov	r1, r3
 80005c6:	4807      	ldr	r0, [pc, #28]	; (80005e4 <MX_GPIO_Init+0x110>)
 80005c8:	f001 f82e 	bl	8001628 <HAL_GPIO_Init>

}
 80005cc:	bf00      	nop
 80005ce:	3720      	adds	r7, #32
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40011000 	.word	0x40011000
 80005dc:	40010800 	.word	0x40010800
 80005e0:	10110000 	.word	0x10110000
 80005e4:	40010c00 	.word	0x40010c00

080005e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <HAL_MspInit+0x5c>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	4a14      	ldr	r2, [pc, #80]	; (8000650 <HAL_MspInit+0x5c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6193      	str	r3, [r2, #24]
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_MspInit+0x5c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_MspInit+0x5c>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <HAL_MspInit+0x5c>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_MspInit+0x5c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_MspInit+0x60>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <HAL_MspInit+0x60>)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000
 8000654:	40010000 	.word	0x40010000

08000658 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <HAL_SPI_MspInit+0x88>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d12f      	bne.n	80006d8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <HAL_SPI_MspInit+0x8c>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a19      	ldr	r2, [pc, #100]	; (80006e4 <HAL_SPI_MspInit+0x8c>)
 800067e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <HAL_SPI_MspInit+0x8c>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_SPI_MspInit+0x8c>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <HAL_SPI_MspInit+0x8c>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <HAL_SPI_MspInit+0x8c>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006a8:	23a0      	movs	r3, #160	; 0xa0
 80006aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4619      	mov	r1, r3
 80006ba:	480b      	ldr	r0, [pc, #44]	; (80006e8 <HAL_SPI_MspInit+0x90>)
 80006bc:	f000 ffb4 	bl	8001628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006c0:	2340      	movs	r3, #64	; 0x40
 80006c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <HAL_SPI_MspInit+0x90>)
 80006d4:	f000 ffa8 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40013000 	.word	0x40013000
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010800 	.word	0x40010800

080006ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <HAL_UART_MspInit+0x8c>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d131      	bne.n	8000770 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <HAL_UART_MspInit+0x90>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a1a      	ldr	r2, [pc, #104]	; (800077c <HAL_UART_MspInit+0x90>)
 8000712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <HAL_UART_MspInit+0x90>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <HAL_UART_MspInit+0x90>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a14      	ldr	r2, [pc, #80]	; (800077c <HAL_UART_MspInit+0x90>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_UART_MspInit+0x90>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0304 	and.w	r3, r3, #4
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800073c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000740:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	f107 0310 	add.w	r3, r7, #16
 800074e:	4619      	mov	r1, r3
 8000750:	480b      	ldr	r0, [pc, #44]	; (8000780 <HAL_UART_MspInit+0x94>)
 8000752:	f000 ff69 	bl	8001628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800075a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	4619      	mov	r1, r3
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <HAL_UART_MspInit+0x94>)
 800076c:	f000 ff5c 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000770:	bf00      	nop
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40013800 	.word	0x40013800
 800077c:	40021000 	.word	0x40021000
 8000780:	40010800 	.word	0x40010800

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <HardFault_Handler+0x4>

08000796 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <MemManage_Handler+0x4>

0800079c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <BusFault_Handler+0x4>

080007a2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <UsageFault_Handler+0x4>

080007a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d0:	f000 fe08 	bl	80013e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_sbrk>:
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <_sbrk+0x50>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d102      	bne.n	80007ee <_sbrk+0x16>
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <_sbrk+0x50>)
 80007ea:	4a10      	ldr	r2, [pc, #64]	; (800082c <_sbrk+0x54>)
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <_sbrk+0x50>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <_sbrk+0x50>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4413      	add	r3, r2
 80007fc:	466a      	mov	r2, sp
 80007fe:	4293      	cmp	r3, r2
 8000800:	d907      	bls.n	8000812 <_sbrk+0x3a>
 8000802:	f002 f8d3 	bl	80029ac <__errno>
 8000806:	4602      	mov	r2, r0
 8000808:	230c      	movs	r3, #12
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	e006      	b.n	8000820 <_sbrk+0x48>
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <_sbrk+0x50>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	4a03      	ldr	r2, [pc, #12]	; (8000828 <_sbrk+0x50>)
 800081c:	6013      	str	r3, [r2, #0]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	4618      	mov	r0, r3
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000090 	.word	0x20000090
 800082c:	20000178 	.word	0x20000178

08000830 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <SystemInit+0x5c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a14      	ldr	r2, [pc, #80]	; (800088c <SystemInit+0x5c>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <SystemInit+0x5c>)
 8000842:	685a      	ldr	r2, [r3, #4]
 8000844:	4911      	ldr	r1, [pc, #68]	; (800088c <SystemInit+0x5c>)
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <SystemInit+0x60>)
 8000848:	4013      	ands	r3, r2
 800084a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <SystemInit+0x5c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a0e      	ldr	r2, [pc, #56]	; (800088c <SystemInit+0x5c>)
 8000852:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800085a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <SystemInit+0x5c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0a      	ldr	r2, [pc, #40]	; (800088c <SystemInit+0x5c>)
 8000862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000866:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <SystemInit+0x5c>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <SystemInit+0x5c>)
 800086e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000872:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <SystemInit+0x5c>)
 8000876:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800087a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <SystemInit+0x64>)
 800087e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000882:	609a      	str	r2, [r3, #8]
#endif 
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40021000 	.word	0x40021000
 8000890:	f8ff0000 	.word	0xf8ff0000
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b087      	sub	sp, #28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

    uint16 otp_xtaltrim_and_rev = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 80008a8:	4b9f      	ldr	r3, [pc, #636]	; (8000b28 <dwt_initialise+0x290>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2200      	movs	r2, #0
 80008ae:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80008b0:	4b9d      	ldr	r3, [pc, #628]	; (8000b28 <dwt_initialise+0x290>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2200      	movs	r2, #0
 80008b6:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80008b8:	4b9b      	ldr	r3, [pc, #620]	; (8000b28 <dwt_initialise+0x290>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2200      	movs	r2, #0
 80008be:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80008c0:	4b99      	ldr	r3, [pc, #612]	; (8000b28 <dwt_initialise+0x290>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80008c8:	4b97      	ldr	r3, [pc, #604]	; (8000b28 <dwt_initialise+0x290>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2200      	movs	r2, #0
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80008d0:	4b95      	ldr	r3, [pc, #596]	; (8000b28 <dwt_initialise+0x290>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2200      	movs	r2, #0
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80008d8:	4b93      	ldr	r3, [pc, #588]	; (8000b28 <dwt_initialise+0x290>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2200      	movs	r2, #0
 80008de:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80008e0:	f000 f926 	bl	8000b30 <dwt_readdevid>
 80008e4:	4602      	mov	r2, r0
 80008e6:	4b91      	ldr	r3, [pc, #580]	; (8000b2c <dwt_initialise+0x294>)
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d002      	beq.n	80008f2 <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	e115      	b.n	8000b1e <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f003 0302 	and.w	r3, r3, #2
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d101      	bne.n	8000900 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80008fc:	f000 fb56 	bl	8000fac <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	2b00      	cmp	r3, #0
 8000908:	d004      	beq.n	8000914 <dwt_initialise+0x7c>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000910:	2b00      	cmp	r3, #0
 8000912:	d102      	bne.n	800091a <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000914:	2000      	movs	r0, #0
 8000916:	f000 faa3 	bl	8000e60 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800091a:	2204      	movs	r2, #4
 800091c:	2100      	movs	r1, #0
 800091e:	2024      	movs	r0, #36	; 0x24
 8000920:	f000 fa08 	bl	8000d34 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	2b00      	cmp	r3, #0
 800092c:	d116      	bne.n	800095c <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800092e:	2004      	movs	r0, #4
 8000930:	f000 fa56 	bl	8000de0 <_dwt_otpread>
 8000934:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d01f      	beq.n	800097e <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800093e:	2202      	movs	r2, #2
 8000940:	2112      	movs	r1, #18
 8000942:	202d      	movs	r0, #45	; 0x2d
 8000944:	f000 f9f6 	bl	8000d34 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000948:	4b77      	ldr	r3, [pc, #476]	; (8000b28 <dwt_initialise+0x290>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	8ada      	ldrh	r2, [r3, #22]
 800094e:	4b76      	ldr	r3, [pc, #472]	; (8000b28 <dwt_initialise+0x290>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000956:	b292      	uxth	r2, r2
 8000958:	82da      	strh	r2, [r3, #22]
 800095a:	e010      	b.n	800097e <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800095c:	2130      	movs	r1, #48	; 0x30
 800095e:	2028      	movs	r0, #40	; 0x28
 8000960:	f000 f9a4 	bl	8000cac <dwt_read32bitoffsetreg>
 8000964:	4603      	mov	r3, r0
 8000966:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 800096a:	d008      	beq.n	800097e <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800096c:	4b6e      	ldr	r3, [pc, #440]	; (8000b28 <dwt_initialise+0x290>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	8ada      	ldrh	r2, [r3, #22]
 8000972:	4b6d      	ldr	r3, [pc, #436]	; (8000b28 <dwt_initialise+0x290>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800097a:	b292      	uxth	r2, r2
 800097c:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f003 0302 	and.w	r3, r3, #2
 8000984:	2b00      	cmp	r3, #0
 8000986:	d009      	beq.n	800099c <dwt_initialise+0x104>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	2b00      	cmp	r3, #0
 8000990:	d011      	beq.n	80009b6 <dwt_initialise+0x11e>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f003 0308 	and.w	r3, r3, #8
 8000998:	2b00      	cmp	r3, #0
 800099a:	d00c      	beq.n	80009b6 <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800099c:	201e      	movs	r0, #30
 800099e:	f000 fa1f 	bl	8000de0 <_dwt_otpread>
 80009a2:	4603      	mov	r3, r0
 80009a4:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80009a6:	8afb      	ldrh	r3, [r7, #22]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	4b5e      	ldr	r3, [pc, #376]	; (8000b28 <dwt_initialise+0x290>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	72da      	strb	r2, [r3, #11]
 80009b4:	e003      	b.n	80009be <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80009b6:	4b5c      	ldr	r3, [pc, #368]	; (8000b28 <dwt_initialise+0x290>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2200      	movs	r2, #0
 80009bc:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f003 0302 	and.w	r3, r3, #2
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d10b      	bne.n	80009e0 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80009c8:	8afb      	ldrh	r3, [r7, #22]
 80009ca:	f003 031f 	and.w	r3, r3, #31
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d101      	bne.n	80009d6 <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80009d2:	2310      	movs	r3, #16
 80009d4:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80009d6:	8afb      	ldrh	r3, [r7, #22]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fb0c 	bl	8000ff8 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d007      	beq.n	80009fa <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80009ea:	4b4f      	ldr	r3, [pc, #316]	; (8000b28 <dwt_initialise+0x290>)
 80009ec:	681c      	ldr	r4, [r3, #0]
 80009ee:	2006      	movs	r0, #6
 80009f0:	f000 f9f6 	bl	8000de0 <_dwt_otpread>
 80009f4:	4603      	mov	r3, r0
 80009f6:	6023      	str	r3, [r4, #0]
 80009f8:	e003      	b.n	8000a02 <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 80009fa:	4b4b      	ldr	r3, [pc, #300]	; (8000b28 <dwt_initialise+0x290>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f003 0320 	and.w	r3, r3, #32
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d007      	beq.n	8000a1c <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8000a0c:	4b46      	ldr	r3, [pc, #280]	; (8000b28 <dwt_initialise+0x290>)
 8000a0e:	681c      	ldr	r4, [r3, #0]
 8000a10:	2007      	movs	r0, #7
 8000a12:	f000 f9e5 	bl	8000de0 <_dwt_otpread>
 8000a16:	4603      	mov	r3, r0
 8000a18:	6063      	str	r3, [r4, #4]
 8000a1a:	e003      	b.n	8000a24 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8000a1c:	4b42      	ldr	r3, [pc, #264]	; (8000b28 <dwt_initialise+0x290>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d008      	beq.n	8000a40 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8000a2e:	2008      	movs	r0, #8
 8000a30:	f000 f9d6 	bl	8000de0 <_dwt_otpread>
 8000a34:	4602      	mov	r2, r0
 8000a36:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <dwt_initialise+0x290>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	721a      	strb	r2, [r3, #8]
 8000a3e:	e003      	b.n	8000a48 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8000a40:	4b39      	ldr	r3, [pc, #228]	; (8000b28 <dwt_initialise+0x290>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2200      	movs	r2, #0
 8000a46:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d008      	beq.n	8000a64 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8000a52:	2009      	movs	r0, #9
 8000a54:	f000 f9c4 	bl	8000de0 <_dwt_otpread>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	4b33      	ldr	r3, [pc, #204]	; (8000b28 <dwt_initialise+0x290>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	725a      	strb	r2, [r3, #9]
 8000a62:	e003      	b.n	8000a6c <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 8000a64:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <dwt_initialise+0x290>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d121      	bne.n	8000aba <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d00b      	beq.n	8000a98 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 8000a80:	f000 f9db 	bl	8000e3a <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8000a84:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <dwt_initialise+0x290>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	8ada      	ldrh	r2, [r3, #22]
 8000a8a:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <dwt_initialise+0x290>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a92:	b292      	uxth	r2, r2
 8000a94:	82da      	strh	r2, [r3, #22]
 8000a96:	e01e      	b.n	8000ad6 <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000a98:	2105      	movs	r1, #5
 8000a9a:	2036      	movs	r0, #54	; 0x36
 8000a9c:	f000 f92d 	bl	8000cfa <dwt_read16bitoffsetreg>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8000aa4:	89fb      	ldrh	r3, [r7, #14]
 8000aa6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000aaa:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8000aac:	89fb      	ldrh	r3, [r7, #14]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	2105      	movs	r1, #5
 8000ab2:	2036      	movs	r0, #54	; 0x36
 8000ab4:	f000 f951 	bl	8000d5a <dwt_write16bitoffsetreg>
 8000ab8:	e00d      	b.n	8000ad6 <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d108      	bne.n	8000ad6 <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <dwt_initialise+0x290>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	8ada      	ldrh	r2, [r3, #22]
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <dwt_initialise+0x290>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ad2:	b292      	uxth	r2, r2
 8000ad4:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 f9c2 	bl	8000e60 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8000adc:	2200      	movs	r2, #0
 8000ade:	210a      	movs	r1, #10
 8000ae0:	202c      	movs	r0, #44	; 0x2c
 8000ae2:	f000 f927 	bl	8000d34 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <dwt_initialise+0x290>)
 8000ae8:	681c      	ldr	r4, [r3, #0]
 8000aea:	2100      	movs	r1, #0
 8000aec:	2004      	movs	r0, #4
 8000aee:	f000 f8dd 	bl	8000cac <dwt_read32bitoffsetreg>
 8000af2:	4603      	mov	r3, r0
 8000af4:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <dwt_initialise+0x290>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	691b      	ldr	r3, [r3, #16]
 8000afc:	0c1b      	lsrs	r3, r3, #16
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <dwt_initialise+0x290>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f002 0203 	and.w	r2, r2, #3
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <dwt_initialise+0x290>)
 8000b0e:	681c      	ldr	r4, [r3, #0]
 8000b10:	2100      	movs	r1, #0
 8000b12:	2008      	movs	r0, #8
 8000b14:	f000 f8ca 	bl	8000cac <dwt_read32bitoffsetreg>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	60e3      	str	r3, [r4, #12]
    return DWT_SUCCESS ;
 8000b1c:	2300      	movs	r3, #0

} // end dwt_initialise()
 8000b1e:	4618      	mov	r0, r3
 8000b20:	371c      	adds	r7, #28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd90      	pop	{r4, r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000004 	.word	0x20000004
 8000b2c:	deca0130 	.word	0xdeca0130

08000b30 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000b34:	2100      	movs	r1, #0
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f8b8 	bl	8000cac <dwt_read32bitoffsetreg>
 8000b3c:	4603      	mov	r3, r0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60ba      	str	r2, [r7, #8]
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	81fb      	strh	r3, [r7, #14]
 8000b50:	460b      	mov	r3, r1
 8000b52:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000b58:	89bb      	ldrh	r3, [r7, #12]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d10d      	bne.n	8000b7a <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000b5e:	89fb      	ldrh	r3, [r7, #14]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	1c59      	adds	r1, r3, #1
 8000b66:	6179      	str	r1, [r7, #20]
 8000b68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	f107 0118 	add.w	r1, r7, #24
 8000b72:	440b      	add	r3, r1
 8000b74:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b78:	e033      	b.n	8000be2 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000b7a:	89fb      	ldrh	r3, [r7, #14]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	1c59      	adds	r1, r3, #1
 8000b82:	6179      	str	r1, [r7, #20]
 8000b84:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	f107 0118 	add.w	r1, r7, #24
 8000b8e:	440b      	add	r3, r1
 8000b90:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000b94:	89bb      	ldrh	r3, [r7, #12]
 8000b96:	2b7f      	cmp	r3, #127	; 0x7f
 8000b98:	d80a      	bhi.n	8000bb0 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	1c5a      	adds	r2, r3, #1
 8000b9e:	617a      	str	r2, [r7, #20]
 8000ba0:	89ba      	ldrh	r2, [r7, #12]
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	f107 0118 	add.w	r1, r7, #24
 8000ba8:	440b      	add	r3, r1
 8000baa:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000bae:	e018      	b.n	8000be2 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000bb0:	89bb      	ldrh	r3, [r7, #12]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	1c59      	adds	r1, r3, #1
 8000bb8:	6179      	str	r1, [r7, #20]
 8000bba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	f107 0118 	add.w	r1, r7, #24
 8000bc4:	440b      	add	r3, r1
 8000bc6:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000bca:	89bb      	ldrh	r3, [r7, #12]
 8000bcc:	09db      	lsrs	r3, r3, #7
 8000bce:	b299      	uxth	r1, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	617a      	str	r2, [r7, #20]
 8000bd6:	b2ca      	uxtb	r2, r1
 8000bd8:	f107 0118 	add.w	r1, r7, #24
 8000bdc:	440b      	add	r3, r1
 8000bde:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	b298      	uxth	r0, r3
 8000be6:	f107 0110 	add.w	r1, r7, #16
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	68ba      	ldr	r2, [r7, #8]
 8000bee:	f000 fa45 	bl	800107c <writetospi>
} // end dwt_writetodevice()
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60ba      	str	r2, [r7, #8]
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	4603      	mov	r3, r0
 8000c06:	81fb      	strh	r3, [r7, #14]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000c10:	89bb      	ldrh	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d10a      	bne.n	8000c2c <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	617a      	str	r2, [r7, #20]
 8000c1c:	89fa      	ldrh	r2, [r7, #14]
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	f107 0118 	add.w	r1, r7, #24
 8000c24:	440b      	add	r3, r1
 8000c26:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c2a:	e033      	b.n	8000c94 <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000c2c:	89fb      	ldrh	r3, [r7, #14]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	1c59      	adds	r1, r3, #1
 8000c34:	6179      	str	r1, [r7, #20]
 8000c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	f107 0118 	add.w	r1, r7, #24
 8000c40:	440b      	add	r3, r1
 8000c42:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000c46:	89bb      	ldrh	r3, [r7, #12]
 8000c48:	2b7f      	cmp	r3, #127	; 0x7f
 8000c4a:	d80a      	bhi.n	8000c62 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	617a      	str	r2, [r7, #20]
 8000c52:	89ba      	ldrh	r2, [r7, #12]
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	f107 0118 	add.w	r1, r7, #24
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c60:	e018      	b.n	8000c94 <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000c62:	89bb      	ldrh	r3, [r7, #12]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	1c59      	adds	r1, r3, #1
 8000c6a:	6179      	str	r1, [r7, #20]
 8000c6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	f107 0118 	add.w	r1, r7, #24
 8000c76:	440b      	add	r3, r1
 8000c78:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000c7c:	89bb      	ldrh	r3, [r7, #12]
 8000c7e:	09db      	lsrs	r3, r3, #7
 8000c80:	b299      	uxth	r1, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	1c5a      	adds	r2, r3, #1
 8000c86:	617a      	str	r2, [r7, #20]
 8000c88:	b2ca      	uxtb	r2, r1
 8000c8a:	f107 0118 	add.w	r1, r7, #24
 8000c8e:	440b      	add	r3, r1
 8000c90:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	b298      	uxth	r0, r3
 8000c98:	f107 0110 	add.w	r1, r7, #16
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f000 fa20 	bl	80010e4 <readfromspi>
} // end dwt_readfromdevice()
 8000ca4:	bf00      	nop
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	b298      	uxth	r0, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b299      	uxth	r1, r3
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	f7ff ff97 	bl	8000bfa <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000ccc:	2303      	movs	r3, #3
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	e00b      	b.n	8000cea <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	021b      	lsls	r3, r3, #8
 8000cd6:	f107 010c 	add.w	r1, r7, #12
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	440a      	add	r2, r1
 8000cde:	7812      	ldrb	r2, [r2, #0]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	daf0      	bge.n	8000cd2 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000cf0:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000d04:	2300      	movs	r3, #0
 8000d06:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	b298      	uxth	r0, r3
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b299      	uxth	r1, r3
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2202      	movs	r2, #2
 8000d16:	f7ff ff70 	bl	8000bfa <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000d1a:	7b7b      	ldrb	r3, [r7, #13]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	021b      	lsls	r3, r3, #8
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	7b3b      	ldrb	r3, [r7, #12]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	4413      	add	r3, r2
 8000d28:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000d2a:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	b298      	uxth	r0, r3
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	b299      	uxth	r1, r3
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f7ff fef8 	bl	8000b42 <dwt_writetodevice>
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	60f8      	str	r0, [r7, #12]
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	4613      	mov	r3, r2
 8000d66:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,&buffer);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	b298      	uxth	r0, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	b299      	uxth	r1, r3
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2202      	movs	r2, #2
 8000d86:	f7ff fedc 	bl	8000b42 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	e00d      	b.n	8000dc0 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	b2d9      	uxtb	r1, r3
 8000da8:	f107 0210 	add.w	r2, r7, #16
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	4413      	add	r3, r2
 8000db0:	460a      	mov	r2, r1
 8000db2:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	ddee      	ble.n	8000da4 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	b298      	uxth	r0, r3
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	b299      	uxth	r1, r3
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	f7ff feb5 	bl	8000b42 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	461a      	mov	r2, r3
 8000dee:	2104      	movs	r1, #4
 8000df0:	202d      	movs	r0, #45	; 0x2d
 8000df2:	f7ff ffb2 	bl	8000d5a <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000df6:	2203      	movs	r2, #3
 8000df8:	2106      	movs	r1, #6
 8000dfa:	202d      	movs	r0, #45	; 0x2d
 8000dfc:	f7ff ff9a 	bl	8000d34 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000e00:	2200      	movs	r2, #0
 8000e02:	2106      	movs	r1, #6
 8000e04:	202d      	movs	r0, #45	; 0x2d
 8000e06:	f7ff ff95 	bl	8000d34 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000e0a:	210a      	movs	r1, #10
 8000e0c:	202d      	movs	r0, #45	; 0x2d
 8000e0e:	f7ff ff4d 	bl	8000cac <dwt_read32bitoffsetreg>
 8000e12:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000e14:	68fb      	ldr	r3, [r7, #12]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000e22:	2200      	movs	r2, #0
 8000e24:	2102      	movs	r1, #2
 8000e26:	202c      	movs	r0, #44	; 0x2c
 8000e28:	f7ff ff84 	bl	8000d34 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	2102      	movs	r1, #2
 8000e30:	202c      	movs	r0, #44	; 0x2c
 8000e32:	f7ff ff7f 	bl	8000d34 <dwt_write8bitoffsetreg>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000e3e:	200e      	movs	r0, #14
 8000e40:	f000 f80e 	bl	8000e60 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000e44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e48:	2106      	movs	r1, #6
 8000e4a:	202d      	movs	r0, #45	; 0x2d
 8000e4c:	f7ff ff85 	bl	8000d5a <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000e50:	2001      	movs	r0, #1
 8000e52:	f000 f907 	bl	8001064 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000e56:	2001      	movs	r0, #1
 8000e58:	f000 f802 	bl	8000e60 <_dwt_enableclocks>
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2036      	movs	r0, #54	; 0x36
 8000e72:	f7ff fec2 	bl	8000bfa <dwt_readfromdevice>
    switch(clocks)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0e      	cmp	r3, #14
 8000e7a:	d876      	bhi.n	8000f6a <_dwt_enableclocks+0x10a>
 8000e7c:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <_dwt_enableclocks+0x24>)
 8000e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e82:	bf00      	nop
 8000e84:	08000ed1 	.word	0x08000ed1
 8000e88:	08000ec1 	.word	0x08000ec1
 8000e8c:	08000ee7 	.word	0x08000ee7
 8000e90:	08000f6b 	.word	0x08000f6b
 8000e94:	08000f6b 	.word	0x08000f6b
 8000e98:	08000f6b 	.word	0x08000f6b
 8000e9c:	08000f6b 	.word	0x08000f6b
 8000ea0:	08000efd 	.word	0x08000efd
 8000ea4:	08000f1d 	.word	0x08000f1d
 8000ea8:	08000f6b 	.word	0x08000f6b
 8000eac:	08000f6b 	.word	0x08000f6b
 8000eb0:	08000f33 	.word	0x08000f33
 8000eb4:	08000f3f 	.word	0x08000f3f
 8000eb8:	08000f4b 	.word	0x08000f4b
 8000ebc:	08000f61 	.word	0x08000f61
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000ec4:	7b7b      	ldrb	r3, [r7, #13]
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000ece:	e04d      	b.n	8000f6c <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000ed0:	7b3b      	ldrb	r3, [r7, #12]
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	f023 0303 	bic.w	r3, r3, #3
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000ee4:	e042      	b.n	8000f6c <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000ee6:	7b3b      	ldrb	r3, [r7, #12]
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	f023 0303 	bic.w	r3, r3, #3
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000efa:	e037      	b.n	8000f6c <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000efc:	7b3b      	ldrb	r3, [r7, #12]
 8000efe:	b25b      	sxtb	r3, r3
 8000f00:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000f10:	7b7b      	ldrb	r3, [r7, #13]
 8000f12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f1a:	e027      	b.n	8000f6c <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000f1c:	7b3b      	ldrb	r3, [r7, #12]
 8000f1e:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000f26:	7b7b      	ldrb	r3, [r7, #13]
 8000f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f30:	e01c      	b.n	8000f6c <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000f32:	7b7b      	ldrb	r3, [r7, #13]
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f3c:	e016      	b.n	8000f6c <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8000f3e:	7b7b      	ldrb	r3, [r7, #13]
 8000f40:	f023 0302 	bic.w	r3, r3, #2
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f48:	e010      	b.n	8000f6c <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8000f4a:	7b3b      	ldrb	r3, [r7, #12]
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000f5e:	e005      	b.n	8000f6c <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8000f60:	2301      	movs	r3, #1
 8000f62:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8000f64:	2303      	movs	r3, #3
 8000f66:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f68:	e000      	b.n	8000f6c <_dwt_enableclocks+0x10c>
        default:
        break;
 8000f6a:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2201      	movs	r2, #1
 8000f72:	2100      	movs	r1, #0
 8000f74:	2036      	movs	r0, #54	; 0x36
 8000f76:	f7ff fde4 	bl	8000b42 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	3301      	adds	r3, #1
 8000f80:	2201      	movs	r2, #1
 8000f82:	2101      	movs	r1, #1
 8000f84:	2036      	movs	r0, #54	; 0x36
 8000f86:	f7ff fddc 	bl	8000b42 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop

08000f94 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff ff61 	bl	8000e60 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	2036      	movs	r0, #54	; 0x36
 8000fa4:	f7ff fed9 	bl	8000d5a <dwt_write16bitoffsetreg>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8000fb0:	f7ff fff0 	bl	8000f94 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	202c      	movs	r0, #44	; 0x2c
 8000fba:	f7ff fece 	bl	8000d5a <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2106      	movs	r1, #6
 8000fc2:	202c      	movs	r0, #44	; 0x2c
 8000fc4:	f7ff feb6 	bl	8000d34 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8000fc8:	f7ff ff29 	bl	8000e1e <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2103      	movs	r1, #3
 8000fd0:	2036      	movs	r0, #54	; 0x36
 8000fd2:	f7ff feaf 	bl	8000d34 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f000 f844 	bl	8001064 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8000fdc:	22f0      	movs	r2, #240	; 0xf0
 8000fde:	2103      	movs	r1, #3
 8000fe0:	2036      	movs	r0, #54	; 0x36
 8000fe2:	f7ff fea7 	bl	8000d34 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8000fe6:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <dwt_softreset+0x48>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2200      	movs	r2, #0
 8000fec:	755a      	strb	r2, [r3, #21]
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	f003 031f 	and.w	r3, r3, #31
 800100a:	b25b      	sxtb	r3, r3
 800100c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001010:	b25b      	sxtb	r3, r3
 8001012:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	461a      	mov	r2, r3
 8001018:	210e      	movs	r1, #14
 800101a:	202b      	movs	r0, #43	; 0x2b
 800101c:	f7ff fe8a 	bl	8000d34 <dwt_write8bitoffsetreg>
}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800102e:	f000 f965 	bl	80012fc <port_GetEXT_IRQStatus>
 8001032:	4603      	mov	r3, r0
 8001034:	607b      	str	r3, [r7, #4]

	if(s) {
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800103c:	f000 f950 	bl	80012e0 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001040:	687b      	ldr	r3, [r7, #4]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8001058:	f000 f949 	bl	80012ee <port_EnableEXT_IRQ>
	}
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f8df 	bl	8001230 <Sleep>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 800107c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8001080:	4683      	mov	fp, r0
 8001082:	468a      	mov	sl, r1
 8001084:	4691      	mov	r9, r2
 8001086:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001088:	f7ff ffce 	bl	8001028 <decamutexon>
 800108c:	4606      	mov	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800108e:	4d13      	ldr	r5, [pc, #76]	; (80010dc <writetospi+0x60>)
 8001090:	4628      	mov	r0, r5
 8001092:	f001 f9ec 	bl	800246e <HAL_SPI_GetState>
 8001096:	2801      	cmp	r0, #1
 8001098:	4604      	mov	r4, r0
 800109a:	d1f9      	bne.n	8001090 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800109c:	2200      	movs	r2, #0
 800109e:	2110      	movs	r1, #16
 80010a0:	480f      	ldr	r0, [pc, #60]	; (80010e0 <writetospi+0x64>)
 80010a2:	f000 fc1b 	bl	80018dc <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80010a6:	465a      	mov	r2, fp
 80010a8:	4651      	mov	r1, sl
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	480b      	ldr	r0, [pc, #44]	; (80010dc <writetospi+0x60>)
 80010b0:	f001 f8a9 	bl	8002206 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	fa1f f289 	uxth.w	r2, r9
 80010bc:	4641      	mov	r1, r8
 80010be:	4807      	ldr	r0, [pc, #28]	; (80010dc <writetospi+0x60>)
 80010c0:	f001 f8a1 	bl	8002206 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80010c4:	4622      	mov	r2, r4
 80010c6:	2110      	movs	r1, #16
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <writetospi+0x64>)
 80010ca:	f000 fc07 	bl	80018dc <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80010ce:	4630      	mov	r0, r6
 80010d0:	f7ff ffbb 	bl	800104a <decamutexoff>

    return 0;
} // end writetospi()
 80010d4:	2000      	movs	r0, #0
 80010d6:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 80010da:	bf00      	nop
 80010dc:	20000114 	.word	0x20000114
 80010e0:	40010800 	.word	0x40010800

080010e4 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 80010e4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80010e8:	4680      	mov	r8, r0
 80010ea:	460c      	mov	r4, r1
 80010ec:	4616      	mov	r6, r2
 80010ee:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    //stat = decamutexon() ;

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80010f0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001160 <readfromspi+0x7c>
 80010f4:	4648      	mov	r0, r9
 80010f6:	f001 f9ba 	bl	800246e <HAL_SPI_GetState>
 80010fa:	2801      	cmp	r0, #1
 80010fc:	d1fa      	bne.n	80010f4 <readfromspi+0x10>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80010fe:	2200      	movs	r2, #0
 8001100:	2110      	movs	r1, #16
 8001102:	4816      	ldr	r0, [pc, #88]	; (800115c <readfromspi+0x78>)
 8001104:	f000 fbea 	bl	80018dc <HAL_GPIO_WritePin>
    //usleep(5);
    /* Send header */
    for(i=0; i<headerLength; i++)
 8001108:	f1b8 0f00 	cmp.w	r8, #0
 800110c:	d00c      	beq.n	8001128 <readfromspi+0x44>
    {
        HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800110e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8001160 <readfromspi+0x7c>
 8001112:	44a0      	add	r8, r4
 8001114:	2201      	movs	r2, #1
 8001116:	4621      	mov	r1, r4
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
 800111c:	4414      	add	r4, r2
 800111e:	4648      	mov	r0, r9
 8001120:	f001 f871 	bl	8002206 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8001124:	4544      	cmp	r4, r8
 8001126:	d1f5      	bne.n	8001114 <readfromspi+0x30>



    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8001128:	b17e      	cbz	r6, 800114a <readfromspi+0x66>
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800112a:	2000      	movs	r0, #0
 800112c:	4c0c      	ldr	r4, [pc, #48]	; (8001160 <readfromspi+0x7c>)
 800112e:	19a9      	adds	r1, r5, r6
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	0796      	lsls	r6, r2, #30
 8001136:	d5fc      	bpl.n	8001132 <readfromspi+0x4e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001138:	60d8      	str	r0, [r3, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	07d2      	lsls	r2, r2, #31
 800113e:	d5fc      	bpl.n	800113a <readfromspi+0x56>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8001146:	428d      	cmp	r5, r1
 8001148:	d1f2      	bne.n	8001130 <readfromspi+0x4c>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800114a:	2201      	movs	r2, #1
 800114c:	2110      	movs	r1, #16
 800114e:	4803      	ldr	r0, [pc, #12]	; (800115c <readfromspi+0x78>)
 8001150:	f000 fbc4 	bl	80018dc <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
//
//	decamutexoff(stat);
//
//	return 0;
} // end readfromspi()
 8001154:	2000      	movs	r0, #0
 8001156:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800115a:	bf00      	nop
 800115c:	40010800 	.word	0x40010800
 8001160:	20000114 	.word	0x20000114

08001164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db0b      	blt.n	800118e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 021f 	and.w	r2, r3, #31
 800117c:	4906      	ldr	r1, [pc, #24]	; (8001198 <__NVIC_EnableIRQ+0x34>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	2001      	movs	r0, #1
 8001186:	fa00 f202 	lsl.w	r2, r0, r2
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	e000e100 	.word	0xe000e100

0800119c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db10      	blt.n	80011d0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4909      	ldr	r1, [pc, #36]	; (80011dc <__NVIC_DisableIRQ+0x40>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	3320      	adds	r3, #32
 80011c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011cc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
void usleep(useconds_t usec)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e012      	b.n	8001214 <usleep+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	e004      	b.n	80011fe <usleep+0x1e>
        {
            __NOP();
 80011f4:	bf00      	nop
            __NOP();
 80011f6:	bf00      	nop
        for(j=0;j<2;j++)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b01      	cmp	r3, #1
 8001202:	bfd4      	ite	le
 8001204:	2301      	movle	r3, #1
 8001206:	2300      	movgt	r3, #0
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f2      	bne.n	80011f4 <usleep+0x14>
    for(i=0;i<usec;i++)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3301      	adds	r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	bf8c      	ite	hi
 800121c:	2301      	movhi	r3, #1
 800121e:	2300      	movls	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1e3      	bne.n	80011ee <usleep+0xe>
        }
    }
}
 8001226:	bf00      	nop
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f8ef 	bl	800141c <HAL_Delay>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8001250:	4a0a      	ldr	r2, [pc, #40]	; (800127c <EXTI_GetITEnStatus+0x34>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	095b      	lsrs	r3, r3, #5
 8001256:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f003 031f 	and.w	r3, r3, #31
 8001260:	fa22 f303 	lsr.w	r3, r2, r3
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b00      	cmp	r3, #0
 800126a:	bf14      	ite	ne
 800126c:	2301      	movne	r3, #1
 800126e:	2300      	moveq	r3, #0
 8001270:	b2db      	uxtb	r3, r3
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100

08001280 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 8001286:	2308      	movs	r3, #8
 8001288:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2302      	movs	r3, #2
 8001290:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001292:	463b      	mov	r3, r7
 8001294:	4619      	mov	r1, r3
 8001296:	480b      	ldr	r0, [pc, #44]	; (80012c4 <reset_DW1000+0x44>)
 8001298:	f000 f9c6 	bl	8001628 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2108      	movs	r1, #8
 80012a0:	4808      	ldr	r0, [pc, #32]	; (80012c4 <reset_DW1000+0x44>)
 80012a2:	f000 fb1b 	bl	80018dc <HAL_GPIO_WritePin>

    usleep(1);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff ff9a 	bl	80011e0 <usleep>

    //put the pin back to output open-drain (not active)
    //setup_DW1000RSTnIRQ(0);
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2108      	movs	r1, #8
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <reset_DW1000+0x44>)
 80012b2:	f000 fb13 	bl	80018dc <HAL_GPIO_WritePin>

    Sleep(2);
 80012b6:	2002      	movs	r0, #2
 80012b8:	f7ff ffba 	bl	8001230 <Sleep>
}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40010800 	.word	0x40010800

080012c8 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <port_set_dw1000_slowrate+0x14>)
 80012ce:	2238      	movs	r2, #56	; 0x38
 80012d0:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 80012d2:	4802      	ldr	r0, [pc, #8]	; (80012dc <port_set_dw1000_slowrate+0x14>)
 80012d4:	f000 ff36 	bl	8002144 <HAL_SPI_Init>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000114 	.word	0x20000114

080012e0 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 80012e4:	2017      	movs	r0, #23
 80012e6:	f7ff ff59 	bl	800119c <__NVIC_DisableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}

080012ee <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 80012f2:	2017      	movs	r0, #23
 80012f4:	f7ff ff36 	bl	8001164 <__NVIC_EnableIRQ>
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8001300:	2017      	movs	r0, #23
 8001302:	f7ff ffa1 	bl	8001248 <EXTI_GetITEnStatus>
 8001306:	4603      	mov	r3, r0
}
 8001308:	4618      	mov	r0, r3
 800130a:	bd80      	pop	{r7, pc}

0800130c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800130c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800130e:	e003      	b.n	8001318 <LoopCopyDataInit>

08001310 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001312:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001314:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001316:	3104      	adds	r1, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001318:	480a      	ldr	r0, [pc, #40]	; (8001344 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800131c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800131e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001320:	d3f6      	bcc.n	8001310 <CopyDataInit>
  ldr r2, =_sbss
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001324:	e002      	b.n	800132c <LoopFillZerobss>

08001326 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001328:	f842 3b04 	str.w	r3, [r2], #4

0800132c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800132e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001330:	d3f9      	bcc.n	8001326 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001332:	f7ff fa7d 	bl	8000830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001336:	f001 fb3f 	bl	80029b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800133a:	f7fe ff89 	bl	8000250 <main>
  bx lr
 800133e:	4770      	bx	lr
  ldr r3, =_sidata
 8001340:	08003324 	.word	0x08003324
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001348:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 800134c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001350:	20000174 	.word	0x20000174

08001354 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001354:	e7fe      	b.n	8001354 <ADC1_2_IRQHandler>
	...

08001358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_Init+0x28>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_Init+0x28>)
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001368:	2003      	movs	r0, #3
 800136a:	f000 f929 	bl	80015c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136e:	2000      	movs	r0, #0
 8001370:	f000 f808 	bl	8001384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001374:	f7ff f93e 	bl	80005f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40022000 	.word	0x40022000

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_InitTick+0x54>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x58>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	fbb3 f3f1 	udiv	r3, r3, r1
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f933 	bl	800160e <HAL_SYSTICK_Config>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00e      	b.n	80013d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d80a      	bhi.n	80013ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b8:	2200      	movs	r2, #0
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f000 f909 	bl	80015d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_InitTick+0x5c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e000      	b.n	80013d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000000 	.word	0x20000000
 80013dc:	2000000c 	.word	0x2000000c
 80013e0:	20000008 	.word	0x20000008

080013e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_IncTick+0x1c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_IncTick+0x20>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a03      	ldr	r2, [pc, #12]	; (8001404 <HAL_IncTick+0x20>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	2000000c 	.word	0x2000000c
 8001404:	2000016c 	.word	0x2000016c

08001408 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b02      	ldr	r3, [pc, #8]	; (8001418 <HAL_GetTick+0x10>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	2000016c 	.word	0x2000016c

0800141c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff fff0 	bl	8001408 <HAL_GetTick>
 8001428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001434:	d005      	beq.n	8001442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_Delay+0x40>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001442:	bf00      	nop
 8001444:	f7ff ffe0 	bl	8001408 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	429a      	cmp	r2, r3
 8001452:	d8f7      	bhi.n	8001444 <HAL_Delay+0x28>
  {
  }
}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000000c 	.word	0x2000000c

08001460 <__NVIC_SetPriorityGrouping>:
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_GetPriorityGrouping>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	; (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	; (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800158c:	d301      	bcc.n	8001592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158e:	2301      	movs	r3, #1
 8001590:	e00f      	b.n	80015b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <SysTick_Config+0x40>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159a:	210f      	movs	r1, #15
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f7ff ff90 	bl	80014c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <SysTick_Config+0x40>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015aa:	4b04      	ldr	r3, [pc, #16]	; (80015bc <SysTick_Config+0x40>)
 80015ac:	2207      	movs	r2, #7
 80015ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	e000e010 	.word	0xe000e010

080015c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff49 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e8:	f7ff ff5e 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 80015ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	6978      	ldr	r0, [r7, #20]
 80015f4:	f7ff ff90 	bl	8001518 <NVIC_EncodePriority>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff5f 	bl	80014c4 <__NVIC_SetPriority>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffb0 	bl	800157c <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b08b      	sub	sp, #44	; 0x2c
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163a:	e127      	b.n	800188c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800163c:	2201      	movs	r2, #1
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	429a      	cmp	r2, r3
 8001656:	f040 8116 	bne.w	8001886 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b12      	cmp	r3, #18
 8001660:	d034      	beq.n	80016cc <HAL_GPIO_Init+0xa4>
 8001662:	2b12      	cmp	r3, #18
 8001664:	d80d      	bhi.n	8001682 <HAL_GPIO_Init+0x5a>
 8001666:	2b02      	cmp	r3, #2
 8001668:	d02b      	beq.n	80016c2 <HAL_GPIO_Init+0x9a>
 800166a:	2b02      	cmp	r3, #2
 800166c:	d804      	bhi.n	8001678 <HAL_GPIO_Init+0x50>
 800166e:	2b00      	cmp	r3, #0
 8001670:	d031      	beq.n	80016d6 <HAL_GPIO_Init+0xae>
 8001672:	2b01      	cmp	r3, #1
 8001674:	d01c      	beq.n	80016b0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001676:	e048      	b.n	800170a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001678:	2b03      	cmp	r3, #3
 800167a:	d043      	beq.n	8001704 <HAL_GPIO_Init+0xdc>
 800167c:	2b11      	cmp	r3, #17
 800167e:	d01b      	beq.n	80016b8 <HAL_GPIO_Init+0x90>
          break;
 8001680:	e043      	b.n	800170a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001682:	4a89      	ldr	r2, [pc, #548]	; (80018a8 <HAL_GPIO_Init+0x280>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d026      	beq.n	80016d6 <HAL_GPIO_Init+0xae>
 8001688:	4a87      	ldr	r2, [pc, #540]	; (80018a8 <HAL_GPIO_Init+0x280>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d806      	bhi.n	800169c <HAL_GPIO_Init+0x74>
 800168e:	4a87      	ldr	r2, [pc, #540]	; (80018ac <HAL_GPIO_Init+0x284>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d020      	beq.n	80016d6 <HAL_GPIO_Init+0xae>
 8001694:	4a86      	ldr	r2, [pc, #536]	; (80018b0 <HAL_GPIO_Init+0x288>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d01d      	beq.n	80016d6 <HAL_GPIO_Init+0xae>
          break;
 800169a:	e036      	b.n	800170a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800169c:	4a85      	ldr	r2, [pc, #532]	; (80018b4 <HAL_GPIO_Init+0x28c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d019      	beq.n	80016d6 <HAL_GPIO_Init+0xae>
 80016a2:	4a85      	ldr	r2, [pc, #532]	; (80018b8 <HAL_GPIO_Init+0x290>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d016      	beq.n	80016d6 <HAL_GPIO_Init+0xae>
 80016a8:	4a84      	ldr	r2, [pc, #528]	; (80018bc <HAL_GPIO_Init+0x294>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_GPIO_Init+0xae>
          break;
 80016ae:	e02c      	b.n	800170a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	623b      	str	r3, [r7, #32]
          break;
 80016b6:	e028      	b.n	800170a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	3304      	adds	r3, #4
 80016be:	623b      	str	r3, [r7, #32]
          break;
 80016c0:	e023      	b.n	800170a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	3308      	adds	r3, #8
 80016c8:	623b      	str	r3, [r7, #32]
          break;
 80016ca:	e01e      	b.n	800170a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	330c      	adds	r3, #12
 80016d2:	623b      	str	r3, [r7, #32]
          break;
 80016d4:	e019      	b.n	800170a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016de:	2304      	movs	r3, #4
 80016e0:	623b      	str	r3, [r7, #32]
          break;
 80016e2:	e012      	b.n	800170a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ec:	2308      	movs	r3, #8
 80016ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	611a      	str	r2, [r3, #16]
          break;
 80016f6:	e008      	b.n	800170a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f8:	2308      	movs	r3, #8
 80016fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	615a      	str	r2, [r3, #20]
          break;
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
          break;
 8001708:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2bff      	cmp	r3, #255	; 0xff
 800170e:	d801      	bhi.n	8001714 <HAL_GPIO_Init+0xec>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	e001      	b.n	8001718 <HAL_GPIO_Init+0xf0>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3304      	adds	r3, #4
 8001718:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	2bff      	cmp	r3, #255	; 0xff
 800171e:	d802      	bhi.n	8001726 <HAL_GPIO_Init+0xfe>
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	e002      	b.n	800172c <HAL_GPIO_Init+0x104>
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	3b08      	subs	r3, #8
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	210f      	movs	r1, #15
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	401a      	ands	r2, r3
 800173e:	6a39      	ldr	r1, [r7, #32]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	431a      	orrs	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 8096 	beq.w	8001886 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800175a:	4b59      	ldr	r3, [pc, #356]	; (80018c0 <HAL_GPIO_Init+0x298>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	4a58      	ldr	r2, [pc, #352]	; (80018c0 <HAL_GPIO_Init+0x298>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6193      	str	r3, [r2, #24]
 8001766:	4b56      	ldr	r3, [pc, #344]	; (80018c0 <HAL_GPIO_Init+0x298>)
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001772:	4a54      	ldr	r2, [pc, #336]	; (80018c4 <HAL_GPIO_Init+0x29c>)
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	3302      	adds	r3, #2
 800177a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	220f      	movs	r2, #15
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4013      	ands	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4b      	ldr	r2, [pc, #300]	; (80018c8 <HAL_GPIO_Init+0x2a0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d013      	beq.n	80017c6 <HAL_GPIO_Init+0x19e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4a      	ldr	r2, [pc, #296]	; (80018cc <HAL_GPIO_Init+0x2a4>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d00d      	beq.n	80017c2 <HAL_GPIO_Init+0x19a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a49      	ldr	r2, [pc, #292]	; (80018d0 <HAL_GPIO_Init+0x2a8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d007      	beq.n	80017be <HAL_GPIO_Init+0x196>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a48      	ldr	r2, [pc, #288]	; (80018d4 <HAL_GPIO_Init+0x2ac>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <HAL_GPIO_Init+0x192>
 80017b6:	2303      	movs	r3, #3
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x1a0>
 80017ba:	2304      	movs	r3, #4
 80017bc:	e004      	b.n	80017c8 <HAL_GPIO_Init+0x1a0>
 80017be:	2302      	movs	r3, #2
 80017c0:	e002      	b.n	80017c8 <HAL_GPIO_Init+0x1a0>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_GPIO_Init+0x1a0>
 80017c6:	2300      	movs	r3, #0
 80017c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ca:	f002 0203 	and.w	r2, r2, #3
 80017ce:	0092      	lsls	r2, r2, #2
 80017d0:	4093      	lsls	r3, r2
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017d8:	493a      	ldr	r1, [pc, #232]	; (80018c4 <HAL_GPIO_Init+0x29c>)
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3302      	adds	r3, #2
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4938      	ldr	r1, [pc, #224]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
 80017fe:	e006      	b.n	800180e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001800:	4b35      	ldr	r3, [pc, #212]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	43db      	mvns	r3, r3
 8001808:	4933      	ldr	r1, [pc, #204]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 800180a:	4013      	ands	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800181a:	4b2f      	ldr	r3, [pc, #188]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	492e      	ldr	r1, [pc, #184]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
 8001826:	e006      	b.n	8001836 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	43db      	mvns	r3, r3
 8001830:	4929      	ldr	r1, [pc, #164]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001832:	4013      	ands	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001842:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	4924      	ldr	r1, [pc, #144]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
 800184e:	e006      	b.n	800185e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	43db      	mvns	r3, r3
 8001858:	491f      	ldr	r1, [pc, #124]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 800185a:	4013      	ands	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	491a      	ldr	r1, [pc, #104]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	60cb      	str	r3, [r1, #12]
 8001876:	e006      	b.n	8001886 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	43db      	mvns	r3, r3
 8001880:	4915      	ldr	r1, [pc, #84]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001882:	4013      	ands	r3, r2
 8001884:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	3301      	adds	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	f47f aed0 	bne.w	800163c <HAL_GPIO_Init+0x14>
  }
}
 800189c:	bf00      	nop
 800189e:	372c      	adds	r7, #44	; 0x2c
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	10210000 	.word	0x10210000
 80018ac:	10110000 	.word	0x10110000
 80018b0:	10120000 	.word	0x10120000
 80018b4:	10310000 	.word	0x10310000
 80018b8:	10320000 	.word	0x10320000
 80018bc:	10220000 	.word	0x10220000
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40010000 	.word	0x40010000
 80018c8:	40010800 	.word	0x40010800
 80018cc:	40010c00 	.word	0x40010c00
 80018d0:	40011000 	.word	0x40011000
 80018d4:	40011400 	.word	0x40011400
 80018d8:	40010400 	.word	0x40010400

080018dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
 80018e8:	4613      	mov	r3, r2
 80018ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018ec:	787b      	ldrb	r3, [r7, #1]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018f8:	e003      	b.n	8001902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018fa:	887b      	ldrh	r3, [r7, #2]
 80018fc:	041a      	lsls	r2, r3, #16
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	611a      	str	r2, [r3, #16]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e26c      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8087 	beq.w	8001a3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800192c:	4b92      	ldr	r3, [pc, #584]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b04      	cmp	r3, #4
 8001936:	d00c      	beq.n	8001952 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001938:	4b8f      	ldr	r3, [pc, #572]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b08      	cmp	r3, #8
 8001942:	d112      	bne.n	800196a <HAL_RCC_OscConfig+0x5e>
 8001944:	4b8c      	ldr	r3, [pc, #560]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001950:	d10b      	bne.n	800196a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001952:	4b89      	ldr	r3, [pc, #548]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d06c      	beq.n	8001a38 <HAL_RCC_OscConfig+0x12c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d168      	bne.n	8001a38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e246      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x76>
 8001974:	4b80      	ldr	r3, [pc, #512]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a7f      	ldr	r2, [pc, #508]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800197a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	e02e      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x98>
 800198a:	4b7b      	ldr	r3, [pc, #492]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a7a      	ldr	r2, [pc, #488]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b78      	ldr	r3, [pc, #480]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a77      	ldr	r2, [pc, #476]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800199c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e01d      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0xbc>
 80019ae:	4b72      	ldr	r3, [pc, #456]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a71      	ldr	r2, [pc, #452]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b6f      	ldr	r3, [pc, #444]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a6e      	ldr	r2, [pc, #440]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e00b      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 80019c8:	4b6b      	ldr	r3, [pc, #428]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a6a      	ldr	r2, [pc, #424]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b68      	ldr	r3, [pc, #416]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a67      	ldr	r2, [pc, #412]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d013      	beq.n	8001a10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff fd0e 	bl	8001408 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff fd0a 	bl	8001408 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e1fa      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	4b5d      	ldr	r3, [pc, #372]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0xe4>
 8001a0e:	e014      	b.n	8001a3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff fcfa 	bl	8001408 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a18:	f7ff fcf6 	bl	8001408 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	; 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e1e6      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2a:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x10c>
 8001a36:	e000      	b.n	8001a3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d063      	beq.n	8001b0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a46:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00b      	beq.n	8001a6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a52:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d11c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x18c>
 8001a5e:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d116      	bne.n	8001a98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6a:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d005      	beq.n	8001a82 <HAL_RCC_OscConfig+0x176>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d001      	beq.n	8001a82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e1ba      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a82:	4b3d      	ldr	r3, [pc, #244]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4939      	ldr	r1, [pc, #228]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a96:	e03a      	b.n	8001b0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d020      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa0:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff fcaf 	bl	8001408 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aae:	f7ff fcab 	bl	8001408 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e19b      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac0:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001acc:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4927      	ldr	r1, [pc, #156]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]
 8001ae0:	e015      	b.n	8001b0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fc8e 	bl	8001408 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af0:	f7ff fc8a 	bl	8001408 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e17a      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d03a      	beq.n	8001b90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d019      	beq.n	8001b56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_RCC_OscConfig+0x274>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b28:	f7ff fc6e 	bl	8001408 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b30:	f7ff fc6a 	bl	8001408 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e15a      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f000 fada 	bl	8002108 <RCC_Delay>
 8001b54:	e01c      	b.n	8001b90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_RCC_OscConfig+0x274>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5c:	f7ff fc54 	bl	8001408 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b62:	e00f      	b.n	8001b84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b64:	f7ff fc50 	bl	8001408 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d908      	bls.n	8001b84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e140      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	42420000 	.word	0x42420000
 8001b80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b84:	4b9e      	ldr	r3, [pc, #632]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1e9      	bne.n	8001b64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80a6 	beq.w	8001cea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba2:	4b97      	ldr	r3, [pc, #604]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10d      	bne.n	8001bca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	4b94      	ldr	r3, [pc, #592]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a93      	ldr	r2, [pc, #588]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	61d3      	str	r3, [r2, #28]
 8001bba:	4b91      	ldr	r3, [pc, #580]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	4b8e      	ldr	r3, [pc, #568]	; (8001e04 <HAL_RCC_OscConfig+0x4f8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d118      	bne.n	8001c08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd6:	4b8b      	ldr	r3, [pc, #556]	; (8001e04 <HAL_RCC_OscConfig+0x4f8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a8a      	ldr	r2, [pc, #552]	; (8001e04 <HAL_RCC_OscConfig+0x4f8>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be2:	f7ff fc11 	bl	8001408 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bea:	f7ff fc0d 	bl	8001408 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b64      	cmp	r3, #100	; 0x64
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e0fd      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	4b81      	ldr	r3, [pc, #516]	; (8001e04 <HAL_RCC_OscConfig+0x4f8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_OscConfig+0x312>
 8001c10:	4b7b      	ldr	r3, [pc, #492]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4a7a      	ldr	r2, [pc, #488]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6213      	str	r3, [r2, #32]
 8001c1c:	e02d      	b.n	8001c7a <HAL_RCC_OscConfig+0x36e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x334>
 8001c26:	4b76      	ldr	r3, [pc, #472]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a75      	ldr	r2, [pc, #468]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6213      	str	r3, [r2, #32]
 8001c32:	4b73      	ldr	r3, [pc, #460]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a72      	ldr	r2, [pc, #456]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	f023 0304 	bic.w	r3, r3, #4
 8001c3c:	6213      	str	r3, [r2, #32]
 8001c3e:	e01c      	b.n	8001c7a <HAL_RCC_OscConfig+0x36e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	d10c      	bne.n	8001c62 <HAL_RCC_OscConfig+0x356>
 8001c48:	4b6d      	ldr	r3, [pc, #436]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4a6c      	ldr	r2, [pc, #432]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	6213      	str	r3, [r2, #32]
 8001c54:	4b6a      	ldr	r3, [pc, #424]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4a69      	ldr	r2, [pc, #420]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6213      	str	r3, [r2, #32]
 8001c60:	e00b      	b.n	8001c7a <HAL_RCC_OscConfig+0x36e>
 8001c62:	4b67      	ldr	r3, [pc, #412]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	4a66      	ldr	r2, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6213      	str	r3, [r2, #32]
 8001c6e:	4b64      	ldr	r3, [pc, #400]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4a63      	ldr	r2, [pc, #396]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d015      	beq.n	8001cae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7ff fbc1 	bl	8001408 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff fbbd 	bl	8001408 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0ab      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca0:	4b57      	ldr	r3, [pc, #348]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ee      	beq.n	8001c8a <HAL_RCC_OscConfig+0x37e>
 8001cac:	e014      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7ff fbab 	bl	8001408 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7ff fba7 	bl	8001408 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e095      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ccc:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1ee      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d105      	bne.n	8001cea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cde:	4b48      	ldr	r3, [pc, #288]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a47      	ldr	r2, [pc, #284]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8081 	beq.w	8001df6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf4:	4b42      	ldr	r3, [pc, #264]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d061      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d146      	bne.n	8001d96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d08:	4b3f      	ldr	r3, [pc, #252]	; (8001e08 <HAL_RCC_OscConfig+0x4fc>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fb7b 	bl	8001408 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7ff fb77 	bl	8001408 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e067      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d28:	4b35      	ldr	r3, [pc, #212]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d108      	bne.n	8001d50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d3e:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	492d      	ldr	r1, [pc, #180]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a19      	ldr	r1, [r3, #32]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	430b      	orrs	r3, r1
 8001d62:	4927      	ldr	r1, [pc, #156]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_RCC_OscConfig+0x4fc>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7ff fb4b 	bl	8001408 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d76:	f7ff fb47 	bl	8001408 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e037      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x46a>
 8001d94:	e02f      	b.n	8001df6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <HAL_RCC_OscConfig+0x4fc>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fb34 	bl	8001408 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da4:	f7ff fb30 	bl	8001408 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e020      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x498>
 8001dc2:	e018      	b.n	8001df6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e013      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40007000 	.word	0x40007000
 8001e08:	42420060 	.word	0x42420060

08001e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0d0      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e20:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d910      	bls.n	8001e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 0207 	bic.w	r2, r3, #7
 8001e36:	4965      	ldr	r1, [pc, #404]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b63      	ldr	r3, [pc, #396]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0b8      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d020      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e68:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e80:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4a52      	ldr	r2, [pc, #328]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8c:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	494d      	ldr	r1, [pc, #308]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d040      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d107      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d115      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e07f      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d107      	bne.n	8001eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eca:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e073      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eda:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e06b      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eea:	4b39      	ldr	r3, [pc, #228]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f023 0203 	bic.w	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4936      	ldr	r1, [pc, #216]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001efc:	f7ff fa84 	bl	8001408 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f04:	f7ff fa80 	bl	8001408 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e053      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 020c 	and.w	r2, r3, #12
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d1eb      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d210      	bcs.n	8001f5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0207 	bic.w	r2, r3, #7
 8001f42:	4922      	ldr	r1, [pc, #136]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e032      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4916      	ldr	r1, [pc, #88]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d009      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	490e      	ldr	r1, [pc, #56]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f9a:	f000 f821 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8001f9e:	4601      	mov	r1, r0
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fac:	5cd3      	ldrb	r3, [r2, r3]
 8001fae:	fa21 f303 	lsr.w	r3, r1, r3
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_RCC_ClockConfig+0x1d0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff f9e2 	bl	8001384 <HAL_InitTick>

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40022000 	.word	0x40022000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	080032d0 	.word	0x080032d0
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	20000008 	.word	0x20000008

08001fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe0:	b490      	push	{r4, r7}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fe8:	1d3c      	adds	r4, r7, #4
 8001fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ff0:	4b28      	ldr	r3, [pc, #160]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800200a:	4b23      	ldr	r3, [pc, #140]	; (8002098 <HAL_RCC_GetSysClockFreq+0xb8>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b04      	cmp	r3, #4
 8002018:	d002      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x40>
 800201a:	2b08      	cmp	r3, #8
 800201c:	d003      	beq.n	8002026 <HAL_RCC_GetSysClockFreq+0x46>
 800201e:	e02d      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002020:	4b1e      	ldr	r3, [pc, #120]	; (800209c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002022:	623b      	str	r3, [r7, #32]
      break;
 8002024:	e02d      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	0c9b      	lsrs	r3, r3, #18
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002032:	4413      	add	r3, r2
 8002034:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002038:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	0c5b      	lsrs	r3, r3, #17
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002052:	4413      	add	r3, r2
 8002054:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002058:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	4a0f      	ldr	r2, [pc, #60]	; (800209c <HAL_RCC_GetSysClockFreq+0xbc>)
 800205e:	fb02 f203 	mul.w	r2, r2, r3
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	fbb2 f3f3 	udiv	r3, r2, r3
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
 800206a:	e004      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002070:	fb02 f303 	mul.w	r3, r2, r3
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	623b      	str	r3, [r7, #32]
      break;
 800207a:	e002      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <HAL_RCC_GetSysClockFreq+0xbc>)
 800207e:	623b      	str	r3, [r7, #32]
      break;
 8002080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002082:	6a3b      	ldr	r3, [r7, #32]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3728      	adds	r7, #40	; 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bc90      	pop	{r4, r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	080032bc 	.word	0x080032bc
 8002094:	080032cc 	.word	0x080032cc
 8002098:	40021000 	.word	0x40021000
 800209c:	007a1200 	.word	0x007a1200
 80020a0:	003d0900 	.word	0x003d0900

080020a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a8:	4b02      	ldr	r3, [pc, #8]	; (80020b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80020aa:	681b      	ldr	r3, [r3, #0]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	20000000 	.word	0x20000000

080020b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020bc:	f7ff fff2 	bl	80020a4 <HAL_RCC_GetHCLKFreq>
 80020c0:	4601      	mov	r1, r0
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	0a1b      	lsrs	r3, r3, #8
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4a03      	ldr	r2, [pc, #12]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	080032e0 	.word	0x080032e0

080020e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020e4:	f7ff ffde 	bl	80020a4 <HAL_RCC_GetHCLKFreq>
 80020e8:	4601      	mov	r1, r0
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	0adb      	lsrs	r3, r3, #11
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	4a03      	ldr	r2, [pc, #12]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	080032e0 	.word	0x080032e0

08002108 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <RCC_Delay+0x34>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <RCC_Delay+0x38>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	0a5b      	lsrs	r3, r3, #9
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002124:	bf00      	nop
  }
  while (Delay --);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1e5a      	subs	r2, r3, #1
 800212a:	60fa      	str	r2, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f9      	bne.n	8002124 <RCC_Delay+0x1c>
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000000 	.word	0x20000000
 8002140:	10624dd3 	.word	0x10624dd3

08002144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e053      	b.n	80021fe <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d106      	bne.n	8002176 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7fe fa71 	bl	8000658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800218c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	ea42 0103 	orr.w	r1, r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	0c1a      	lsrs	r2, r3, #16
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f002 0204 	and.w	r2, r2, #4
 80021dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69da      	ldr	r2, [r3, #28]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b088      	sub	sp, #32
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	4613      	mov	r3, r2
 8002214:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_SPI_Transmit+0x22>
 8002224:	2302      	movs	r3, #2
 8002226:	e11e      	b.n	8002466 <HAL_SPI_Transmit+0x260>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002230:	f7ff f8ea 	bl	8001408 <HAL_GetTick>
 8002234:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d002      	beq.n	800224c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002246:	2302      	movs	r3, #2
 8002248:	77fb      	strb	r3, [r7, #31]
    goto error;
 800224a:	e103      	b.n	8002454 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <HAL_SPI_Transmit+0x52>
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d102      	bne.n	800225e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800225c:	e0fa      	b.n	8002454 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2203      	movs	r2, #3
 8002262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	88fa      	ldrh	r2, [r7, #6]
 800227c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022a4:	d107      	bne.n	80022b6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c0:	2b40      	cmp	r3, #64	; 0x40
 80022c2:	d007      	beq.n	80022d4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022dc:	d14b      	bne.n	8002376 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_SPI_Transmit+0xe6>
 80022e6:	8afb      	ldrh	r3, [r7, #22]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d13e      	bne.n	800236a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	881a      	ldrh	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	1c9a      	adds	r2, r3, #2
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002310:	e02b      	b.n	800236a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b02      	cmp	r3, #2
 800231e:	d112      	bne.n	8002346 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	881a      	ldrh	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	1c9a      	adds	r2, r3, #2
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	86da      	strh	r2, [r3, #54]	; 0x36
 8002344:	e011      	b.n	800236a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002346:	f7ff f85f 	bl	8001408 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d803      	bhi.n	800235e <HAL_SPI_Transmit+0x158>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d102      	bne.n	8002364 <HAL_SPI_Transmit+0x15e>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002368:	e074      	b.n	8002454 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1ce      	bne.n	8002312 <HAL_SPI_Transmit+0x10c>
 8002374:	e04c      	b.n	8002410 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_SPI_Transmit+0x17e>
 800237e:	8afb      	ldrh	r3, [r7, #22]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d140      	bne.n	8002406 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	330c      	adds	r3, #12
 800238e:	7812      	ldrb	r2, [r2, #0]
 8002390:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023aa:	e02c      	b.n	8002406 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d113      	bne.n	80023e2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	330c      	adds	r3, #12
 80023c4:	7812      	ldrb	r2, [r2, #0]
 80023c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	86da      	strh	r2, [r3, #54]	; 0x36
 80023e0:	e011      	b.n	8002406 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023e2:	f7ff f811 	bl	8001408 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d803      	bhi.n	80023fa <HAL_SPI_Transmit+0x1f4>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d102      	bne.n	8002400 <HAL_SPI_Transmit+0x1fa>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002404:	e026      	b.n	8002454 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1cd      	bne.n	80023ac <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	6839      	ldr	r1, [r7, #0]
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 f8a1 	bl	800255c <SPI_EndRxTxTransaction>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10a      	bne.n	8002444 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	77fb      	strb	r3, [r7, #31]
 8002450:	e000      	b.n	8002454 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002452:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002464:	7ffb      	ldrb	r3, [r7, #31]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800247c:	b2db      	uxtb	r3, r3
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002498:	e04c      	b.n	8002534 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d048      	beq.n	8002534 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80024a2:	f7fe ffb1 	bl	8001408 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d902      	bls.n	80024b8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d13d      	bne.n	8002534 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024d0:	d111      	bne.n	80024f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024da:	d004      	beq.n	80024e6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e4:	d107      	bne.n	80024f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024fe:	d10f      	bne.n	8002520 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800251e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e00f      	b.n	8002554 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	4013      	ands	r3, r2
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	429a      	cmp	r2, r3
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	429a      	cmp	r2, r3
 8002550:	d1a3      	bne.n	800249a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2200      	movs	r2, #0
 8002570:	2180      	movs	r1, #128	; 0x80
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff ff88 	bl	8002488 <SPI_WaitFlagStateUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	f043 0220 	orr.w	r2, r3, #32
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e000      	b.n	8002590 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e03f      	b.n	800262a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe f894 	bl	80006ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2224      	movs	r2, #36	; 0x24
 80025c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f90b 	bl	80027f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002600:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002610:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b088      	sub	sp, #32
 8002636:	af02      	add	r7, sp, #8
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	4613      	mov	r3, r2
 8002640:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b20      	cmp	r3, #32
 8002650:	f040 8083 	bne.w	800275a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_UART_Transmit+0x2e>
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e07b      	b.n	800275c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_UART_Transmit+0x40>
 800266e:	2302      	movs	r3, #2
 8002670:	e074      	b.n	800275c <HAL_UART_Transmit+0x12a>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2221      	movs	r2, #33	; 0x21
 8002684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002688:	f7fe febe 	bl	8001408 <HAL_GetTick>
 800268c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	88fa      	ldrh	r2, [r7, #6]
 8002692:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800269a:	e042      	b.n	8002722 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b2:	d122      	bne.n	80026fa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2200      	movs	r2, #0
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f850 	bl	8002764 <UART_WaitOnFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e046      	b.n	800275c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d103      	bne.n	80026f2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3302      	adds	r3, #2
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	e017      	b.n	8002722 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	3301      	adds	r3, #1
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	e013      	b.n	8002722 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2200      	movs	r2, #0
 8002702:	2180      	movs	r1, #128	; 0x80
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 f82d 	bl	8002764 <UART_WaitOnFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e023      	b.n	800275c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	60ba      	str	r2, [r7, #8]
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1b7      	bne.n	800269c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2200      	movs	r2, #0
 8002734:	2140      	movs	r1, #64	; 0x40
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f814 	bl	8002764 <UART_WaitOnFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e00a      	b.n	800275c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e000      	b.n	800275c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800275a:	2302      	movs	r3, #2
  }
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002774:	e02c      	b.n	80027d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d028      	beq.n	80027d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d007      	beq.n	8002794 <UART_WaitOnFlagUntilTimeout+0x30>
 8002784:	f7fe fe40 	bl	8001408 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	429a      	cmp	r2, r3
 8002792:	d21d      	bcs.n	80027d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e00f      	b.n	80027f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4013      	ands	r3, r2
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	429a      	cmp	r2, r3
 80027de:	bf0c      	ite	eq
 80027e0:	2301      	moveq	r3, #1
 80027e2:	2300      	movne	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d0c3      	beq.n	8002776 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002832:	f023 030c 	bic.w	r3, r3, #12
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	68f9      	ldr	r1, [r7, #12]
 800283c:	430b      	orrs	r3, r1
 800283e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a52      	ldr	r2, [pc, #328]	; (80029a4 <UART_SetConfig+0x1ac>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d14e      	bne.n	80028fe <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002860:	f7ff fc3e 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002864:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	009a      	lsls	r2, r3, #2
 8002870:	441a      	add	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	4a4a      	ldr	r2, [pc, #296]	; (80029a8 <UART_SetConfig+0x1b0>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	0119      	lsls	r1, r3, #4
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	009a      	lsls	r2, r3, #2
 8002890:	441a      	add	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fbb2 f2f3 	udiv	r2, r2, r3
 800289c:	4b42      	ldr	r3, [pc, #264]	; (80029a8 <UART_SetConfig+0x1b0>)
 800289e:	fba3 0302 	umull	r0, r3, r3, r2
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2064      	movs	r0, #100	; 0x64
 80028a6:	fb00 f303 	mul.w	r3, r0, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	3332      	adds	r3, #50	; 0x32
 80028b0:	4a3d      	ldr	r2, [pc, #244]	; (80029a8 <UART_SetConfig+0x1b0>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028bc:	4419      	add	r1, r3
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	009a      	lsls	r2, r3, #2
 80028c8:	441a      	add	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d4:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <UART_SetConfig+0x1b0>)
 80028d6:	fba3 0302 	umull	r0, r3, r3, r2
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2064      	movs	r0, #100	; 0x64
 80028de:	fb00 f303 	mul.w	r3, r0, r3
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	3332      	adds	r3, #50	; 0x32
 80028e8:	4a2f      	ldr	r2, [pc, #188]	; (80029a8 <UART_SetConfig+0x1b0>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	f003 020f 	and.w	r2, r3, #15
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	440a      	add	r2, r1
 80028fa:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80028fc:	e04d      	b.n	800299a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80028fe:	f7ff fbdb 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8002902:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	009a      	lsls	r2, r3, #2
 800290e:	441a      	add	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	4a23      	ldr	r2, [pc, #140]	; (80029a8 <UART_SetConfig+0x1b0>)
 800291c:	fba2 2303 	umull	r2, r3, r2, r3
 8002920:	095b      	lsrs	r3, r3, #5
 8002922:	0119      	lsls	r1, r3, #4
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	009a      	lsls	r2, r3, #2
 800292e:	441a      	add	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	fbb2 f2f3 	udiv	r2, r2, r3
 800293a:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <UART_SetConfig+0x1b0>)
 800293c:	fba3 0302 	umull	r0, r3, r3, r2
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	2064      	movs	r0, #100	; 0x64
 8002944:	fb00 f303 	mul.w	r3, r0, r3
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	3332      	adds	r3, #50	; 0x32
 800294e:	4a16      	ldr	r2, [pc, #88]	; (80029a8 <UART_SetConfig+0x1b0>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800295a:	4419      	add	r1, r3
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	009a      	lsls	r2, r3, #2
 8002966:	441a      	add	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <UART_SetConfig+0x1b0>)
 8002974:	fba3 0302 	umull	r0, r3, r3, r2
 8002978:	095b      	lsrs	r3, r3, #5
 800297a:	2064      	movs	r0, #100	; 0x64
 800297c:	fb00 f303 	mul.w	r3, r0, r3
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	3332      	adds	r3, #50	; 0x32
 8002986:	4a08      	ldr	r2, [pc, #32]	; (80029a8 <UART_SetConfig+0x1b0>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	f003 020f 	and.w	r2, r3, #15
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	440a      	add	r2, r1
 8002998:	609a      	str	r2, [r3, #8]
}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40013800 	.word	0x40013800
 80029a8:	51eb851f 	.word	0x51eb851f

080029ac <__errno>:
 80029ac:	4b01      	ldr	r3, [pc, #4]	; (80029b4 <__errno+0x8>)
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	20000010 	.word	0x20000010

080029b8 <__libc_init_array>:
 80029b8:	b570      	push	{r4, r5, r6, lr}
 80029ba:	2500      	movs	r5, #0
 80029bc:	4e0c      	ldr	r6, [pc, #48]	; (80029f0 <__libc_init_array+0x38>)
 80029be:	4c0d      	ldr	r4, [pc, #52]	; (80029f4 <__libc_init_array+0x3c>)
 80029c0:	1ba4      	subs	r4, r4, r6
 80029c2:	10a4      	asrs	r4, r4, #2
 80029c4:	42a5      	cmp	r5, r4
 80029c6:	d109      	bne.n	80029dc <__libc_init_array+0x24>
 80029c8:	f000 fc34 	bl	8003234 <_init>
 80029cc:	2500      	movs	r5, #0
 80029ce:	4e0a      	ldr	r6, [pc, #40]	; (80029f8 <__libc_init_array+0x40>)
 80029d0:	4c0a      	ldr	r4, [pc, #40]	; (80029fc <__libc_init_array+0x44>)
 80029d2:	1ba4      	subs	r4, r4, r6
 80029d4:	10a4      	asrs	r4, r4, #2
 80029d6:	42a5      	cmp	r5, r4
 80029d8:	d105      	bne.n	80029e6 <__libc_init_array+0x2e>
 80029da:	bd70      	pop	{r4, r5, r6, pc}
 80029dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029e0:	4798      	blx	r3
 80029e2:	3501      	adds	r5, #1
 80029e4:	e7ee      	b.n	80029c4 <__libc_init_array+0xc>
 80029e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029ea:	4798      	blx	r3
 80029ec:	3501      	adds	r5, #1
 80029ee:	e7f2      	b.n	80029d6 <__libc_init_array+0x1e>
 80029f0:	0800331c 	.word	0x0800331c
 80029f4:	0800331c 	.word	0x0800331c
 80029f8:	0800331c 	.word	0x0800331c
 80029fc:	08003320 	.word	0x08003320

08002a00 <memset>:
 8002a00:	4603      	mov	r3, r0
 8002a02:	4402      	add	r2, r0
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d100      	bne.n	8002a0a <memset+0xa>
 8002a08:	4770      	bx	lr
 8002a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a0e:	e7f9      	b.n	8002a04 <memset+0x4>

08002a10 <siprintf>:
 8002a10:	b40e      	push	{r1, r2, r3}
 8002a12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a16:	b500      	push	{lr}
 8002a18:	b09c      	sub	sp, #112	; 0x70
 8002a1a:	ab1d      	add	r3, sp, #116	; 0x74
 8002a1c:	9002      	str	r0, [sp, #8]
 8002a1e:	9006      	str	r0, [sp, #24]
 8002a20:	9107      	str	r1, [sp, #28]
 8002a22:	9104      	str	r1, [sp, #16]
 8002a24:	4808      	ldr	r0, [pc, #32]	; (8002a48 <siprintf+0x38>)
 8002a26:	4909      	ldr	r1, [pc, #36]	; (8002a4c <siprintf+0x3c>)
 8002a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a2c:	9105      	str	r1, [sp, #20]
 8002a2e:	6800      	ldr	r0, [r0, #0]
 8002a30:	a902      	add	r1, sp, #8
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	f000 f866 	bl	8002b04 <_svfiprintf_r>
 8002a38:	2200      	movs	r2, #0
 8002a3a:	9b02      	ldr	r3, [sp, #8]
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	b01c      	add	sp, #112	; 0x70
 8002a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a44:	b003      	add	sp, #12
 8002a46:	4770      	bx	lr
 8002a48:	20000010 	.word	0x20000010
 8002a4c:	ffff0208 	.word	0xffff0208

08002a50 <__ssputs_r>:
 8002a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a54:	688e      	ldr	r6, [r1, #8]
 8002a56:	4682      	mov	sl, r0
 8002a58:	429e      	cmp	r6, r3
 8002a5a:	460c      	mov	r4, r1
 8002a5c:	4690      	mov	r8, r2
 8002a5e:	4699      	mov	r9, r3
 8002a60:	d837      	bhi.n	8002ad2 <__ssputs_r+0x82>
 8002a62:	898a      	ldrh	r2, [r1, #12]
 8002a64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a68:	d031      	beq.n	8002ace <__ssputs_r+0x7e>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	6825      	ldr	r5, [r4, #0]
 8002a6e:	6909      	ldr	r1, [r1, #16]
 8002a70:	1a6f      	subs	r7, r5, r1
 8002a72:	6965      	ldr	r5, [r4, #20]
 8002a74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a78:	fb95 f5f3 	sdiv	r5, r5, r3
 8002a7c:	f109 0301 	add.w	r3, r9, #1
 8002a80:	443b      	add	r3, r7
 8002a82:	429d      	cmp	r5, r3
 8002a84:	bf38      	it	cc
 8002a86:	461d      	movcc	r5, r3
 8002a88:	0553      	lsls	r3, r2, #21
 8002a8a:	d530      	bpl.n	8002aee <__ssputs_r+0x9e>
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	f000 fb37 	bl	8003100 <_malloc_r>
 8002a92:	4606      	mov	r6, r0
 8002a94:	b950      	cbnz	r0, 8002aac <__ssputs_r+0x5c>
 8002a96:	230c      	movs	r3, #12
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	f8ca 3000 	str.w	r3, [sl]
 8002aa0:	89a3      	ldrh	r3, [r4, #12]
 8002aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa6:	81a3      	strh	r3, [r4, #12]
 8002aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aac:	463a      	mov	r2, r7
 8002aae:	6921      	ldr	r1, [r4, #16]
 8002ab0:	f000 fab6 	bl	8003020 <memcpy>
 8002ab4:	89a3      	ldrh	r3, [r4, #12]
 8002ab6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002abe:	81a3      	strh	r3, [r4, #12]
 8002ac0:	6126      	str	r6, [r4, #16]
 8002ac2:	443e      	add	r6, r7
 8002ac4:	6026      	str	r6, [r4, #0]
 8002ac6:	464e      	mov	r6, r9
 8002ac8:	6165      	str	r5, [r4, #20]
 8002aca:	1bed      	subs	r5, r5, r7
 8002acc:	60a5      	str	r5, [r4, #8]
 8002ace:	454e      	cmp	r6, r9
 8002ad0:	d900      	bls.n	8002ad4 <__ssputs_r+0x84>
 8002ad2:	464e      	mov	r6, r9
 8002ad4:	4632      	mov	r2, r6
 8002ad6:	4641      	mov	r1, r8
 8002ad8:	6820      	ldr	r0, [r4, #0]
 8002ada:	f000 faac 	bl	8003036 <memmove>
 8002ade:	68a3      	ldr	r3, [r4, #8]
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	1b9b      	subs	r3, r3, r6
 8002ae4:	60a3      	str	r3, [r4, #8]
 8002ae6:	6823      	ldr	r3, [r4, #0]
 8002ae8:	441e      	add	r6, r3
 8002aea:	6026      	str	r6, [r4, #0]
 8002aec:	e7dc      	b.n	8002aa8 <__ssputs_r+0x58>
 8002aee:	462a      	mov	r2, r5
 8002af0:	f000 fb60 	bl	80031b4 <_realloc_r>
 8002af4:	4606      	mov	r6, r0
 8002af6:	2800      	cmp	r0, #0
 8002af8:	d1e2      	bne.n	8002ac0 <__ssputs_r+0x70>
 8002afa:	6921      	ldr	r1, [r4, #16]
 8002afc:	4650      	mov	r0, sl
 8002afe:	f000 fab3 	bl	8003068 <_free_r>
 8002b02:	e7c8      	b.n	8002a96 <__ssputs_r+0x46>

08002b04 <_svfiprintf_r>:
 8002b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b08:	461d      	mov	r5, r3
 8002b0a:	898b      	ldrh	r3, [r1, #12]
 8002b0c:	b09d      	sub	sp, #116	; 0x74
 8002b0e:	061f      	lsls	r7, r3, #24
 8002b10:	4680      	mov	r8, r0
 8002b12:	460c      	mov	r4, r1
 8002b14:	4616      	mov	r6, r2
 8002b16:	d50f      	bpl.n	8002b38 <_svfiprintf_r+0x34>
 8002b18:	690b      	ldr	r3, [r1, #16]
 8002b1a:	b96b      	cbnz	r3, 8002b38 <_svfiprintf_r+0x34>
 8002b1c:	2140      	movs	r1, #64	; 0x40
 8002b1e:	f000 faef 	bl	8003100 <_malloc_r>
 8002b22:	6020      	str	r0, [r4, #0]
 8002b24:	6120      	str	r0, [r4, #16]
 8002b26:	b928      	cbnz	r0, 8002b34 <_svfiprintf_r+0x30>
 8002b28:	230c      	movs	r3, #12
 8002b2a:	f8c8 3000 	str.w	r3, [r8]
 8002b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b32:	e0c8      	b.n	8002cc6 <_svfiprintf_r+0x1c2>
 8002b34:	2340      	movs	r3, #64	; 0x40
 8002b36:	6163      	str	r3, [r4, #20]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b42:	2330      	movs	r3, #48	; 0x30
 8002b44:	f04f 0b01 	mov.w	fp, #1
 8002b48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b4c:	9503      	str	r5, [sp, #12]
 8002b4e:	4637      	mov	r7, r6
 8002b50:	463d      	mov	r5, r7
 8002b52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002b56:	b10b      	cbz	r3, 8002b5c <_svfiprintf_r+0x58>
 8002b58:	2b25      	cmp	r3, #37	; 0x25
 8002b5a:	d13e      	bne.n	8002bda <_svfiprintf_r+0xd6>
 8002b5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002b60:	d00b      	beq.n	8002b7a <_svfiprintf_r+0x76>
 8002b62:	4653      	mov	r3, sl
 8002b64:	4632      	mov	r2, r6
 8002b66:	4621      	mov	r1, r4
 8002b68:	4640      	mov	r0, r8
 8002b6a:	f7ff ff71 	bl	8002a50 <__ssputs_r>
 8002b6e:	3001      	adds	r0, #1
 8002b70:	f000 80a4 	beq.w	8002cbc <_svfiprintf_r+0x1b8>
 8002b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b76:	4453      	add	r3, sl
 8002b78:	9309      	str	r3, [sp, #36]	; 0x24
 8002b7a:	783b      	ldrb	r3, [r7, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 809d 	beq.w	8002cbc <_svfiprintf_r+0x1b8>
 8002b82:	2300      	movs	r3, #0
 8002b84:	f04f 32ff 	mov.w	r2, #4294967295
 8002b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b8c:	9304      	str	r3, [sp, #16]
 8002b8e:	9307      	str	r3, [sp, #28]
 8002b90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b94:	931a      	str	r3, [sp, #104]	; 0x68
 8002b96:	462f      	mov	r7, r5
 8002b98:	2205      	movs	r2, #5
 8002b9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002b9e:	4850      	ldr	r0, [pc, #320]	; (8002ce0 <_svfiprintf_r+0x1dc>)
 8002ba0:	f000 fa30 	bl	8003004 <memchr>
 8002ba4:	9b04      	ldr	r3, [sp, #16]
 8002ba6:	b9d0      	cbnz	r0, 8002bde <_svfiprintf_r+0xda>
 8002ba8:	06d9      	lsls	r1, r3, #27
 8002baa:	bf44      	itt	mi
 8002bac:	2220      	movmi	r2, #32
 8002bae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002bb2:	071a      	lsls	r2, r3, #28
 8002bb4:	bf44      	itt	mi
 8002bb6:	222b      	movmi	r2, #43	; 0x2b
 8002bb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002bbc:	782a      	ldrb	r2, [r5, #0]
 8002bbe:	2a2a      	cmp	r2, #42	; 0x2a
 8002bc0:	d015      	beq.n	8002bee <_svfiprintf_r+0xea>
 8002bc2:	462f      	mov	r7, r5
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	250a      	movs	r5, #10
 8002bc8:	9a07      	ldr	r2, [sp, #28]
 8002bca:	4639      	mov	r1, r7
 8002bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bd0:	3b30      	subs	r3, #48	; 0x30
 8002bd2:	2b09      	cmp	r3, #9
 8002bd4:	d94d      	bls.n	8002c72 <_svfiprintf_r+0x16e>
 8002bd6:	b1b8      	cbz	r0, 8002c08 <_svfiprintf_r+0x104>
 8002bd8:	e00f      	b.n	8002bfa <_svfiprintf_r+0xf6>
 8002bda:	462f      	mov	r7, r5
 8002bdc:	e7b8      	b.n	8002b50 <_svfiprintf_r+0x4c>
 8002bde:	4a40      	ldr	r2, [pc, #256]	; (8002ce0 <_svfiprintf_r+0x1dc>)
 8002be0:	463d      	mov	r5, r7
 8002be2:	1a80      	subs	r0, r0, r2
 8002be4:	fa0b f000 	lsl.w	r0, fp, r0
 8002be8:	4318      	orrs	r0, r3
 8002bea:	9004      	str	r0, [sp, #16]
 8002bec:	e7d3      	b.n	8002b96 <_svfiprintf_r+0x92>
 8002bee:	9a03      	ldr	r2, [sp, #12]
 8002bf0:	1d11      	adds	r1, r2, #4
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	9103      	str	r1, [sp, #12]
 8002bf6:	2a00      	cmp	r2, #0
 8002bf8:	db01      	blt.n	8002bfe <_svfiprintf_r+0xfa>
 8002bfa:	9207      	str	r2, [sp, #28]
 8002bfc:	e004      	b.n	8002c08 <_svfiprintf_r+0x104>
 8002bfe:	4252      	negs	r2, r2
 8002c00:	f043 0302 	orr.w	r3, r3, #2
 8002c04:	9207      	str	r2, [sp, #28]
 8002c06:	9304      	str	r3, [sp, #16]
 8002c08:	783b      	ldrb	r3, [r7, #0]
 8002c0a:	2b2e      	cmp	r3, #46	; 0x2e
 8002c0c:	d10c      	bne.n	8002c28 <_svfiprintf_r+0x124>
 8002c0e:	787b      	ldrb	r3, [r7, #1]
 8002c10:	2b2a      	cmp	r3, #42	; 0x2a
 8002c12:	d133      	bne.n	8002c7c <_svfiprintf_r+0x178>
 8002c14:	9b03      	ldr	r3, [sp, #12]
 8002c16:	3702      	adds	r7, #2
 8002c18:	1d1a      	adds	r2, r3, #4
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	9203      	str	r2, [sp, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bfb8      	it	lt
 8002c22:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c26:	9305      	str	r3, [sp, #20]
 8002c28:	4d2e      	ldr	r5, [pc, #184]	; (8002ce4 <_svfiprintf_r+0x1e0>)
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	7839      	ldrb	r1, [r7, #0]
 8002c2e:	4628      	mov	r0, r5
 8002c30:	f000 f9e8 	bl	8003004 <memchr>
 8002c34:	b138      	cbz	r0, 8002c46 <_svfiprintf_r+0x142>
 8002c36:	2340      	movs	r3, #64	; 0x40
 8002c38:	1b40      	subs	r0, r0, r5
 8002c3a:	fa03 f000 	lsl.w	r0, r3, r0
 8002c3e:	9b04      	ldr	r3, [sp, #16]
 8002c40:	3701      	adds	r7, #1
 8002c42:	4303      	orrs	r3, r0
 8002c44:	9304      	str	r3, [sp, #16]
 8002c46:	7839      	ldrb	r1, [r7, #0]
 8002c48:	2206      	movs	r2, #6
 8002c4a:	4827      	ldr	r0, [pc, #156]	; (8002ce8 <_svfiprintf_r+0x1e4>)
 8002c4c:	1c7e      	adds	r6, r7, #1
 8002c4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c52:	f000 f9d7 	bl	8003004 <memchr>
 8002c56:	2800      	cmp	r0, #0
 8002c58:	d038      	beq.n	8002ccc <_svfiprintf_r+0x1c8>
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <_svfiprintf_r+0x1e8>)
 8002c5c:	bb13      	cbnz	r3, 8002ca4 <_svfiprintf_r+0x1a0>
 8002c5e:	9b03      	ldr	r3, [sp, #12]
 8002c60:	3307      	adds	r3, #7
 8002c62:	f023 0307 	bic.w	r3, r3, #7
 8002c66:	3308      	adds	r3, #8
 8002c68:	9303      	str	r3, [sp, #12]
 8002c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c6c:	444b      	add	r3, r9
 8002c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8002c70:	e76d      	b.n	8002b4e <_svfiprintf_r+0x4a>
 8002c72:	fb05 3202 	mla	r2, r5, r2, r3
 8002c76:	2001      	movs	r0, #1
 8002c78:	460f      	mov	r7, r1
 8002c7a:	e7a6      	b.n	8002bca <_svfiprintf_r+0xc6>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	250a      	movs	r5, #10
 8002c80:	4619      	mov	r1, r3
 8002c82:	3701      	adds	r7, #1
 8002c84:	9305      	str	r3, [sp, #20]
 8002c86:	4638      	mov	r0, r7
 8002c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c8c:	3a30      	subs	r2, #48	; 0x30
 8002c8e:	2a09      	cmp	r2, #9
 8002c90:	d903      	bls.n	8002c9a <_svfiprintf_r+0x196>
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0c8      	beq.n	8002c28 <_svfiprintf_r+0x124>
 8002c96:	9105      	str	r1, [sp, #20]
 8002c98:	e7c6      	b.n	8002c28 <_svfiprintf_r+0x124>
 8002c9a:	fb05 2101 	mla	r1, r5, r1, r2
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	4607      	mov	r7, r0
 8002ca2:	e7f0      	b.n	8002c86 <_svfiprintf_r+0x182>
 8002ca4:	ab03      	add	r3, sp, #12
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	4622      	mov	r2, r4
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <_svfiprintf_r+0x1ec>)
 8002cac:	a904      	add	r1, sp, #16
 8002cae:	4640      	mov	r0, r8
 8002cb0:	f3af 8000 	nop.w
 8002cb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002cb8:	4681      	mov	r9, r0
 8002cba:	d1d6      	bne.n	8002c6a <_svfiprintf_r+0x166>
 8002cbc:	89a3      	ldrh	r3, [r4, #12]
 8002cbe:	065b      	lsls	r3, r3, #25
 8002cc0:	f53f af35 	bmi.w	8002b2e <_svfiprintf_r+0x2a>
 8002cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cc6:	b01d      	add	sp, #116	; 0x74
 8002cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ccc:	ab03      	add	r3, sp, #12
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	4622      	mov	r2, r4
 8002cd2:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <_svfiprintf_r+0x1ec>)
 8002cd4:	a904      	add	r1, sp, #16
 8002cd6:	4640      	mov	r0, r8
 8002cd8:	f000 f882 	bl	8002de0 <_printf_i>
 8002cdc:	e7ea      	b.n	8002cb4 <_svfiprintf_r+0x1b0>
 8002cde:	bf00      	nop
 8002ce0:	080032e8 	.word	0x080032e8
 8002ce4:	080032ee 	.word	0x080032ee
 8002ce8:	080032f2 	.word	0x080032f2
 8002cec:	00000000 	.word	0x00000000
 8002cf0:	08002a51 	.word	0x08002a51

08002cf4 <_printf_common>:
 8002cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cf8:	4691      	mov	r9, r2
 8002cfa:	461f      	mov	r7, r3
 8002cfc:	688a      	ldr	r2, [r1, #8]
 8002cfe:	690b      	ldr	r3, [r1, #16]
 8002d00:	4606      	mov	r6, r0
 8002d02:	4293      	cmp	r3, r2
 8002d04:	bfb8      	it	lt
 8002d06:	4613      	movlt	r3, r2
 8002d08:	f8c9 3000 	str.w	r3, [r9]
 8002d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d10:	460c      	mov	r4, r1
 8002d12:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d16:	b112      	cbz	r2, 8002d1e <_printf_common+0x2a>
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f8c9 3000 	str.w	r3, [r9]
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	0699      	lsls	r1, r3, #26
 8002d22:	bf42      	ittt	mi
 8002d24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002d28:	3302      	addmi	r3, #2
 8002d2a:	f8c9 3000 	strmi.w	r3, [r9]
 8002d2e:	6825      	ldr	r5, [r4, #0]
 8002d30:	f015 0506 	ands.w	r5, r5, #6
 8002d34:	d107      	bne.n	8002d46 <_printf_common+0x52>
 8002d36:	f104 0a19 	add.w	sl, r4, #25
 8002d3a:	68e3      	ldr	r3, [r4, #12]
 8002d3c:	f8d9 2000 	ldr.w	r2, [r9]
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	42ab      	cmp	r3, r5
 8002d44:	dc29      	bgt.n	8002d9a <_printf_common+0xa6>
 8002d46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002d4a:	6822      	ldr	r2, [r4, #0]
 8002d4c:	3300      	adds	r3, #0
 8002d4e:	bf18      	it	ne
 8002d50:	2301      	movne	r3, #1
 8002d52:	0692      	lsls	r2, r2, #26
 8002d54:	d42e      	bmi.n	8002db4 <_printf_common+0xc0>
 8002d56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d5a:	4639      	mov	r1, r7
 8002d5c:	4630      	mov	r0, r6
 8002d5e:	47c0      	blx	r8
 8002d60:	3001      	adds	r0, #1
 8002d62:	d021      	beq.n	8002da8 <_printf_common+0xb4>
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	68e5      	ldr	r5, [r4, #12]
 8002d68:	f003 0306 	and.w	r3, r3, #6
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	bf18      	it	ne
 8002d70:	2500      	movne	r5, #0
 8002d72:	f8d9 2000 	ldr.w	r2, [r9]
 8002d76:	f04f 0900 	mov.w	r9, #0
 8002d7a:	bf08      	it	eq
 8002d7c:	1aad      	subeq	r5, r5, r2
 8002d7e:	68a3      	ldr	r3, [r4, #8]
 8002d80:	6922      	ldr	r2, [r4, #16]
 8002d82:	bf08      	it	eq
 8002d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	bfc4      	itt	gt
 8002d8c:	1a9b      	subgt	r3, r3, r2
 8002d8e:	18ed      	addgt	r5, r5, r3
 8002d90:	341a      	adds	r4, #26
 8002d92:	454d      	cmp	r5, r9
 8002d94:	d11a      	bne.n	8002dcc <_printf_common+0xd8>
 8002d96:	2000      	movs	r0, #0
 8002d98:	e008      	b.n	8002dac <_printf_common+0xb8>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	4652      	mov	r2, sl
 8002d9e:	4639      	mov	r1, r7
 8002da0:	4630      	mov	r0, r6
 8002da2:	47c0      	blx	r8
 8002da4:	3001      	adds	r0, #1
 8002da6:	d103      	bne.n	8002db0 <_printf_common+0xbc>
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002db0:	3501      	adds	r5, #1
 8002db2:	e7c2      	b.n	8002d3a <_printf_common+0x46>
 8002db4:	2030      	movs	r0, #48	; 0x30
 8002db6:	18e1      	adds	r1, r4, r3
 8002db8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002dc2:	4422      	add	r2, r4
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002dca:	e7c4      	b.n	8002d56 <_printf_common+0x62>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	4622      	mov	r2, r4
 8002dd0:	4639      	mov	r1, r7
 8002dd2:	4630      	mov	r0, r6
 8002dd4:	47c0      	blx	r8
 8002dd6:	3001      	adds	r0, #1
 8002dd8:	d0e6      	beq.n	8002da8 <_printf_common+0xb4>
 8002dda:	f109 0901 	add.w	r9, r9, #1
 8002dde:	e7d8      	b.n	8002d92 <_printf_common+0x9e>

08002de0 <_printf_i>:
 8002de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002de4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002de8:	460c      	mov	r4, r1
 8002dea:	7e09      	ldrb	r1, [r1, #24]
 8002dec:	b085      	sub	sp, #20
 8002dee:	296e      	cmp	r1, #110	; 0x6e
 8002df0:	4617      	mov	r7, r2
 8002df2:	4606      	mov	r6, r0
 8002df4:	4698      	mov	r8, r3
 8002df6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002df8:	f000 80b3 	beq.w	8002f62 <_printf_i+0x182>
 8002dfc:	d822      	bhi.n	8002e44 <_printf_i+0x64>
 8002dfe:	2963      	cmp	r1, #99	; 0x63
 8002e00:	d036      	beq.n	8002e70 <_printf_i+0x90>
 8002e02:	d80a      	bhi.n	8002e1a <_printf_i+0x3a>
 8002e04:	2900      	cmp	r1, #0
 8002e06:	f000 80b9 	beq.w	8002f7c <_printf_i+0x19c>
 8002e0a:	2958      	cmp	r1, #88	; 0x58
 8002e0c:	f000 8083 	beq.w	8002f16 <_printf_i+0x136>
 8002e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002e18:	e032      	b.n	8002e80 <_printf_i+0xa0>
 8002e1a:	2964      	cmp	r1, #100	; 0x64
 8002e1c:	d001      	beq.n	8002e22 <_printf_i+0x42>
 8002e1e:	2969      	cmp	r1, #105	; 0x69
 8002e20:	d1f6      	bne.n	8002e10 <_printf_i+0x30>
 8002e22:	6820      	ldr	r0, [r4, #0]
 8002e24:	6813      	ldr	r3, [r2, #0]
 8002e26:	0605      	lsls	r5, r0, #24
 8002e28:	f103 0104 	add.w	r1, r3, #4
 8002e2c:	d52a      	bpl.n	8002e84 <_printf_i+0xa4>
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6011      	str	r1, [r2, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	da03      	bge.n	8002e3e <_printf_i+0x5e>
 8002e36:	222d      	movs	r2, #45	; 0x2d
 8002e38:	425b      	negs	r3, r3
 8002e3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002e3e:	486f      	ldr	r0, [pc, #444]	; (8002ffc <_printf_i+0x21c>)
 8002e40:	220a      	movs	r2, #10
 8002e42:	e039      	b.n	8002eb8 <_printf_i+0xd8>
 8002e44:	2973      	cmp	r1, #115	; 0x73
 8002e46:	f000 809d 	beq.w	8002f84 <_printf_i+0x1a4>
 8002e4a:	d808      	bhi.n	8002e5e <_printf_i+0x7e>
 8002e4c:	296f      	cmp	r1, #111	; 0x6f
 8002e4e:	d020      	beq.n	8002e92 <_printf_i+0xb2>
 8002e50:	2970      	cmp	r1, #112	; 0x70
 8002e52:	d1dd      	bne.n	8002e10 <_printf_i+0x30>
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	f043 0320 	orr.w	r3, r3, #32
 8002e5a:	6023      	str	r3, [r4, #0]
 8002e5c:	e003      	b.n	8002e66 <_printf_i+0x86>
 8002e5e:	2975      	cmp	r1, #117	; 0x75
 8002e60:	d017      	beq.n	8002e92 <_printf_i+0xb2>
 8002e62:	2978      	cmp	r1, #120	; 0x78
 8002e64:	d1d4      	bne.n	8002e10 <_printf_i+0x30>
 8002e66:	2378      	movs	r3, #120	; 0x78
 8002e68:	4865      	ldr	r0, [pc, #404]	; (8003000 <_printf_i+0x220>)
 8002e6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e6e:	e055      	b.n	8002f1c <_printf_i+0x13c>
 8002e70:	6813      	ldr	r3, [r2, #0]
 8002e72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e76:	1d19      	adds	r1, r3, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6011      	str	r1, [r2, #0]
 8002e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e80:	2301      	movs	r3, #1
 8002e82:	e08c      	b.n	8002f9e <_printf_i+0x1be>
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e8a:	6011      	str	r1, [r2, #0]
 8002e8c:	bf18      	it	ne
 8002e8e:	b21b      	sxthne	r3, r3
 8002e90:	e7cf      	b.n	8002e32 <_printf_i+0x52>
 8002e92:	6813      	ldr	r3, [r2, #0]
 8002e94:	6825      	ldr	r5, [r4, #0]
 8002e96:	1d18      	adds	r0, r3, #4
 8002e98:	6010      	str	r0, [r2, #0]
 8002e9a:	0628      	lsls	r0, r5, #24
 8002e9c:	d501      	bpl.n	8002ea2 <_printf_i+0xc2>
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	e002      	b.n	8002ea8 <_printf_i+0xc8>
 8002ea2:	0668      	lsls	r0, r5, #25
 8002ea4:	d5fb      	bpl.n	8002e9e <_printf_i+0xbe>
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	296f      	cmp	r1, #111	; 0x6f
 8002eaa:	bf14      	ite	ne
 8002eac:	220a      	movne	r2, #10
 8002eae:	2208      	moveq	r2, #8
 8002eb0:	4852      	ldr	r0, [pc, #328]	; (8002ffc <_printf_i+0x21c>)
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002eb8:	6865      	ldr	r5, [r4, #4]
 8002eba:	2d00      	cmp	r5, #0
 8002ebc:	60a5      	str	r5, [r4, #8]
 8002ebe:	f2c0 8095 	blt.w	8002fec <_printf_i+0x20c>
 8002ec2:	6821      	ldr	r1, [r4, #0]
 8002ec4:	f021 0104 	bic.w	r1, r1, #4
 8002ec8:	6021      	str	r1, [r4, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d13d      	bne.n	8002f4a <_printf_i+0x16a>
 8002ece:	2d00      	cmp	r5, #0
 8002ed0:	f040 808e 	bne.w	8002ff0 <_printf_i+0x210>
 8002ed4:	4665      	mov	r5, ip
 8002ed6:	2a08      	cmp	r2, #8
 8002ed8:	d10b      	bne.n	8002ef2 <_printf_i+0x112>
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	07db      	lsls	r3, r3, #31
 8002ede:	d508      	bpl.n	8002ef2 <_printf_i+0x112>
 8002ee0:	6923      	ldr	r3, [r4, #16]
 8002ee2:	6862      	ldr	r2, [r4, #4]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	bfde      	ittt	le
 8002ee8:	2330      	movle	r3, #48	; 0x30
 8002eea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002eee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ef2:	ebac 0305 	sub.w	r3, ip, r5
 8002ef6:	6123      	str	r3, [r4, #16]
 8002ef8:	f8cd 8000 	str.w	r8, [sp]
 8002efc:	463b      	mov	r3, r7
 8002efe:	aa03      	add	r2, sp, #12
 8002f00:	4621      	mov	r1, r4
 8002f02:	4630      	mov	r0, r6
 8002f04:	f7ff fef6 	bl	8002cf4 <_printf_common>
 8002f08:	3001      	adds	r0, #1
 8002f0a:	d14d      	bne.n	8002fa8 <_printf_i+0x1c8>
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	b005      	add	sp, #20
 8002f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f16:	4839      	ldr	r0, [pc, #228]	; (8002ffc <_printf_i+0x21c>)
 8002f18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002f1c:	6813      	ldr	r3, [r2, #0]
 8002f1e:	6821      	ldr	r1, [r4, #0]
 8002f20:	1d1d      	adds	r5, r3, #4
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6015      	str	r5, [r2, #0]
 8002f26:	060a      	lsls	r2, r1, #24
 8002f28:	d50b      	bpl.n	8002f42 <_printf_i+0x162>
 8002f2a:	07ca      	lsls	r2, r1, #31
 8002f2c:	bf44      	itt	mi
 8002f2e:	f041 0120 	orrmi.w	r1, r1, #32
 8002f32:	6021      	strmi	r1, [r4, #0]
 8002f34:	b91b      	cbnz	r3, 8002f3e <_printf_i+0x15e>
 8002f36:	6822      	ldr	r2, [r4, #0]
 8002f38:	f022 0220 	bic.w	r2, r2, #32
 8002f3c:	6022      	str	r2, [r4, #0]
 8002f3e:	2210      	movs	r2, #16
 8002f40:	e7b7      	b.n	8002eb2 <_printf_i+0xd2>
 8002f42:	064d      	lsls	r5, r1, #25
 8002f44:	bf48      	it	mi
 8002f46:	b29b      	uxthmi	r3, r3
 8002f48:	e7ef      	b.n	8002f2a <_printf_i+0x14a>
 8002f4a:	4665      	mov	r5, ip
 8002f4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f50:	fb02 3311 	mls	r3, r2, r1, r3
 8002f54:	5cc3      	ldrb	r3, [r0, r3]
 8002f56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	2900      	cmp	r1, #0
 8002f5e:	d1f5      	bne.n	8002f4c <_printf_i+0x16c>
 8002f60:	e7b9      	b.n	8002ed6 <_printf_i+0xf6>
 8002f62:	6813      	ldr	r3, [r2, #0]
 8002f64:	6825      	ldr	r5, [r4, #0]
 8002f66:	1d18      	adds	r0, r3, #4
 8002f68:	6961      	ldr	r1, [r4, #20]
 8002f6a:	6010      	str	r0, [r2, #0]
 8002f6c:	0628      	lsls	r0, r5, #24
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	d501      	bpl.n	8002f76 <_printf_i+0x196>
 8002f72:	6019      	str	r1, [r3, #0]
 8002f74:	e002      	b.n	8002f7c <_printf_i+0x19c>
 8002f76:	066a      	lsls	r2, r5, #25
 8002f78:	d5fb      	bpl.n	8002f72 <_printf_i+0x192>
 8002f7a:	8019      	strh	r1, [r3, #0]
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	4665      	mov	r5, ip
 8002f80:	6123      	str	r3, [r4, #16]
 8002f82:	e7b9      	b.n	8002ef8 <_printf_i+0x118>
 8002f84:	6813      	ldr	r3, [r2, #0]
 8002f86:	1d19      	adds	r1, r3, #4
 8002f88:	6011      	str	r1, [r2, #0]
 8002f8a:	681d      	ldr	r5, [r3, #0]
 8002f8c:	6862      	ldr	r2, [r4, #4]
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4628      	mov	r0, r5
 8002f92:	f000 f837 	bl	8003004 <memchr>
 8002f96:	b108      	cbz	r0, 8002f9c <_printf_i+0x1bc>
 8002f98:	1b40      	subs	r0, r0, r5
 8002f9a:	6060      	str	r0, [r4, #4]
 8002f9c:	6863      	ldr	r3, [r4, #4]
 8002f9e:	6123      	str	r3, [r4, #16]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fa6:	e7a7      	b.n	8002ef8 <_printf_i+0x118>
 8002fa8:	6923      	ldr	r3, [r4, #16]
 8002faa:	462a      	mov	r2, r5
 8002fac:	4639      	mov	r1, r7
 8002fae:	4630      	mov	r0, r6
 8002fb0:	47c0      	blx	r8
 8002fb2:	3001      	adds	r0, #1
 8002fb4:	d0aa      	beq.n	8002f0c <_printf_i+0x12c>
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	079b      	lsls	r3, r3, #30
 8002fba:	d413      	bmi.n	8002fe4 <_printf_i+0x204>
 8002fbc:	68e0      	ldr	r0, [r4, #12]
 8002fbe:	9b03      	ldr	r3, [sp, #12]
 8002fc0:	4298      	cmp	r0, r3
 8002fc2:	bfb8      	it	lt
 8002fc4:	4618      	movlt	r0, r3
 8002fc6:	e7a3      	b.n	8002f10 <_printf_i+0x130>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	464a      	mov	r2, r9
 8002fcc:	4639      	mov	r1, r7
 8002fce:	4630      	mov	r0, r6
 8002fd0:	47c0      	blx	r8
 8002fd2:	3001      	adds	r0, #1
 8002fd4:	d09a      	beq.n	8002f0c <_printf_i+0x12c>
 8002fd6:	3501      	adds	r5, #1
 8002fd8:	68e3      	ldr	r3, [r4, #12]
 8002fda:	9a03      	ldr	r2, [sp, #12]
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	42ab      	cmp	r3, r5
 8002fe0:	dcf2      	bgt.n	8002fc8 <_printf_i+0x1e8>
 8002fe2:	e7eb      	b.n	8002fbc <_printf_i+0x1dc>
 8002fe4:	2500      	movs	r5, #0
 8002fe6:	f104 0919 	add.w	r9, r4, #25
 8002fea:	e7f5      	b.n	8002fd8 <_printf_i+0x1f8>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1ac      	bne.n	8002f4a <_printf_i+0x16a>
 8002ff0:	7803      	ldrb	r3, [r0, #0]
 8002ff2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ff6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ffa:	e76c      	b.n	8002ed6 <_printf_i+0xf6>
 8002ffc:	080032f9 	.word	0x080032f9
 8003000:	0800330a 	.word	0x0800330a

08003004 <memchr>:
 8003004:	b510      	push	{r4, lr}
 8003006:	b2c9      	uxtb	r1, r1
 8003008:	4402      	add	r2, r0
 800300a:	4290      	cmp	r0, r2
 800300c:	4603      	mov	r3, r0
 800300e:	d101      	bne.n	8003014 <memchr+0x10>
 8003010:	2300      	movs	r3, #0
 8003012:	e003      	b.n	800301c <memchr+0x18>
 8003014:	781c      	ldrb	r4, [r3, #0]
 8003016:	3001      	adds	r0, #1
 8003018:	428c      	cmp	r4, r1
 800301a:	d1f6      	bne.n	800300a <memchr+0x6>
 800301c:	4618      	mov	r0, r3
 800301e:	bd10      	pop	{r4, pc}

08003020 <memcpy>:
 8003020:	b510      	push	{r4, lr}
 8003022:	1e43      	subs	r3, r0, #1
 8003024:	440a      	add	r2, r1
 8003026:	4291      	cmp	r1, r2
 8003028:	d100      	bne.n	800302c <memcpy+0xc>
 800302a:	bd10      	pop	{r4, pc}
 800302c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003030:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003034:	e7f7      	b.n	8003026 <memcpy+0x6>

08003036 <memmove>:
 8003036:	4288      	cmp	r0, r1
 8003038:	b510      	push	{r4, lr}
 800303a:	eb01 0302 	add.w	r3, r1, r2
 800303e:	d807      	bhi.n	8003050 <memmove+0x1a>
 8003040:	1e42      	subs	r2, r0, #1
 8003042:	4299      	cmp	r1, r3
 8003044:	d00a      	beq.n	800305c <memmove+0x26>
 8003046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800304a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800304e:	e7f8      	b.n	8003042 <memmove+0xc>
 8003050:	4283      	cmp	r3, r0
 8003052:	d9f5      	bls.n	8003040 <memmove+0xa>
 8003054:	1881      	adds	r1, r0, r2
 8003056:	1ad2      	subs	r2, r2, r3
 8003058:	42d3      	cmn	r3, r2
 800305a:	d100      	bne.n	800305e <memmove+0x28>
 800305c:	bd10      	pop	{r4, pc}
 800305e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003062:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003066:	e7f7      	b.n	8003058 <memmove+0x22>

08003068 <_free_r>:
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	4605      	mov	r5, r0
 800306c:	2900      	cmp	r1, #0
 800306e:	d043      	beq.n	80030f8 <_free_r+0x90>
 8003070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003074:	1f0c      	subs	r4, r1, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	bfb8      	it	lt
 800307a:	18e4      	addlt	r4, r4, r3
 800307c:	f000 f8d0 	bl	8003220 <__malloc_lock>
 8003080:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <_free_r+0x94>)
 8003082:	6813      	ldr	r3, [r2, #0]
 8003084:	4610      	mov	r0, r2
 8003086:	b933      	cbnz	r3, 8003096 <_free_r+0x2e>
 8003088:	6063      	str	r3, [r4, #4]
 800308a:	6014      	str	r4, [r2, #0]
 800308c:	4628      	mov	r0, r5
 800308e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003092:	f000 b8c6 	b.w	8003222 <__malloc_unlock>
 8003096:	42a3      	cmp	r3, r4
 8003098:	d90b      	bls.n	80030b2 <_free_r+0x4a>
 800309a:	6821      	ldr	r1, [r4, #0]
 800309c:	1862      	adds	r2, r4, r1
 800309e:	4293      	cmp	r3, r2
 80030a0:	bf01      	itttt	eq
 80030a2:	681a      	ldreq	r2, [r3, #0]
 80030a4:	685b      	ldreq	r3, [r3, #4]
 80030a6:	1852      	addeq	r2, r2, r1
 80030a8:	6022      	streq	r2, [r4, #0]
 80030aa:	6063      	str	r3, [r4, #4]
 80030ac:	6004      	str	r4, [r0, #0]
 80030ae:	e7ed      	b.n	800308c <_free_r+0x24>
 80030b0:	4613      	mov	r3, r2
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	b10a      	cbz	r2, 80030ba <_free_r+0x52>
 80030b6:	42a2      	cmp	r2, r4
 80030b8:	d9fa      	bls.n	80030b0 <_free_r+0x48>
 80030ba:	6819      	ldr	r1, [r3, #0]
 80030bc:	1858      	adds	r0, r3, r1
 80030be:	42a0      	cmp	r0, r4
 80030c0:	d10b      	bne.n	80030da <_free_r+0x72>
 80030c2:	6820      	ldr	r0, [r4, #0]
 80030c4:	4401      	add	r1, r0
 80030c6:	1858      	adds	r0, r3, r1
 80030c8:	4282      	cmp	r2, r0
 80030ca:	6019      	str	r1, [r3, #0]
 80030cc:	d1de      	bne.n	800308c <_free_r+0x24>
 80030ce:	6810      	ldr	r0, [r2, #0]
 80030d0:	6852      	ldr	r2, [r2, #4]
 80030d2:	4401      	add	r1, r0
 80030d4:	6019      	str	r1, [r3, #0]
 80030d6:	605a      	str	r2, [r3, #4]
 80030d8:	e7d8      	b.n	800308c <_free_r+0x24>
 80030da:	d902      	bls.n	80030e2 <_free_r+0x7a>
 80030dc:	230c      	movs	r3, #12
 80030de:	602b      	str	r3, [r5, #0]
 80030e0:	e7d4      	b.n	800308c <_free_r+0x24>
 80030e2:	6820      	ldr	r0, [r4, #0]
 80030e4:	1821      	adds	r1, r4, r0
 80030e6:	428a      	cmp	r2, r1
 80030e8:	bf01      	itttt	eq
 80030ea:	6811      	ldreq	r1, [r2, #0]
 80030ec:	6852      	ldreq	r2, [r2, #4]
 80030ee:	1809      	addeq	r1, r1, r0
 80030f0:	6021      	streq	r1, [r4, #0]
 80030f2:	6062      	str	r2, [r4, #4]
 80030f4:	605c      	str	r4, [r3, #4]
 80030f6:	e7c9      	b.n	800308c <_free_r+0x24>
 80030f8:	bd38      	pop	{r3, r4, r5, pc}
 80030fa:	bf00      	nop
 80030fc:	200000cc 	.word	0x200000cc

08003100 <_malloc_r>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	1ccd      	adds	r5, r1, #3
 8003104:	f025 0503 	bic.w	r5, r5, #3
 8003108:	3508      	adds	r5, #8
 800310a:	2d0c      	cmp	r5, #12
 800310c:	bf38      	it	cc
 800310e:	250c      	movcc	r5, #12
 8003110:	2d00      	cmp	r5, #0
 8003112:	4606      	mov	r6, r0
 8003114:	db01      	blt.n	800311a <_malloc_r+0x1a>
 8003116:	42a9      	cmp	r1, r5
 8003118:	d903      	bls.n	8003122 <_malloc_r+0x22>
 800311a:	230c      	movs	r3, #12
 800311c:	6033      	str	r3, [r6, #0]
 800311e:	2000      	movs	r0, #0
 8003120:	bd70      	pop	{r4, r5, r6, pc}
 8003122:	f000 f87d 	bl	8003220 <__malloc_lock>
 8003126:	4a21      	ldr	r2, [pc, #132]	; (80031ac <_malloc_r+0xac>)
 8003128:	6814      	ldr	r4, [r2, #0]
 800312a:	4621      	mov	r1, r4
 800312c:	b991      	cbnz	r1, 8003154 <_malloc_r+0x54>
 800312e:	4c20      	ldr	r4, [pc, #128]	; (80031b0 <_malloc_r+0xb0>)
 8003130:	6823      	ldr	r3, [r4, #0]
 8003132:	b91b      	cbnz	r3, 800313c <_malloc_r+0x3c>
 8003134:	4630      	mov	r0, r6
 8003136:	f000 f863 	bl	8003200 <_sbrk_r>
 800313a:	6020      	str	r0, [r4, #0]
 800313c:	4629      	mov	r1, r5
 800313e:	4630      	mov	r0, r6
 8003140:	f000 f85e 	bl	8003200 <_sbrk_r>
 8003144:	1c43      	adds	r3, r0, #1
 8003146:	d124      	bne.n	8003192 <_malloc_r+0x92>
 8003148:	230c      	movs	r3, #12
 800314a:	4630      	mov	r0, r6
 800314c:	6033      	str	r3, [r6, #0]
 800314e:	f000 f868 	bl	8003222 <__malloc_unlock>
 8003152:	e7e4      	b.n	800311e <_malloc_r+0x1e>
 8003154:	680b      	ldr	r3, [r1, #0]
 8003156:	1b5b      	subs	r3, r3, r5
 8003158:	d418      	bmi.n	800318c <_malloc_r+0x8c>
 800315a:	2b0b      	cmp	r3, #11
 800315c:	d90f      	bls.n	800317e <_malloc_r+0x7e>
 800315e:	600b      	str	r3, [r1, #0]
 8003160:	18cc      	adds	r4, r1, r3
 8003162:	50cd      	str	r5, [r1, r3]
 8003164:	4630      	mov	r0, r6
 8003166:	f000 f85c 	bl	8003222 <__malloc_unlock>
 800316a:	f104 000b 	add.w	r0, r4, #11
 800316e:	1d23      	adds	r3, r4, #4
 8003170:	f020 0007 	bic.w	r0, r0, #7
 8003174:	1ac3      	subs	r3, r0, r3
 8003176:	d0d3      	beq.n	8003120 <_malloc_r+0x20>
 8003178:	425a      	negs	r2, r3
 800317a:	50e2      	str	r2, [r4, r3]
 800317c:	e7d0      	b.n	8003120 <_malloc_r+0x20>
 800317e:	684b      	ldr	r3, [r1, #4]
 8003180:	428c      	cmp	r4, r1
 8003182:	bf16      	itet	ne
 8003184:	6063      	strne	r3, [r4, #4]
 8003186:	6013      	streq	r3, [r2, #0]
 8003188:	460c      	movne	r4, r1
 800318a:	e7eb      	b.n	8003164 <_malloc_r+0x64>
 800318c:	460c      	mov	r4, r1
 800318e:	6849      	ldr	r1, [r1, #4]
 8003190:	e7cc      	b.n	800312c <_malloc_r+0x2c>
 8003192:	1cc4      	adds	r4, r0, #3
 8003194:	f024 0403 	bic.w	r4, r4, #3
 8003198:	42a0      	cmp	r0, r4
 800319a:	d005      	beq.n	80031a8 <_malloc_r+0xa8>
 800319c:	1a21      	subs	r1, r4, r0
 800319e:	4630      	mov	r0, r6
 80031a0:	f000 f82e 	bl	8003200 <_sbrk_r>
 80031a4:	3001      	adds	r0, #1
 80031a6:	d0cf      	beq.n	8003148 <_malloc_r+0x48>
 80031a8:	6025      	str	r5, [r4, #0]
 80031aa:	e7db      	b.n	8003164 <_malloc_r+0x64>
 80031ac:	200000cc 	.word	0x200000cc
 80031b0:	200000d0 	.word	0x200000d0

080031b4 <_realloc_r>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	4607      	mov	r7, r0
 80031b8:	4614      	mov	r4, r2
 80031ba:	460e      	mov	r6, r1
 80031bc:	b921      	cbnz	r1, 80031c8 <_realloc_r+0x14>
 80031be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80031c2:	4611      	mov	r1, r2
 80031c4:	f7ff bf9c 	b.w	8003100 <_malloc_r>
 80031c8:	b922      	cbnz	r2, 80031d4 <_realloc_r+0x20>
 80031ca:	f7ff ff4d 	bl	8003068 <_free_r>
 80031ce:	4625      	mov	r5, r4
 80031d0:	4628      	mov	r0, r5
 80031d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031d4:	f000 f826 	bl	8003224 <_malloc_usable_size_r>
 80031d8:	42a0      	cmp	r0, r4
 80031da:	d20f      	bcs.n	80031fc <_realloc_r+0x48>
 80031dc:	4621      	mov	r1, r4
 80031de:	4638      	mov	r0, r7
 80031e0:	f7ff ff8e 	bl	8003100 <_malloc_r>
 80031e4:	4605      	mov	r5, r0
 80031e6:	2800      	cmp	r0, #0
 80031e8:	d0f2      	beq.n	80031d0 <_realloc_r+0x1c>
 80031ea:	4631      	mov	r1, r6
 80031ec:	4622      	mov	r2, r4
 80031ee:	f7ff ff17 	bl	8003020 <memcpy>
 80031f2:	4631      	mov	r1, r6
 80031f4:	4638      	mov	r0, r7
 80031f6:	f7ff ff37 	bl	8003068 <_free_r>
 80031fa:	e7e9      	b.n	80031d0 <_realloc_r+0x1c>
 80031fc:	4635      	mov	r5, r6
 80031fe:	e7e7      	b.n	80031d0 <_realloc_r+0x1c>

08003200 <_sbrk_r>:
 8003200:	b538      	push	{r3, r4, r5, lr}
 8003202:	2300      	movs	r3, #0
 8003204:	4c05      	ldr	r4, [pc, #20]	; (800321c <_sbrk_r+0x1c>)
 8003206:	4605      	mov	r5, r0
 8003208:	4608      	mov	r0, r1
 800320a:	6023      	str	r3, [r4, #0]
 800320c:	f7fd fae4 	bl	80007d8 <_sbrk>
 8003210:	1c43      	adds	r3, r0, #1
 8003212:	d102      	bne.n	800321a <_sbrk_r+0x1a>
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	b103      	cbz	r3, 800321a <_sbrk_r+0x1a>
 8003218:	602b      	str	r3, [r5, #0]
 800321a:	bd38      	pop	{r3, r4, r5, pc}
 800321c:	20000170 	.word	0x20000170

08003220 <__malloc_lock>:
 8003220:	4770      	bx	lr

08003222 <__malloc_unlock>:
 8003222:	4770      	bx	lr

08003224 <_malloc_usable_size_r>:
 8003224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003228:	1f18      	subs	r0, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	bfbc      	itt	lt
 800322e:	580b      	ldrlt	r3, [r1, r0]
 8003230:	18c0      	addlt	r0, r0, r3
 8003232:	4770      	bx	lr

08003234 <_init>:
 8003234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003236:	bf00      	nop
 8003238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323a:	bc08      	pop	{r3}
 800323c:	469e      	mov	lr, r3
 800323e:	4770      	bx	lr

08003240 <_fini>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	bf00      	nop
 8003244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003246:	bc08      	pop	{r3}
 8003248:	469e      	mov	lr, r3
 800324a:	4770      	bx	lr
